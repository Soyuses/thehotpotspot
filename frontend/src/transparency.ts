// Transparency Dashboard entry point
import { apiClient } from './services/api';

class TransparencyApp {
  private container: HTMLElement;

  constructor() {
    this.container = document.getElementById('app')!;
    this.init();
  }

  private async init(): Promise<void> {
    try {
      // Check API health
      const isHealthy = await apiClient.healthCheck();
      if (!isHealthy) {
        this.showError('API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.');
        return;
      }

      // Initialize transparency dashboard
      await this.render();

      console.log('Transparency dashboard initialized successfully');
    } catch (error) {
      console.error('Failed to initialize transparency app:', error);
      this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏');
    }
  }

  private async render(): Promise<void> {
    this.container.innerHTML = `
      <div class="transparency-dashboard">
        <header class="dashboard-header">
          <h1>üîç –ü–∞–Ω–µ–ª—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏</h1>
          <div class="header-actions">
            <button class="btn btn-secondary" id="refreshBtn">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
            <button class="btn btn-primary" id="exportBtn">üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</button>
          </div>
        </header>

        <main class="dashboard-content">
          <div class="transparency-grid">
            <div class="card">
              <h3>üìà –û—Ç—á–µ—Ç—ã –ø–æ —ç–º–∏—Å—Å–∏–∏</h3>
              <div id="emissionsReport">
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–æ–≤...</p>
              </div>
            </div>
            
            <div class="card">
              <h3>üë• –î–µ—Ä–∂–∞—Ç–µ–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤</h3>
              <div id="holdersReport">
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ—Ä–∂–∞—Ç–µ–ª—è—Ö...</p>
              </div>
            </div>
            
            <div class="card">
              <h3>üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã</h3>
              <div id="financialReport">
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...</p>
              </div>
            </div>
          </div>
        </main>
      </div>
    `;

    await this.loadData();
    this.attachEventListeners();
  }

  private async loadData(): Promise<void> {
    try {
      // Load transparency data
      await this.loadEmissionsReport();
      await this.loadHoldersReport();
      await this.loadFinancialReport();
    } catch (error) {
      console.error('Error loading transparency data:', error);
      this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
  }

  private async loadEmissionsReport(): Promise<void> {
    const container = document.getElementById('emissionsReport');
    if (!container) return;

    // Mock data for now
    container.innerHTML = `
      <div class="report-content">
        <div class="report-item">
          <span>Security Tokens (ST):</span>
          <span class="value">1,250,000 THP</span>
        </div>
        <div class="report-item">
          <span>Utility Tokens (SPOT):</span>
          <span class="value">450,000 SPOT</span>
        </div>
        <div class="report-item">
          <span>–û–±—â–∞—è —ç–º–∏—Å—Å–∏—è:</span>
          <span class="value">1,700,000 —Ç–æ–∫–µ–Ω–æ–≤</span>
        </div>
      </div>
    `;
  }

  private async loadHoldersReport(): Promise<void> {
    const container = document.getElementById('holdersReport');
    if (!container) return;

    // Mock data for now
    container.innerHTML = `
      <div class="report-content">
        <div class="report-item">
          <span>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ—Ä–∂–∞—Ç–µ–ª–∏ ST:</span>
          <span class="value">1,250</span>
        </div>
        <div class="report-item">
          <span>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ—Ä–∂–∞—Ç–µ–ª–∏ SPOT:</span>
          <span class="value">3,450</span>
        </div>
        <div class="report-item">
          <span>–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</span>
          <span class="value">4,700</span>
        </div>
      </div>
    `;
  }

  private async loadFinancialReport(): Promise<void> {
    const container = document.getElementById('financialReport');
    if (!container) return;

    // Mock data for now
    container.innerHTML = `
      <div class="report-content">
        <div class="report-item">
          <span>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:</span>
          <span class="value">125,000 GEL</span>
        </div>
        <div class="report-item">
          <span>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:</span>
          <span class="value">25.50 GEL</span>
        </div>
        <div class="report-item">
          <span>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</span>
          <span class="value">4,900</span>
        </div>
      </div>
    `;
  }

  private attachEventListeners(): void {
    document.getElementById('refreshBtn')?.addEventListener('click', () => {
      this.loadData();
    });

    document.getElementById('exportBtn')?.addEventListener('click', () => {
      this.exportData();
    });
  }

  private exportData(): void {
    // Implement data export
    alert('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
  }

  private showError(message: string): void {
    this.container.innerHTML = `
      <div class="error-page">
        <div class="error-content">
          <h1>‚ö†Ô∏è –û—à–∏–±–∫–∞</h1>
          <p>${message}</p>
          <button class="btn btn-primary" onclick="location.reload()">
            üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
          </button>
          <a href="index.html" class="btn btn-secondary" style="margin-left: 1rem;">
            üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </a>
        </div>
      </div>
    `;
  }
}

// Initialize app when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  new TransparencyApp();
});
