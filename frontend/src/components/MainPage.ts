// Main page component
import { apiClient } from '@/services/api';
import { formatCurrency } from '@/utils/format';

export class MainPage {
  private container: HTMLElement;

  constructor(container: HTMLElement) {
    this.container = container;
  }

  async render(): Promise<void> {
    this.container.innerHTML = `
      <div class="main-page">
        <header class="hero">
          <div class="hero-content">
            <h1>üç≤ The Hot Pot Spot</h1>
            <p class="hero-subtitle">–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–∞—è —Å–µ—Ç—å —Å –±–ª–æ–∫—á–µ–π–Ω-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏</p>
            <div class="hero-stats">
              <div class="stat">
                <span class="stat-number" id="totalOrders">-</span>
                <span class="stat-label">–ó–∞–∫–∞–∑–æ–≤</span>
              </div>
              <div class="stat">
                <span class="stat-number" id="totalTokens">-</span>
                <span class="stat-label">–¢–æ–∫–µ–Ω–æ–≤ –≤—ã–¥–∞–Ω–æ</span>
              </div>
              <div class="stat">
                <span class="stat-number" id="activeUsers">-</span>
                <span class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</span>
              </div>
            </div>
          </div>
        </header>

        <section class="features">
          <h2>–ù–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</h2>
          <div class="features-grid">
            <div class="feature-card">
              <div class="feature-icon">üîó</div>
              <h3>–ë–ª–æ–∫—á–µ–π–Ω-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</h3>
              <p>–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</p>
            </div>
            <div class="feature-card">
              <div class="feature-icon">üé•</div>
              <h3>–í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ</h3>
              <p>–ü—Ä—è–º–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∏–∑ –∫—É—Ö–Ω–∏ —Å –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–µ–π –ª–∏—Ü –¥–ª—è –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</p>
            </div>
            <div class="feature-card">
              <div class="feature-icon">ü™ô</div>
              <h3>–¢–æ–∫–µ–Ω–æ–º–∏–∫–∞</h3>
              <p>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ SPOT —Ç–æ–∫–µ–Ω—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç—å—é</p>
            </div>
            <div class="feature-card">
              <div class="feature-icon">üè™</div>
              <h3>–§—Ä–∞–Ω—à–∏–∑–Ω–∞—è —Å–µ—Ç—å</h3>
              <p>–†–∞–∑–≤–∏–≤–∞—é—â–∞—è—Å—è —Å–µ—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</p>
            </div>
          </div>
        </section>

        <section class="interfaces">
          <h2>–ü–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h2>
          <div class="interfaces-grid">
            <a href="owner.html" class="interface-card owner-card">
              <h3>üëë –ü–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞</h3>
              <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç—å—é, —Ç–æ–∫–µ–Ω–æ–º–∏–∫–∞, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</p>
            </a>
            <a href="franchise.html" class="interface-card franchise-card">
              <h3>üè™ –ü–∞–Ω–µ–ª—å —Ñ—Ä–∞–Ω—á–∞–π–∑–∏</h3>
              <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º, –∑–∞–∫–∞–∑—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</p>
            </a>
            <a href="transparency.html" class="interface-card transparency-card">
              <h3>üîç –ü–∞–Ω–µ–ª—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏</h3>
              <p>–û—Ç—á–µ—Ç—ã, –∞—É–¥–∏—Ç, —Ä–µ–ø—É—Ç–∞—Ü–∏—è</p>
            </a>
            <a href="video.html" class="interface-card video-card">
              <h3>üìπ –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ</h3>
              <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞–º–∏, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—É—Ö–Ω–∏</p>
            </a>
            <a href="tablet.html" class="interface-card tablet-card">
              <h3>üì± –ü–ª–∞–Ω—à–µ—Ç –∑–∞ —Å—Ç–æ–ª–æ–º</h3>
              <p>–ó–∞–∫–∞–∑ –µ–¥—ã, —Å—Ç—Ä–∏–º–∏–Ω–≥, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ SPOT</p>
            </a>
          </div>
        </section>

        <section class="menu-preview">
          <h2>–ù–∞—à–µ –º–µ–Ω—é</h2>
          <div class="menu-grid" id="menuPreview">
            <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é...</div>
          </div>
          <a href="franchise.html" class="btn btn-primary">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é</a>
        </section>

        <footer class="footer">
          <div class="footer-content">
            <p>&copy; 2024 The Hot Pot Spot. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
            <div class="footer-links">
              <a href="#privacy">–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</a>
              <a href="#terms">–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</a>
              <a href="#contact">–ö–æ–Ω—Ç–∞–∫—Ç—ã</a>
            </div>
          </div>
        </footer>
      </div>
    `;

    await this.loadData();
    this.attachEventListeners();
  }

  private async loadData(): Promise<void> {
    try {
      // Load menu preview
      const menu = await apiClient.getMenu();
      this.renderMenuPreview(menu.slice(0, 6)); // Show first 6 items

      // Load statistics (mock data for now)
      this.updateStatistics({
        totalOrders: 1250,
        totalTokens: 45000,
        activeUsers: 320
      });
    } catch (error) {
      console.error('Error loading main page data:', error);
      this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
  }

  private renderMenuPreview(menuItems: any[]): void {
    const menuContainer = document.getElementById('menuPreview');
    if (!menuContainer) return;

    if (menuItems.length === 0) {
      menuContainer.innerHTML = '<div class="no-data">–ú–µ–Ω—é –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</div>';
      return;
    }

    menuContainer.innerHTML = menuItems.map(item => `
      <div class="menu-item">
        <div class="menu-item-image">
          <div class="placeholder-image">üçΩÔ∏è</div>
        </div>
        <div class="menu-item-content">
          <h4>${item.name}</h4>
          <p>${item.description}</p>
          <div class="menu-item-price">${formatCurrency(item.price_subunits / 100)}</div>
        </div>
      </div>
    `).join('');
  }

  private updateStatistics(stats: { totalOrders: number; totalTokens: number; activeUsers: number }): void {
    const totalOrdersEl = document.getElementById('totalOrders');
    const totalTokensEl = document.getElementById('totalTokens');
    const activeUsersEl = document.getElementById('activeUsers');

    if (totalOrdersEl) totalOrdersEl.textContent = stats.totalOrders.toLocaleString();
    if (totalTokensEl) totalTokensEl.textContent = stats.totalTokens.toLocaleString();
    if (activeUsersEl) activeUsersEl.textContent = stats.activeUsers.toLocaleString();
  }

  private attachEventListeners(): void {
    // Add any event listeners here
  }

  private showError(message: string): void {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message';
    errorDiv.textContent = message;
    this.container.appendChild(errorDiv);
  }
}
