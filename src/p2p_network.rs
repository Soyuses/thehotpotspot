use std::collections::HashMap;
use std::net::{TcpListener, TcpStream, SocketAddr};
use std::io::{Read, Write, BufRead, BufReader};
use std::sync::{Arc, Mutex};
use std::thread;
use std::time::{Duration, SystemTime, UNIX_EPOCH};
use serde::{Serialize, Deserialize};
use crate::franchise_network::FranchiseNetwork;
use crate::consensus::{ConsensusAlgorithm, ConsensusResult, Block, Transaction};

// P2P —Å–æ–æ–±—â–µ–Ω–∏—è
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum P2PMessage {
    // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–µ—Ç–∏
    Ping { node_id: u64, timestamp: u64 },
    Pong { node_id: u64, timestamp: u64 },
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    SyncRequest { from_height: u64 },
    SyncResponse { blocks: Vec<Block> },
    
    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    NewTransaction { transaction: Transaction },
    TransactionBroadcast { transaction: Transaction },
    
    // –ö–æ–Ω—Å–µ–Ω—Å—É—Å
    ConsensusRequest { block_height: u64 },
    ConsensusResponse { result: ConsensusResult },
    
    // –ë–ª–æ–∫–∏
    NewBlock { block: Block },
    BlockRequest { block_height: u64 },
    BlockResponse { block: Block },
    
    // –°—Ç–∞—Ç—É—Å –Ω–æ–¥—ã
    NodeStatus { node_id: u64, status: NodeStatus },
    NetworkStats { stats: NetworkStats },
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NodeStatus {
    pub node_id: u64,
    pub is_active: bool,
    pub last_seen: u64,
    pub block_height: u64,
    pub peer_count: usize,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NetworkStats {
    pub total_nodes: usize,
    pub active_nodes: usize,
    pub total_blocks: u64,
    pub network_hashrate: f64,
}

// P2P —É–∑–µ–ª
pub struct P2PNode {
    pub node_id: u64,
    pub address: SocketAddr,
    pub peers: Arc<Mutex<HashMap<u64, PeerInfo>>>,
    pub franchise_network: Arc<Mutex<FranchiseNetwork>>,
    pub consensus: Arc<Mutex<ConsensusAlgorithm>>,
    pub blockchain: Arc<Mutex<Vec<Block>>>,
    pub pending_transactions: Arc<Mutex<Vec<Transaction>>>,
    pub is_running: Arc<Mutex<bool>>,
}

#[derive(Debug, Clone)]
pub struct PeerInfo {
    pub node_id: u64,
    pub address: SocketAddr,
    pub last_ping: u64,
    pub is_connected: bool,
    pub block_height: u64,
}

impl P2PNode {
    pub fn new(node_id: u64, address: SocketAddr, franchise_network: Arc<Mutex<FranchiseNetwork>>) -> Self {
        Self {
            node_id,
            address,
            peers: Arc::new(Mutex::new(HashMap::new())),
            franchise_network,
            consensus: Arc::new(Mutex::new(ConsensusAlgorithm::new())),
            blockchain: Arc::new(Mutex::new(Vec::new())),
            pending_transactions: Arc::new(Mutex::new(Vec::new())),
            is_running: Arc::new(Mutex::new(false)),
        }
    }

    // –ó–∞–ø—É—Å–∫ P2P —É–∑–ª–∞
    pub fn start(&self) {
        println!("üåê Starting P2P Node {} on {}", self.node_id, self.address);
        
        *self.is_running.lock().unwrap() = true;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        let server_handle = self.start_server();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        let client_handle = self.start_client();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å
        let consensus_handle = self.start_consensus();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        let sync_handle = self.start_sync();
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        server_handle.join().unwrap();
        client_handle.join().unwrap();
        consensus_handle.join().unwrap();
        sync_handle.join().unwrap();
    }

    // –°–µ—Ä–≤–µ—Ä –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    fn start_server(&self) -> thread::JoinHandle<()> {
        let node_id = self.node_id;
        let peers = Arc::clone(&self.peers);
        let franchise_network = Arc::clone(&self.franchise_network);
        let blockchain = Arc::clone(&self.blockchain);
        let pending_transactions = Arc::clone(&self.pending_transactions);
        let is_running = Arc::clone(&self.is_running);
        
        thread::spawn(move || {
            let listener = TcpListener::bind("0.0.0.0:8080").expect("Failed to bind server");
            println!("üîó P2P Server listening on 0.0.0.0:8080");
            
            for stream in listener.incoming() {
                if !*is_running.lock().unwrap() {
                    break;
                }
                
                match stream {
                    Ok(stream) => {
                        let peers = Arc::clone(&peers);
                        let franchise_network = Arc::clone(&franchise_network);
                        let blockchain = Arc::clone(&blockchain);
                        let pending_transactions = Arc::clone(&pending_transactions);
                        
                        thread::spawn(move || {
                            Self::handle_incoming_connection(stream, node_id, peers, franchise_network, blockchain, pending_transactions);
                        });
                    }
                    Err(e) => {
                        eprintln!("Error accepting connection: {}", e);
                    }
                }
            }
        })
    }

    // –ö–ª–∏–µ–Ω—Ç –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    fn start_client(&self) -> thread::JoinHandle<()> {
        let node_id = self.node_id;
        let peers = Arc::clone(&self.peers);
        let is_running = Arc::clone(&self.is_running);
        
        thread::spawn(move || {
            // –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∏—Ä–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ DNS)
            let known_peers = vec![
                "127.0.0.1:8081".parse::<SocketAddr>().unwrap(),
                "127.0.0.1:8082".parse::<SocketAddr>().unwrap(),
            ];
            
            while *is_running.lock().unwrap() {
                for peer_addr in &known_peers {
                    if let Ok(stream) = TcpStream::connect(peer_addr) {
                        let peers = Arc::clone(&peers);
                        thread::spawn(move || {
                            Self::handle_outgoing_connection(stream, node_id, peers);
                        });
                    }
                }
                
                thread::sleep(Duration::from_secs(30)); // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            }
        })
    }

    // –ö–æ–Ω—Å–µ–Ω—Å—É—Å
    fn start_consensus(&self) -> thread::JoinHandle<()> {
        let node_id = self.node_id;
        let peers = Arc::clone(&self.peers);
        let franchise_network = Arc::clone(&self.franchise_network);
        let consensus = Arc::clone(&self.consensus);
        let blockchain = Arc::clone(&self.blockchain);
        let pending_transactions = Arc::clone(&self.pending_transactions);
        let is_running = Arc::clone(&self.is_running);
        
        thread::spawn(move || {
            while *is_running.lock().unwrap() {
                // –ñ–¥–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
                thread::sleep(Duration::from_secs(10));
                
                let pending_count = pending_transactions.lock().unwrap().len();
                if pending_count == 0 {
                    continue;
                }
                
                // –í—ã–±–∏—Ä–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
                let network = franchise_network.lock().unwrap();
                let consensus_alg = consensus.lock().unwrap();
                let current_height = blockchain.lock().unwrap().len() as u64;
                
                let consensus_result = consensus_alg.select_validators(&network, current_height);
                drop(network);
                drop(consensus_alg);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ–º—Å—è –ª–∏ –º—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º
                if consensus_result.selected_validators.contains(&node_id) {
                    println!("üéØ Node {} selected as validator for block {}", node_id, current_height);
                    
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫
                    let mut transactions = pending_transactions.lock().unwrap();
                    let block_transactions = transactions.drain(..).collect();
                    drop(transactions);
                    
                    let blockchain_guard = blockchain.lock().unwrap();
                    let previous_hash = blockchain_guard.last()
                        .map(|b| b.hash.clone())
                        .unwrap_or_else(|| "genesis".to_string());
                    drop(blockchain_guard);
                    
                    let mut new_block = Block::new(current_height, previous_hash, block_transactions);
                    
                    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –±–ª–æ–∫
                    new_block.add_signature(node_id, format!("signature_{}_{}", node_id, current_height));
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –≤ –±–ª–æ–∫—á–µ–π–Ω
                    blockchain.lock().unwrap().push(new_block.clone());
                    
                    // –†–∞—Å—Å—ã–ª–∞–µ–º –±–ª–æ–∫ –¥—Ä—É–≥–∏–º —É–∑–ª–∞–º
                    Self::broadcast_message(&peers, P2PMessage::NewBlock { block: new_block });
                }
            }
        })
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    fn start_sync(&self) -> thread::JoinHandle<()> {
        let node_id = self.node_id;
        let peers = Arc::clone(&self.peers);
        let blockchain = Arc::clone(&self.blockchain);
        let is_running = Arc::clone(&self.is_running);
        
        thread::spawn(move || {
            while *is_running.lock().unwrap() {
                thread::sleep(Duration::from_secs(60)); // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
                let current_height = blockchain.lock().unwrap().len() as u64;
                
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —É –ø–∏—Ä–æ–≤
                Self::broadcast_message(&peers, P2PMessage::SyncRequest { from_height: current_height });
            }
        })
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    fn handle_incoming_connection(
        mut stream: TcpStream,
        node_id: u64,
        peers: Arc<Mutex<HashMap<u64, PeerInfo>>>,
        franchise_network: Arc<Mutex<FranchiseNetwork>>,
        blockchain: Arc<Mutex<Vec<Block>>>,
        pending_transactions: Arc<Mutex<Vec<Transaction>>>,
    ) {
        let peer_addr = stream.peer_addr().unwrap();
        println!("üì° Incoming connection from {}", peer_addr);
        
        let reader = BufReader::new(stream.try_clone().unwrap());
        
        for line in reader.lines() {
            if let Ok(line) = line {
                if let Ok(message) = serde_json::from_str::<P2PMessage>(&line) {
                    Self::handle_message(
                        message,
                        &mut stream,
                        node_id,
                        &peers,
                        &franchise_network,
                        &blockchain,
                        &pending_transactions,
                    );
                }
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    fn handle_outgoing_connection(
        mut stream: TcpStream,
        node_id: u64,
        peers: Arc<Mutex<HashMap<u64, PeerInfo>>>,
    ) {
        let peer_addr = stream.peer_addr().unwrap();
        println!("üîó Connected to peer {}", peer_addr);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping
        let ping = P2PMessage::Ping {
            node_id,
            timestamp: SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs(),
        };
        
        if let Ok(json) = serde_json::to_string(&ping) {
            let _ = writeln!(stream, "{}", json);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∏—Ä–∞
        let mut peers_guard = peers.lock().unwrap();
        peers_guard.insert(node_id, PeerInfo {
            node_id,
            address: peer_addr,
            last_ping: SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs(),
            is_connected: true,
            block_height: 0,
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    fn handle_message(
        message: P2PMessage,
        stream: &mut TcpStream,
        node_id: u64,
        peers: &Arc<Mutex<HashMap<u64, PeerInfo>>>,
        franchise_network: &Arc<Mutex<FranchiseNetwork>>,
        blockchain: &Arc<Mutex<Vec<Block>>>,
        pending_transactions: &Arc<Mutex<Vec<Transaction>>>,
    ) {
        match message {
            P2PMessage::Ping { node_id: peer_id, timestamp } => {
                println!("üì° Ping from node {}", peer_id);
                
                let pong = P2PMessage::Pong {
                    node_id,
                    timestamp: SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs(),
                };
                
                if let Ok(json) = serde_json::to_string(&pong) {
                    let _ = writeln!(stream, "{}", json);
                }
            }
            
            P2PMessage::Pong { node_id: peer_id, timestamp: _ } => {
                println!("üì° Pong from node {}", peer_id);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ä–µ
                let mut peers_guard = peers.lock().unwrap();
                if let Some(peer) = peers_guard.get_mut(&peer_id) {
                    peer.last_ping = SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs();
                }
            }
            
            P2PMessage::SyncRequest { from_height } => {
                println!("üì° Sync request from height {}", from_height);
                
                let blockchain_guard = blockchain.lock().unwrap();
                let blocks_to_send: Vec<Block> = blockchain_guard
                    .iter()
                    .skip(from_height as usize)
                    .cloned()
                    .collect();
                drop(blockchain_guard);
                
                let sync_response = P2PMessage::SyncResponse { blocks: blocks_to_send };
                if let Ok(json) = serde_json::to_string(&sync_response) {
                    let _ = writeln!(stream, "{}", json);
                }
            }
            
            P2PMessage::SyncResponse { blocks } => {
                println!("üì° Received {} blocks in sync response", blocks.len());
                
                let mut blockchain_guard = blockchain.lock().unwrap();
                for block in blocks {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–ª–æ–∫ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if blockchain_guard.len() <= block.height as usize {
                        blockchain_guard.push(block);
                    }
                }
            }
            
            P2PMessage::NewTransaction { transaction } => {
                println!("üì° New transaction: {}", transaction.id);
                
                let mut pending = pending_transactions.lock().unwrap();
                pending.push(transaction);
            }
            
            P2PMessage::NewBlock { block } => {
                println!("üì° New block: height {}", block.height);
                
                let mut blockchain_guard = blockchain.lock().unwrap();
                if blockchain_guard.len() <= block.height as usize {
                    blockchain_guard.push(block);
                }
            }
            
            _ => {
                println!("üì° Unhandled message type");
            }
        }
    }

    // –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–∏—Ä–∞–º
    fn broadcast_message(peers: &Arc<Mutex<HashMap<u64, PeerInfo>>>, message: P2PMessage) {
        let peers_guard = peers.lock().unwrap();
        for peer in peers_guard.values() {
            if peer.is_connected {
                if let Ok(mut stream) = TcpStream::connect(peer.address) {
                    if let Ok(json) = serde_json::to_string(&message) {
                        let _ = writeln!(stream, "{}", json);
                    }
                }
            }
        }
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–∑–ª–∞
    pub fn stop(&self) {
        *self.is_running.lock().unwrap() = false;
        println!("üõë P2P Node {} stopped", self.node_id);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏
    pub fn get_network_stats(&self) -> NetworkStats {
        let peers_guard = self.peers.lock().unwrap();
        let blockchain_guard = self.blockchain.lock().unwrap();
        
        NetworkStats {
            total_nodes: peers_guard.len() + 1, // +1 –¥–ª—è —Å–µ–±—è
            active_nodes: peers_guard.values().filter(|p| p.is_connected).count() + 1,
            total_blocks: blockchain_guard.len() as u64,
            network_hashrate: 0.0, // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        }
    }
}
