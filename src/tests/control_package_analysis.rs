use crate::*;
use std::collections::HashMap;

/// –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –∏ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
/// 
/// –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –∏—Å—Å–ª–µ–¥—É–µ—Ç:
/// 1. –ö–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç
/// 2. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
/// 3. –ú–µ—Ö–∞–Ω–∏–∑–º—ã –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–ª–∞—Å—Ç–∏
/// 4. –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤

#[test]
fn test_owner_control_package_accumulation() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüîç === –ê–ù–ê–õ–ò–ó –ù–ê–ö–û–ü–õ–ï–ù–ò–Ø –ö–û–ù–¢–†–û–õ–¨–ù–û–ì–û –ü–ê–ö–ï–¢–ê –í–õ–ê–î–ï–õ–¨–¶–ï–ú ===");
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫
    let mut total_purchases = 0.0;
    let mut owner_initial_tokens = bc.token_holders.get(&owner).unwrap().security_tokens;
    
    println!("–ù–∞—á–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2}", owner_initial_tokens);
    
    // –°–æ–∑–¥–∞–µ–º 100 –ø–æ–∫—É–ø–æ–∫
    for i in 0..100 {
        let purchase_amount = 10.0 + (i as f64 * 0.1); // –û—Ç 10 –¥–æ 20
        bc.process_purchase(
            format!("Customer{}", i),
            "Truck".to_string(),
            purchase_amount,
            vec!["Meal".to_string()],
        );
        total_purchases += purchase_amount;
    }
    
    let owner_final_tokens = bc.token_holders.get(&owner).unwrap().security_tokens;
    let total_tokens: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
    let owner_percentage = (owner_final_tokens / total_tokens) * 100.0;
    
    println!("–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: {:.2}", total_purchases);
    println!("–§–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2}", owner_final_tokens);
    println!("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å–µ—Ç–∏: {:.2}", total_tokens);
    println!("–ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º: {:.2}%", owner_percentage);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –ª–∏–º–∏—Ç
    let report = bc.check_network_security();
    let owner_risk = report.security_risks.iter()
        .find(|risk| risk.wallet == owner);
    
    if let Some(risk) = owner_risk {
        println!("‚ö†Ô∏è  –í–õ–ê–î–ï–õ–ï–¶ –ü–†–ï–í–´–®–ê–ï–¢ –õ–ò–ú–ò–¢: {:.2}%", risk.percentage);
        assert!(risk.percentage > bc.max_owner_percentage);
    } else {
        println!("‚úÖ –í–ª–∞–¥–µ–ª–µ—Ü –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞: {:.2}%", owner_percentage);
    }
}

#[test]
fn test_token_redistribution_mechanisms() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüîÑ === –ú–ï–•–ê–ù–ò–ó–ú–´ –ü–ï–†–ï–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –¢–û–ö–ï–ù–û–í ===");
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é —É –≤–ª–∞–¥–µ–ª—å—Ü–∞
    for i in 0..50 {
        bc.process_purchase(
            format!("Customer{}", i),
            "Truck".to_string(),
            20.0,
            vec!["Meal".to_string()],
        );
    }
    
    let initial_owner_tokens = bc.token_holders.get(&owner).unwrap().security_tokens;
    let initial_total: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
    let initial_percentage = (initial_owner_tokens / initial_total) * 100.0;
    
    println!("–ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2}%", initial_percentage);
    
    // –ú–µ—Ö–∞–Ω–∏–∑–º 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å –±–∞–ª–∞–Ω—Å–∞
    let mut redistributed_tokens = 0.0;
    
    for i in 0..20 {
        // –°–æ–∑–¥–∞–µ–º —á–µ–∫ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
        let check = bc.process_purchase(
            format!("RedistCustomer{}", i),
            "Truck".to_string(),
            15.0,
            vec!["Meal".to_string()],
        );
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let phone = format!("+123456789{}", i);
        let wallet = format!("0xredist{}", i);
        let verification_code = bc.register_user_with_phone(phone.clone(), wallet.clone())
            .expect("registration should succeed");
        bc.verify_phone_number(phone.clone(), verification_code)
            .expect("verification should succeed");
        
        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –±–∞–ª–∞–Ω—Å (–µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç—ã)
        match bc.transfer_balance_from_check(check.check_id, phone) {
            Ok(_) => {
                redistributed_tokens += 15.0;
                println!("‚úÖ –ü–µ—Ä–µ–Ω–æ—Å {} —Ç–æ–∫–µ–Ω–æ–≤ —É—Å–ø–µ—à–µ–Ω", 15.0);
            }
            Err(e) => {
                println!("‚ùå –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {}", e);
            }
        }
    }
    
    let final_owner_tokens = bc.token_holders.get(&owner).unwrap().security_tokens;
    let final_total: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
    let final_percentage = (final_owner_tokens / final_total) * 100.0;
    
    println!("–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {:.2}", redistributed_tokens);
    println!("–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2}%", final_percentage);
    println!("–°–Ω–∏–∂–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏: {:.2}%", initial_percentage - final_percentage);
}

#[test]
fn test_coordinated_group_attack_on_control() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüë• === –ö–û–û–†–î–ò–ù–ò–†–û–í–ê–ù–ù–ê–Ø –ê–¢–ê–ö–ê –ì–†–£–ü–ü–´ –ù–ê –ö–û–ù–¢–†–û–õ–¨ ===");
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é —Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–µ–π —É –≤–ª–∞–¥–µ–ª—å—Ü–∞
    for i in 0..30 {
        bc.process_purchase(
            format!("Customer{}", i),
            "Truck".to_string(),
            25.0,
            vec!["Meal".to_string()],
        );
    }
    
    let initial_owner_percentage = {
        let owner_tokens = bc.token_holders.get(&owner).unwrap().security_tokens;
        let total: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
        (owner_tokens / total) * 100.0
    };
    
    println!("–ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2}%", initial_owner_percentage);
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –∞—Ç–∞–∫—É—é—â–∏—Ö
    let group_size = 10;
    let mut group_total_tokens = 0.0;
    
    for i in 0..group_size {
        // –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã –¥–µ–ª–∞–µ—Ç –ø–æ–∫—É–ø–∫–∏
        for j in 0..5 {
            let purchase_amount = 20.0;
            bc.process_purchase(
                format!("Group{}_Customer{}", i, j),
                "Truck".to_string(),
                purchase_amount,
                vec!["Meal".to_string()],
            );
            group_total_tokens += purchase_amount;
        }
        
        // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –¥–µ—Ä–∂–∞—Ç–µ–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã
        let mut group_member = TokenHolder::new(format!("group_member{}", i), false);
        group_member.add_security_tokens(100.0); // –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã
        bc.token_holders.insert(format!("group_member{}", i), group_member);
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–ª–∞—Å—Ç–∏
    let final_total: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
    let owner_tokens = bc.token_holders.get(&owner).unwrap().security_tokens;
    let owner_percentage = (owner_tokens / final_total) * 100.0;
    
    // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é –¥–æ–ª—é –≥—Ä—É–ø–ø—ã
    let group_tokens: f64 = (0..group_size)
        .map(|i| bc.token_holders.get(&format!("group_member{}", i)).unwrap().security_tokens)
        .sum();
    let group_percentage = (group_tokens / final_total) * 100.0;
    
    println!("–¢–æ–∫–µ–Ω—ã –≥—Ä—É–ø–ø—ã: {:.2}", group_tokens);
    println!("–ü—Ä–æ—Ü–µ–Ω—Ç –≥—Ä—É–ø–ø—ã: {:.2}%", group_percentage);
    println!("–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2}%", owner_percentage);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å
    if group_percentage > owner_percentage {
        println!("üö® –ì–†–£–ü–ü–ê –ü–û–õ–£–ß–ò–õ–ê –ë–û–õ–¨–®–ï –¢–û–ö–ï–ù–û–í –ß–ï–ú –í–õ–ê–î–ï–õ–ï–¶!");
    } else {
        println!("‚úÖ –í–ª–∞–¥–µ–ª–µ—Ü —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ");
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    let report = bc.check_network_security();
    println!("–†–∏—Å–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {}", report.security_risks.len());
    for risk in &report.security_risks {
        println!("  - {}: {:.2}% ({})", risk.wallet, risk.percentage, risk.token_type);
    }
}

#[test]
fn test_load_testing_token_concentration() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\n‚ö° === –ù–ê–ì–†–£–ó–û–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–¶–ï–ù–¢–†–ê–¶–ò–ò –¢–û–ö–ï–ù–û–í ===");
    
    let scenarios = vec![
        ("–ú–∞–ª—ã–µ –ø–æ–∫—É–ø–∫–∏", 1000, 5.0),
        ("–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏", 500, 20.0),
        ("–ö—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏", 100, 100.0),
        ("–°–º–µ—à–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏", 200, 0.0), // 0 –æ–∑–Ω–∞—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Å—É–º–º—ã
    ];
    
    for (scenario_name, num_purchases, amount) in scenarios {
        println!("\n--- –°—Ü–µ–Ω–∞—Ä–∏–π: {} ---", scenario_name);
        
        let mut bc_scenario = bc.clone();
        let mut total_purchases = 0.0;
        
        for i in 0..num_purchases {
            let purchase_amount = if amount == 0.0 {
                // –°–ª—É—á–∞–π–Ω—ã–µ —Å—É–º–º—ã –æ—Ç 1 –¥–æ 50
                fastrand::f64() * 49.0 + 1.0
            } else {
                amount
            };
            
            bc_scenario.process_purchase(
                format!("LoadTest_Customer_{}_{}", scenario_name, i),
                "Truck".to_string(),
                purchase_amount,
                vec!["Meal".to_string()],
            );
            total_purchases += purchase_amount;
        }
        
        let owner_tokens = bc_scenario.token_holders.get(&owner).unwrap().security_tokens;
        let total_tokens: f64 = bc_scenario.token_holders.values().map(|h| h.security_tokens).sum();
        let owner_percentage = (owner_tokens / total_tokens) * 100.0;
        
        let report = bc_scenario.check_network_security();
        let is_secure = report.is_secure;
        let risks_count = report.security_risks.len();
        
        println!("  –ü–æ–∫—É–ø–æ–∫: {}", num_purchases);
        println!("  –û–±—â–∞—è —Å—É–º–º–∞: {:.2}", total_purchases);
        println!("  –¢–æ–∫–µ–Ω—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2}", owner_tokens);
        println!("  –ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2}%", owner_percentage);
        println!("  –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {}", if is_secure { "‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ" } else { "‚ö†Ô∏è –†–∏—Å–∫–∏" });
        println!("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏—Å–∫–æ–≤: {}", risks_count);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
        let mut distribution = HashMap::new();
        for holder in bc_scenario.token_holders.values() {
            let percentage = (holder.security_tokens / total_tokens) * 100.0;
            let range = match percentage {
                p if p >= 10.0 => "10%+",
                p if p >= 5.0 => "5-10%",
                p if p >= 1.0 => "1-5%",
                _ => "<1%",
            };
            *distribution.entry(range).or_insert(0) += 1;
        }
        
        println!("  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π:");
        for (range, count) in distribution {
            println!("    {}: {} –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π", range, count);
        }
    }
}

#[test]
fn test_decentralization_mechanisms() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüåê === –ú–ï–•–ê–ù–ò–ó–ú–´ –î–ï–¶–ï–ù–¢–†–ê–õ–ò–ó–ê–¶–ò–ò ===");
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é
    for i in 0..40 {
        bc.process_purchase(
            format!("Customer{}", i),
            "Truck".to_string(),
            30.0,
            vec!["Meal".to_string()],
        );
    }
    
    let initial_owner_percentage = {
        let owner_tokens = bc.token_holders.get(&owner).unwrap().security_tokens;
        let total: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
        (owner_tokens / total) * 100.0
    };
    
    println!("–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2}%", initial_owner_percentage);
    
    // –ú–µ—Ö–∞–Ω–∏–∑–º 1: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤
    let redistribution_percentage = 0.1; // 10% –æ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    let owner_tokens = bc.token_holders.get(&owner).unwrap().security_tokens;
    let tokens_to_redistribute = owner_tokens * redistribution_percentage;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã—Ö –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π —Ç–æ–∫–µ–Ω–æ–≤
    let num_new_holders = 20;
    let tokens_per_holder = tokens_to_redistribute / num_new_holders as f64;
    
    for i in 0..num_new_holders {
        let mut new_holder = TokenHolder::new(format!("decentralized_holder{}", i), false);
        new_holder.add_security_tokens(tokens_per_holder);
        bc.token_holders.insert(format!("decentralized_holder{}", i), new_holder);
    }
    
    // –£–º–µ–Ω—å—à–∞–µ–º —Ç–æ–∫–µ–Ω—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if let Some(owner_holder) = bc.token_holders.get_mut(&owner) {
        owner_holder.security_tokens -= tokens_to_redistribute;
    }
    
    let final_owner_percentage = {
        let owner_tokens = bc.token_holders.get(&owner).unwrap().security_tokens;
        let total: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
        (owner_tokens / total) * 100.0
    };
    
    println!("–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {:.2}", tokens_to_redistribute);
    println!("–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: {}", num_new_holders);
    println!("–§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2}%", final_owner_percentage);
    println!("–°–Ω–∏–∂–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏: {:.2}%", initial_owner_percentage - final_owner_percentage);
    
    // –ú–µ—Ö–∞–Ω–∏–∑–º 2: –°—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±–æ–Ω—É—Å—ã
    let decentralization_bonus = 0.05; // 5% –±–æ–Ω—É—Å –∑–∞ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏—é
    let total_tokens: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
    let bonus_tokens = total_tokens * decentralization_bonus;
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –±–æ–Ω—É—Å –º–µ–∂–¥—É –≤—Å–µ–º–∏ –¥–µ—Ä–∂–∞—Ç–µ–ª—è–º–∏ (–∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞)
    let non_owner_addresses: Vec<String> = bc.token_holders.iter()
        .filter(|(addr, _)| **addr != owner)
        .map(|(addr, _)| addr.clone())
        .collect();
    
    let bonus_per_holder = bonus_tokens / non_owner_addresses.len() as f64;
    
    for addr in non_owner_addresses {
        if let Some(holder_mut) = bc.token_holders.get_mut(&addr) {
            holder_mut.add_security_tokens(bonus_per_holder);
        }
    }
    
    let final_owner_percentage_with_bonus = {
        let owner_tokens = bc.token_holders.get(&owner).unwrap().security_tokens;
        let total: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
        (owner_tokens / total) * 100.0
    };
    
    println!("–ë–æ–Ω—É—Å –∑–∞ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏—é: {:.2}", bonus_tokens);
    println!("–§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —Å –±–æ–Ω—É—Å–æ–º: {:.2}%", final_owner_percentage_with_bonus);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    let report = bc.check_network_security();
    println!("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–µ—Ç–∏: {}", if report.is_secure { "‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ" } else { "‚ö†Ô∏è –†–∏—Å–∫–∏" });
    println!("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏—Å–∫–æ–≤: {}", report.security_risks.len());
}

#[test]
fn test_what_if_51_percent_always_goes_to_owner() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüö® === –°–¶–ï–ù–ê–†–ò–ô: 51% –í–°–ï–ì–î–ê –ü–û–ü–ê–î–ê–ï–¢ –í–õ–ê–î–ï–õ–¨–¶–£ ===");
    
    // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É process_purchase –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –±—ã–ª–æ –±—ã –æ–ø–∞—Å–Ω–æ!
    
    let mut total_purchases = 0.0;
    let mut owner_accumulation = 0.0;
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º 100 –ø–æ–∫—É–ø–æ–∫, –≥–¥–µ –≤–ª–∞–¥–µ–ª–µ—Ü –ø–æ–ª—É—á–∞–µ—Ç 51% –æ—Ç –∫–∞–∂–¥–æ–π
    for i in 0..100 {
        let purchase_amount = 20.0;
        total_purchases += purchase_amount;
        
        // –í–ª–∞–¥–µ–ª–µ—Ü –ø–æ–ª—É—á–∞–µ—Ç 51% –æ—Ç –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏
        let owner_share = purchase_amount * 0.51;
        owner_accumulation += owner_share;
        
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ 49% —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –º–µ–∂–¥—É –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        let remaining = purchase_amount * 0.49;
        
        // –°–æ–∑–¥–∞–µ–º –¥—Ä—É–≥–∏—Ö –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π —Ç–æ–∫–µ–Ω–æ–≤
        let mut other_holder = TokenHolder::new(format!("other_holder{}", i), false);
        other_holder.add_security_tokens(remaining);
        bc.token_holders.insert(format!("other_holder{}", i), other_holder);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if let Some(owner_holder) = bc.token_holders.get_mut(&owner) {
        owner_holder.security_tokens += owner_accumulation;
    }
    
    let owner_tokens = bc.token_holders.get(&owner).unwrap().security_tokens;
    let total_tokens: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
    let owner_percentage = (owner_tokens / total_tokens) * 100.0;
    
    println!("–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: {:.2}", total_purchases);
    println!("–ù–∞–∫–æ–ø–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º: {:.2}", owner_accumulation);
    println!("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {:.2}", total_tokens);
    println!("–ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º: {:.2}%", owner_percentage);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è
    if owner_percentage > 50.0 {
        println!("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø: –í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç {:.2}% —Ç–æ–∫–µ–Ω–æ–≤!", owner_percentage);
        println!("   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–µ—Ç—å—é!");
        println!("   –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞:");
        println!("   - –û—Ç–º–µ–Ω–∞ –ª—é–±—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π");
        println!("   - –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–∫–æ–≤ —Å–µ—Ç–∏");
        println!("   - –ú–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–æ–º");
        println!("   - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
    println!("\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:");
    
    // –†–µ—à–µ–Ω–∏–µ 1: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    let redistribution_needed = owner_tokens - (total_tokens * 0.49); // –î–æ 49%
    println!("1. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å {:.2} —Ç–æ–∫–µ–Ω–æ–≤", redistribution_needed);
    
    // –†–µ—à–µ–Ω–∏–µ 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    let new_tokens_needed = (owner_tokens / 0.49) - total_tokens;
    println!("2. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å {:.2} –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤", new_tokens_needed);
    
    // –†–µ—à–µ–Ω–∏–µ 3: –°–∂–∏–≥–∞–Ω–∏–µ —á–∞—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    let burn_needed = owner_tokens - (total_tokens * 0.49);
    println!("3. –°–∂–∏–≥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞: –Ω—É–∂–Ω–æ —Å–∂–µ—á—å {:.2} —Ç–æ–∫–µ–Ω–æ–≤", burn_needed);
    
    // –†–µ—à–µ–Ω–∏–µ 4: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
    println!("4. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Proof-of-Stake —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    let report = bc.check_network_security();
    println!("\nüìä –û–¢–ß–ï–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:");
    println!("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {}", if report.is_secure { "‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ" } else { "üö® –û–ü–ê–°–ù–û" });
    println!("–†–∏—Å–∫–∏: {}", report.security_risks.len());
    
    for risk in &report.security_risks {
        println!("  - {}: {:.2}% ({})", risk.wallet, risk.percentage, risk.token_type);
    }
}

#[test]
fn test_group_coordination_to_take_control() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüë• === –ü–û–ü–´–¢–ö–ê –ì–†–£–ü–ü–´ –ó–ê–•–í–ê–¢–ò–¢–¨ –ö–û–ù–¢–†–û–õ–¨ ===");
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é
    for i in 0..20 {
        bc.process_purchase(
            format!("Customer{}", i),
            "Truck".to_string(),
            25.0,
            vec!["Meal".to_string()],
        );
    }
    
    let initial_owner_percentage = {
        let owner_tokens = bc.token_holders.get(&owner).unwrap().security_tokens;
        let total: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
        (owner_tokens / total) * 100.0
    };
    
    println!("–ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2}%", initial_owner_percentage);
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
    let group_size = 5;
    let mut group_total_tokens = 0.0;
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ú–∞—Å—Å–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏
    println!("\n--- –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ú–∞—Å—Å–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ ---");
    for i in 0..group_size {
        for j in 0..20 { // –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –¥–µ–ª–∞–µ—Ç 20 –ø–æ–∫—É–ø–æ–∫
            let purchase_amount = 30.0;
            bc.process_purchase(
                format!("Group{}_Purchase{}", i, j),
                "Truck".to_string(),
                purchase_amount,
                vec!["Meal".to_string()],
            );
            group_total_tokens += purchase_amount;
        }
    }
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
    println!("--- –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ ---");
    for i in 0..group_size {
        for j in 0..10 { // –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–∑–¥–∞–µ—Ç 10 –∫–æ—à–µ–ª—å–∫–æ–≤
            let mut wallet = TokenHolder::new(format!("group{}_wallet{}", i, j), false);
            wallet.add_security_tokens(50.0); // –ö–∞–∂–¥—ã–π –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã
            bc.token_holders.insert(format!("group{}_wallet{}", i, j), wallet);
        }
    }
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å –±–∞–ª–∞–Ω—Å–∞
    println!("--- –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å—ã ---");
    for i in 0..group_size {
        // –°–æ–∑–¥–∞–µ–º —á–µ–∫–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
        for j in 0..5 {
            let check = bc.process_purchase(
                format!("Group{}_Transfer{}", i, j),
                "Truck".to_string(),
                20.0,
                vec!["Meal".to_string()],
            );
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã
            let phone = format!("+123456789{}{}", i, j);
            let wallet = format!("0xgroup{}_wallet{}", i, j);
            
            if let Ok(verification_code) = bc.register_user_with_phone(phone.clone(), wallet.clone()) {
                if let Ok(_) = bc.verify_phone_number(phone.clone(), verification_code) {
                    // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å
                    match bc.transfer_balance_from_check(check.check_id, phone) {
                        Ok(_) => println!("  ‚úÖ –ü–µ—Ä–µ–Ω–æ—Å —É—Å–ø–µ—à–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {}", i),
                        Err(e) => println!("  ‚ùå –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {}", e),
                    }
                }
            }
        }
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    let final_total: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
    let owner_tokens = bc.token_holders.get(&owner).unwrap().security_tokens;
    let owner_percentage = (owner_tokens / final_total) * 100.0;
    
    // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é –¥–æ–ª—é –≥—Ä—É–ø–ø—ã
    let group_tokens: f64 = bc.token_holders.iter()
        .filter(|(addr, _)| addr.starts_with("group"))
        .map(|(_, holder)| holder.security_tokens)
        .sum();
    let group_percentage = (group_tokens / final_total) * 100.0;
    
    println!("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–û–†–î–ò–ù–ò–†–û–í–ê–ù–ù–û–ô –ê–¢–ê–ö–ò:");
    println!("–¢–æ–∫–µ–Ω—ã –≥—Ä—É–ø–ø—ã: {:.2}", group_tokens);
    println!("–ü—Ä–æ—Ü–µ–Ω—Ç –≥—Ä—É–ø–ø—ã: {:.2}%", group_percentage);
    println!("–¢–æ–∫–µ–Ω—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2}", owner_tokens);
    println!("–ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2}%", owner_percentage);
    
    if group_percentage > owner_percentage {
        println!("üö® –ì–†–£–ü–ü–ê –£–°–ü–ï–®–ù–û –ó–ê–•–í–ê–¢–ò–õ–ê –ö–û–ù–¢–†–û–õ–¨!");
        println!("   –ì—Ä—É–ø–ø–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç {:.2}% —Ç–æ–∫–µ–Ω–æ–≤", group_percentage);
        println!("   –í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ {:.2}% —Ç–æ–∫–µ–Ω–æ–≤", owner_percentage);
    } else if group_percentage > 30.0 {
        println!("‚ö†Ô∏è  –ì–†–£–ü–ü–ê –°–¢–ê–õ–ê –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û–ô –°–ò–õ–û–ô");
        println!("   –ì—Ä—É–ø–ø–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç {:.2}% —Ç–æ–∫–µ–Ω–æ–≤", group_percentage);
        println!("   –≠—Ç–æ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —É–≥—Ä–æ–∑—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏");
    } else {
        println!("‚úÖ –í–ª–∞–¥–µ–ª–µ—Ü —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å");
        println!("   –ì—Ä—É–ø–ø–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ {:.2}% —Ç–æ–∫–µ–Ω–æ–≤", group_percentage);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    let report = bc.check_network_security();
    println!("\nüõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:");
    println!("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {}", if report.is_secure { "‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ" } else { "‚ö†Ô∏è –†–∏—Å–∫–∏" });
    println!("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏—Å–∫–æ–≤: {}", report.security_risks.len());
    
    for risk in &report.security_risks {
        println!("  - {}: {:.2}% ({})", risk.wallet, risk.percentage, risk.token_type);
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–ª–∞—Å—Ç–∏
    let mut power_distribution = HashMap::new();
    for (addr, holder) in &bc.token_holders {
        let percentage = (holder.security_tokens / final_total) * 100.0;
        let category = if addr == &owner {
            "–í–ª–∞–¥–µ–ª–µ—Ü"
        } else if addr.starts_with("group") {
            "–ì—Ä—É–ø–ø–∞"
        } else {
            "–î—Ä—É–≥–∏–µ"
        };
        *power_distribution.entry(category).or_insert(0.0) += percentage;
    }
    
    println!("\nüìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –í–õ–ê–°–¢–ò:");
    for (category, percentage) in power_distribution {
        println!("  {}: {:.2}%", category, percentage);
    }
}
