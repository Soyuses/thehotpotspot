use crate::*;
use std::collections::HashMap;

/// –¢–µ—Å—Ç—ã –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
/// 
/// –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç:
/// 1. API endpoints –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
/// 2. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö API
/// 3. –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ API
/// 4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º

#[test]
fn test_api_get_blockchain_info() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüåê === –¢–ï–°–¢ API: –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ë–õ–û–ö–ß–ï–ô–ù–ï ===");
    
    // –°–æ–∑–¥–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
    let api_server = ApiServer::new(bc);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫—á–µ–π–Ω–µ
    let request = ApiRequest::GetBlockchainInfo;
    let response = api_server.process_request(request);
    
    match response {
        ApiResponse::BlockchainInfo(info) => {
            println!("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫—á–µ–π–Ω–µ:");
            println!("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤: {}", info.chain_length);
            println!("  –í–ª–∞–¥–µ–ª–µ—Ü: {}", info.owner);
            println!("  –°–ª–æ–∂–Ω–æ—Å—Ç—å: {}", info.difficulty);
            println!("  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {}", info.min_stake);
            println!("  –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –±–ª–æ–∫: {}", info.block_reward);
            
            assert!(info.chain_length >= 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã genesis –±–ª–æ–∫");
            assert_eq!(info.owner, owner, "–í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å");
        },
        _ => panic!("–û–∂–∏–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç BlockchainInfo"),
    }
}

#[test]
fn test_api_get_token_holders() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüåê === –¢–ï–°–¢ API: –ü–û–õ–£–ß–ï–ù–ò–ï –î–ï–†–ñ–ê–¢–ï–õ–ï–ô –¢–û–ö–ï–ù–û–í ===");
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π —Ç–æ–∫–µ–Ω–æ–≤
    bc.process_purchase(
        "Customer1".to_string(),
        "Truck1".to_string(),
        100.0,
        vec!["Burger".to_string()],
    );
    
    bc.process_purchase(
        "Customer2".to_string(),
        "Truck1".to_string(),
        50.0,
        vec!["Pizza".to_string()],
    );
    
    let api_server = ApiServer::new(bc);
    let request = ApiRequest::GetTokenHolders;
    let response = api_server.process_request(request);
    
    match response {
        ApiResponse::TokenHolders(holders) => {
            println!("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–µ—Ä–∂–∞—Ç–µ–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤:");
            for (address, holder) in holders {
                println!("  {}: {:.2} security, {:.2} utility", 
                    address, holder.security_tokens, holder.utility_tokens);
            }
            
            assert!(holders.len() >= 3, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 –¥–µ—Ä–∂–∞—Ç–µ–ª—è (–≤–ª–∞–¥–µ–ª–µ—Ü, —Ñ–æ–Ω–¥, –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏)");
            assert!(holders.contains_key(&owner), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–ª–∞–¥–µ–ª–µ—Ü");
            assert!(holders.contains_key("Customer1"), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å Customer1");
            assert!(holders.contains_key("Customer2"), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å Customer2");
        },
        _ => panic!("–û–∂–∏–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç TokenHolders"),
    }
}

#[test]
fn test_api_get_transactions() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüåê === –¢–ï–°–¢ API: –ü–û–õ–£–ß–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===");
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    bc.process_purchase(
        "Customer1".to_string(),
        "Truck1".to_string(),
        100.0,
        vec!["Burger".to_string()],
    );
    
    bc.process_purchase(
        "Customer2".to_string(),
        "Truck2".to_string(),
        75.0,
        vec!["Pizza".to_string()],
    );
    
    let api_server = ApiServer::new(bc);
    let request = ApiRequest::GetTransactions;
    let response = api_server.process_request(request);
    
    match response {
        ApiResponse::Transactions(transactions) => {
            println!("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:");
            for tx in &transactions {
                println!("  {}: {} -> {} ({} —Ç–æ–∫–µ–Ω–æ–≤)", 
                    tx.transaction_id, tx.customer, tx.food_truck, tx.amount);
            }
            
            assert!(transactions.len() >= 2, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
        },
        _ => panic!("–û–∂–∏–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç Transactions"),
    }
}

#[test]
fn test_api_get_checks() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüåê === –¢–ï–°–¢ API: –ü–û–õ–£–ß–ï–ù–ò–ï –ß–ï–ö–û–í ===");
    
    // –°–æ–∑–¥–∞–µ–º —á–µ–∫–∏
    let check1 = bc.process_purchase(
        "Customer1".to_string(),
        "Truck1".to_string(),
        100.0,
        vec!["Burger".to_string()],
    );
    
    let check2 = bc.process_purchase(
        "Customer2".to_string(),
        "Truck2".to_string(),
        50.0,
        vec!["Pizza".to_string()],
    );
    
    let api_server = ApiServer::new(bc);
    let request = ApiRequest::GetChecks;
    let response = api_server.process_request(request);
    
    match response {
        ApiResponse::Checks(checks) => {
            println!("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —á–µ–∫–∏:");
            for check in &checks {
                println!("  {}: {} —Ç–æ–∫–µ–Ω–æ–≤, –∞–∫—Ç–∏–≤–µ–Ω: {}", 
                    check.check_id, check.amount, check.is_active);
            }
            
            assert!(checks.len() >= 2, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —á–µ–∫–∞");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à–∏ —á–µ–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
            let check_ids: Vec<String> = checks.iter().map(|c| c.check_id.clone()).collect();
            assert!(check_ids.contains(&check1.check_id), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å check1");
            assert!(check_ids.contains(&check2.check_id), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å check2");
        },
        _ => panic!("–û–∂–∏–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç Checks"),
    }
}

#[test]
fn test_api_get_network_security() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüåê === –¢–ï–°–¢ API: –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===");
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    bc.process_purchase(
        "Customer1".to_string(),
        "Truck1".to_string(),
        100.0,
        vec!["Burger".to_string()],
    );
    
    let api_server = ApiServer::new(bc);
    let request = ApiRequest::GetNetworkSecurity;
    let response = api_server.process_request(request);
    
    match response {
        ApiResponse::NetworkSecurity(report) => {
            println!("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:");
            println!("  –°–µ—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–∞: {}", report.is_secure);
            println!("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏—Å–∫–æ–≤: {}", report.security_risks.len());
            println!("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ utility —Ä–∏—Å–∫–æ–≤: {}", report.utility_risks.len());
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç—á–µ—Ç–∞
            assert!(report.total_security_tokens > 0.0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å security —Ç–æ–∫–µ–Ω—ã");
            assert!(report.total_utility_tokens > 0.0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å utility —Ç–æ–∫–µ–Ω—ã");
        },
        _ => panic!("–û–∂–∏–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç NetworkSecurity"),
    }
}

#[test]
fn test_api_get_monitoring_alerts() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüåê === –¢–ï–°–¢ API: –ü–û–õ–£–ß–ï–ù–ò–ï –ê–õ–ï–†–¢–û–í –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===");
    
    // –°–æ–∑–¥–∞–µ–º —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∞–ª–µ—Ä—Ç—ã
    bc.process_purchase(
        "Customer1".to_string(),
        "Truck1".to_string(),
        100.0,
        vec!["Burger".to_string()],
    );
    
    let api_server = ApiServer::new(bc);
    let request = ApiRequest::GetMonitoringAlerts { limit: Some(10) };
    let response = api_server.process_request(request);
    
    match response {
        ApiResponse::MonitoringAlerts(alerts) => {
            println!("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∞–ª–µ—Ä—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:");
            for alert in &alerts {
                println!("  {:?}: {} - {}", 
                    alert.alert_type, alert.severity, alert.message);
            }
            
            // –ê–ª–µ—Ä—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∏–ª–∏ –Ω–µ –±—ã—Ç—å, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏
            println!("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–µ—Ä—Ç–æ–≤: {}", alerts.len());
        },
        _ => panic!("–û–∂–∏–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç MonitoringAlerts"),
    }
}

#[test]
fn test_api_error_handling() {
    let owner = "Alice".to_string();
    let bc = Blockchain::new(owner);
    
    println!("\nüåê === –¢–ï–°–¢ API: –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ===");
    
    let api_server = ApiServer::new(bc);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å (—ç—Ç–æ –¥–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)
    let request = ApiRequest::GetBlockchainInfo; // –í–∞–ª–∏–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    let response = api_server.process_request(request);
    
    match response {
        ApiResponse::BlockchainInfo(_) => {
            println!("‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã");
        },
        ApiResponse::Error(msg) => {
            println!("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {}", msg);
            panic!("API –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞");
        },
        _ => {
            println!("‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞");
        }
    }
}

#[test]
fn test_api_franchise_operations() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüåê === –¢–ï–°–¢ API: –û–ü–ï–†–ê–¶–ò–ò –° –§–†–ê–ù–®–ò–ó–ê–ú–ò ===");
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–Ω—à–∏–∑–Ω—É—é –Ω–æ–¥—É
    let franchise_owner = "FranchiseOwner1".to_string();
    let franchise_node = "FranchiseTruck1".to_string();
    bc.add_franchise_node(franchise_node.clone(), franchise_owner.clone());
    
    // –î–µ–ª–∞–µ–º –ø–æ–∫—É–ø–∫—É –Ω–∞ —Ñ—Ä–∞–Ω—à–∏–∑–Ω–æ–π –Ω–æ–¥–µ
    bc.process_purchase(
        "Customer1".to_string(),
        franchise_node.clone(),
        100.0,
        vec!["Burger".to_string()],
    );
    
    let api_server = ApiServer::new(bc);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ä–∂–∞—Ç–µ–ª—è—Ö —Ç–æ–∫–µ–Ω–æ–≤
    let request = ApiRequest::GetTokenHolders;
    let response = api_server.process_request(request);
    
    match response {
        ApiResponse::TokenHolders(holders) => {
            println!("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–µ—Ä–∂–∞—Ç–µ–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ—Å–ª–µ —Ñ—Ä–∞–Ω—à–∏–∑–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:");
            for (address, holder) in holders {
                println!("  {}: {:.2} security, {:.2} utility", 
                    address, holder.security_tokens, holder.utility_tokens);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü —Ñ—Ä–∞–Ω—à–∏–∑—ã –ø–æ–ª—É—á–∏–ª —Ç–æ–∫–µ–Ω—ã
            assert!(holders.contains_key(&franchise_owner), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–ª–∞–¥–µ–ª–µ—Ü —Ñ—Ä–∞–Ω—à–∏–∑—ã");
            
            let franchise_holder = holders.get(&franchise_owner).unwrap();
            assert!(franchise_holder.security_tokens > 0.0, "–í–ª–∞–¥–µ–ª–µ—Ü —Ñ—Ä–∞–Ω—à–∏–∑—ã –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–æ–∫–µ–Ω—ã");
            assert!(franchise_holder.is_franchise_owner, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü —Ñ—Ä–∞–Ω—à–∏–∑—ã");
        },
        _ => panic!("–û–∂–∏–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç TokenHolders"),
    }
}

#[test]
fn test_api_token_emission() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüåê === –¢–ï–°–¢ API: –≠–ú–ò–°–°–ò–Ø –¢–û–ö–ï–ù–û–í ===");
    
    // –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
    bc.process_purchase(
        "Customer1".to_string(),
        "Truck1".to_string(),
        100.0,
        vec!["Burger".to_string()],
    );
    
    let initial_total: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
    println!("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ —ç–º–∏—Å—Å–∏–∏: {:.2}", initial_total);
    
    // –≠–º–∏—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞
    let investor = "WhaleInvestor".to_string();
    let emission_amount = 1000.0;
    
    let result = bc.emit_tokens_for_investors(emission_amount, investor.clone());
    assert!(result.is_ok(), "–≠–º–∏—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π");
    
    let final_total: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
    println!("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ—Å–ª–µ —ç–º–∏—Å—Å–∏–∏: {:.2}", final_total);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API
    let api_server = ApiServer::new(bc);
    let request = ApiRequest::GetTokenHolders;
    let response = api_server.process_request(request);
    
    match response {
        ApiResponse::TokenHolders(holders) => {
            println!("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–µ—Ä–∂–∞—Ç–µ–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ—Å–ª–µ —ç–º–∏—Å—Å–∏–∏:");
            for (address, holder) in holders {
                println!("  {}: {:.2} security, {:.2} utility", 
                    address, holder.security_tokens, holder.utility_tokens);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —Ç–æ–∫–µ–Ω—ã
            assert!(holders.contains_key(&investor), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–≤–µ—Å—Ç–æ—Ä");
            
            let investor_holder = holders.get(&investor).unwrap();
            let expected_investor_tokens = emission_amount * 0.49; // 49% –æ—Ç —ç–º–∏—Å—Å–∏–∏
            assert!((investor_holder.security_tokens - expected_investor_tokens).abs() < 0.01, 
                "–ò–Ω–≤–µ—Å—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å 49% –æ—Ç —ç–º–∏—Å—Å–∏–∏");
        },
        _ => panic!("–û–∂–∏–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç TokenHolders"),
    }
}
