use crate::*;
use std::collections::HashMap;

/// –¢–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
/// 
/// –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç:
/// 1. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ 48%
/// 2. –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥ 3%
/// 3. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Ñ—Ä–∞–Ω—à–∏–∑ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
/// 4. –≠–º–∏—Å—Å–∏—é —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
/// 5. –°–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

#[test]
fn test_new_token_distribution_owner_node() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüéØ === –¢–ï–°–¢ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –¢–û–ö–ï–ù–û–í –ù–ê –ù–û–î–ï –í–õ–ê–î–ï–õ–¨–¶–ê –°–ï–¢–ò ===");
    
    // –î–µ–ª–∞–µ–º –ø–æ–∫—É–ø–∫—É –Ω–∞ 100 —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –Ω–æ–¥–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–µ—Ç–∏
    let _check = bc.process_purchase(
        "Customer1".to_string(),
        "Truck1".to_string(),
        100.0,
        vec!["Burger".to_string()],
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    let owner_tokens = bc.token_holders.get(&owner).unwrap().security_tokens;
    let charity_tokens = bc.token_holders.get(&bc.charity_fund.fund_id).unwrap().security_tokens;
    let customer_tokens = bc.token_holders.get("Customer1").unwrap().security_tokens;
    
    println!("–ü–æ–∫—É–ø–∫–∞ –Ω–∞ 100 —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –Ω–æ–¥–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–µ—Ç–∏:");
    println!("  –í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ç–∏: {:.2} —Ç–æ–∫–µ–Ω–æ–≤ (–æ–∂–∏–¥–∞–µ—Ç—Å—è 48.0)", owner_tokens);
    println!("  –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥: {:.2} —Ç–æ–∫–µ–Ω–æ–≤ (–æ–∂–∏–¥–∞–µ—Ç—Å—è 3.0)", charity_tokens);
    println!("  –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {:.2} —Ç–æ–∫–µ–Ω–æ–≤ (–æ–∂–∏–¥–∞–µ—Ç—Å—è 49.0)", customer_tokens);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    assert!((owner_tokens - 48.0).abs() < 0.01, "–í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ç–∏ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å 48 —Ç–æ–∫–µ–Ω–æ–≤");
    assert!((charity_tokens - 3.0).abs() < 0.01, "–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å 3 —Ç–æ–∫–µ–Ω–∞");
    assert!((customer_tokens - 49.0).abs() < 0.01, "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å 49 —Ç–æ–∫–µ–Ω–æ–≤");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
    let total_tokens: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
    let owner_percentage = (owner_tokens / total_tokens) * 100.0;
    
    println!("  –ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2}% (–ª–∏–º–∏—Ç: 48%)", owner_percentage);
    assert!(owner_percentage <= 48.0, "–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 48%");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥
    let charity_percentage = (charity_tokens / total_tokens) * 100.0;
    println!("  –ü—Ä–æ—Ü–µ–Ω—Ç –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞: {:.2}% (–æ–∂–∏–¥–∞–µ—Ç—Å—è 3%)", charity_percentage);
    assert!((charity_percentage - 3.0).abs() < 0.01, "–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å 3%");
    
    println!("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –Ω–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}

#[test]
fn test_new_token_distribution_franchise_node() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüéØ === –¢–ï–°–¢ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –¢–û–ö–ï–ù–û–í –ù–ê –ù–û–î–ï –§–†–ê–ù–ß–ê–ô–ó–ò ===");
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–Ω—à–∏–∑–Ω—É—é –Ω–æ–¥—É
    let franchise_owner = "FranchiseOwner1".to_string();
    let franchise_node = "FranchiseTruck1".to_string();
    bc.add_franchise_node(franchise_node.clone(), franchise_owner.clone());
    
    // –î–µ–ª–∞–µ–º –ø–æ–∫—É–ø–∫—É –Ω–∞ 100 —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Ñ—Ä–∞–Ω—à–∏–∑–Ω–æ–π –Ω–æ–¥–µ
    let _check = bc.process_purchase(
        "Customer1".to_string(),
        franchise_node.clone(),
        100.0,
        vec!["Burger".to_string()],
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    let main_owner_tokens = bc.token_holders.get(&owner).unwrap().security_tokens;
    let franchise_owner_tokens = bc.token_holders.get(&franchise_owner).unwrap().security_tokens;
    let charity_tokens = bc.token_holders.get(&bc.charity_fund.fund_id).unwrap().security_tokens;
    let customer_tokens = bc.token_holders.get("Customer1").unwrap().security_tokens;
    
    println!("–ü–æ–∫—É–ø–∫–∞ –Ω–∞ 100 —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Ñ—Ä–∞–Ω—à–∏–∑–Ω–æ–π –Ω–æ–¥–µ:");
    println!("  –í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ç–∏: {:.2} —Ç–æ–∫–µ–Ω–æ–≤ (–æ–∂–∏–¥–∞–µ—Ç—Å—è 25.0)", main_owner_tokens);
    println!("  –í–ª–∞–¥–µ–ª–µ—Ü —Ñ—Ä–∞–Ω—à–∏–∑—ã: {:.2} —Ç–æ–∫–µ–Ω–æ–≤ (–æ–∂–∏–¥–∞–µ—Ç—Å—è 24.0)", franchise_owner_tokens);
    println!("  –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥: {:.2} —Ç–æ–∫–µ–Ω–æ–≤ (–æ–∂–∏–¥–∞–µ—Ç—Å—è 3.0)", charity_tokens);
    println!("  –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {:.2} —Ç–æ–∫–µ–Ω–æ–≤ (–æ–∂–∏–¥–∞–µ—Ç—Å—è 48.0)", customer_tokens);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    assert!((main_owner_tokens - 25.0).abs() < 0.01, "–í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ç–∏ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å 25 —Ç–æ–∫–µ–Ω–æ–≤");
    assert!((franchise_owner_tokens - 24.0).abs() < 0.01, "–í–ª–∞–¥–µ–ª–µ—Ü —Ñ—Ä–∞–Ω—à–∏–∑—ã –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å 24 —Ç–æ–∫–µ–Ω–∞");
    assert!((charity_tokens - 3.0).abs() < 0.01, "–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å 3 —Ç–æ–∫–µ–Ω–∞");
    assert!((customer_tokens - 48.0).abs() < 0.01, "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å 48 —Ç–æ–∫–µ–Ω–æ–≤");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ç–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
    let total_tokens: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
    let main_owner_percentage = (main_owner_tokens / total_tokens) * 100.0;
    let franchise_owner_percentage = (franchise_owner_tokens / total_tokens) * 100.0;
    
    println!("  –ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–µ—Ç–∏: {:.2}% (–ª–∏–º–∏—Ç: 48%)", main_owner_percentage);
    println!("  –ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ñ—Ä–∞–Ω—à–∏–∑—ã: {:.2}% (–ª–∏–º–∏—Ç: 24%)", franchise_owner_percentage);
    assert!(main_owner_percentage <= 48.0, "–í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ç–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 48%");
    assert!(franchise_owner_percentage <= 24.0, "–í–ª–∞–¥–µ–ª–µ—Ü —Ñ—Ä–∞–Ω—à–∏–∑—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 24%");
    
    println!("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Ñ—Ä–∞–Ω—à–∏–∑–Ω–æ–π –Ω–æ–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}

#[test]
fn test_owner_cannot_exceed_48_percent() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüö´ === –¢–ï–°–¢: –í–õ–ê–î–ï–õ–ï–¶ –ù–ï –ú–û–ñ–ï–¢ –ü–†–ï–í–´–°–ò–¢–¨ 48% ===");
    
    // –î–µ–ª–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫
    for _i in 0..100 {
        bc.process_purchase(
            format!("Customer{}", _i),
            "Truck1".to_string(),
            10.0,
            vec!["Burger".to_string()],
        );
    }
    
    let owner_tokens = bc.token_holders.get(&owner).unwrap().security_tokens;
    let total_tokens: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
    let owner_percentage = (owner_tokens / total_tokens) * 100.0;
    
    println!("–ü–æ—Å–ª–µ 100 –ø–æ–∫—É–ø–æ–∫ –ø–æ 10 —Ç–æ–∫–µ–Ω–æ–≤:");
    println!("  –¢–æ–∫–µ–Ω—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2}", owner_tokens);
    println!("  –û–±—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {:.2}", total_tokens);
    println!("  –ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2}%", owner_percentage);
    
    // –í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —Ä–æ–≤–Ω–æ 48% –æ—Ç –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏
    assert!((owner_percentage - 48.0).abs() < 0.01, "–í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —Ä–æ–≤–Ω–æ 48%");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
    let alerts = bc.get_monitoring_alerts(Some(10));
    let owner_alerts: Vec<_> = alerts.iter()
        .filter(|alert| matches!(alert.alert_type, AlertType::OwnerExceedsLimit))
        .collect();
    
    println!("  –ê–ª–µ—Ä—Ç–æ–≤ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞: {}", owner_alerts.len());
    assert!(owner_alerts.is_empty(), "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞–ª–µ—Ä—Ç–æ–≤ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞");
}

#[test]
fn test_charity_fund_always_gets_3_percent() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüíù === –¢–ï–°–¢: –ë–õ–ê–ì–û–¢–í–û–†–ò–¢–ï–õ–¨–ù–´–ô –§–û–ù–î –í–°–ï–ì–î–ê –ü–û–õ–£–ß–ê–ï–¢ 3% ===");
    
    let purchase_amounts = vec![50.0, 100.0, 200.0, 500.0, 1000.0];
    let mut total_purchases = 0.0;
    
    for (i, amount) in purchase_amounts.iter().enumerate() {
        bc.process_purchase(
            format!("Customer{}", i),
            "Truck1".to_string(),
            *amount,
            vec!["Burger".to_string()],
        );
        total_purchases += amount;
    }
    
    let charity_tokens = bc.token_holders.get(&bc.charity_fund.fund_id).unwrap().security_tokens;
    let total_tokens: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
    let charity_percentage = (charity_tokens / total_tokens) * 100.0;
    let expected_charity = total_purchases * 0.03;
    
    println!("–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: {:.2}", total_purchases);
    println!("–¢–æ–∫–µ–Ω—ã –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞: {:.2}", charity_tokens);
    println!("–û–∂–∏–¥–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã —Ñ–æ–Ω–¥–∞: {:.2}", expected_charity);
    println!("–ü—Ä–æ—Ü–µ–Ω—Ç —Ñ–æ–Ω–¥–∞: {:.2}%", charity_percentage);
    
    assert!((charity_tokens - expected_charity).abs() < 0.01, "–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å 3% –æ—Ç –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏");
    assert!((charity_percentage - 3.0).abs() < 0.01, "–ü—Ä–æ—Ü–µ–Ω—Ç –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 3%");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ–Ω–¥–µ
    let fund_info = bc.charity_fund.clone();
    println!("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ–Ω–¥–µ:");
    println!("  ID: {}", fund_info.fund_id);
    println!("  –ù–∞–∑–≤–∞–Ω–∏–µ: {}", fund_info.fund_name);
    println!("  –û–±—â–∏–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è: {:.2}", fund_info.total_donations);
    assert!((fund_info.total_donations - expected_charity).abs() < 0.01, "–û–±—â–∏–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–∞–º");
}

#[test]
fn test_franchise_owner_limits() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüè™ === –¢–ï–°–¢: –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –î–õ–Ø –í–õ–ê–î–ï–õ–¨–¶–ï–í –§–†–ê–ù–®–ò–ó ===");
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–Ω—à–∏–∑–Ω—É—é –Ω–æ–¥—É
    let franchise_owner = "FranchiseOwner1".to_string();
    let node_id = "FranchiseNode1".to_string();
    
    bc.add_franchise_node(node_id.clone(), franchise_owner.clone())
        .expect("Should add franchise node successfully");
    
    println!("–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—Ä–∞–Ω—à–∏–∑–Ω–∞—è –Ω–æ–¥–∞: {} -> {}", node_id, franchise_owner);
    
    // –î–µ–ª–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –Ω–∞ —Ñ—Ä–∞–Ω—à–∏–∑–Ω–æ–π –Ω–æ–¥–µ
    for i in 0..50 {
        bc.process_purchase(
            format!("Customer{}", i),
            node_id.clone(),
            20.0,
            vec!["Burger".to_string()],
        );
    }
    
    let franchise_tokens = bc.token_holders.get(&franchise_owner).unwrap().security_tokens;
    let total_tokens: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
    let franchise_percentage = (franchise_tokens / total_tokens) * 100.0;
    
    println!("–ü–æ—Å–ª–µ 50 –ø–æ–∫—É–ø–æ–∫ –ø–æ 20 —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Ñ—Ä–∞–Ω—à–∏–∑–Ω–æ–π –Ω–æ–¥–µ:");
    println!("  –¢–æ–∫–µ–Ω—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ñ—Ä–∞–Ω—à–∏–∑—ã: {:.2} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {:.2})", franchise_tokens, 50.0 * 20.0 * 0.24);
    println!("  –ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ñ—Ä–∞–Ω—à–∏–∑—ã: {:.2}% (–ª–∏–º–∏—Ç: 24%)", franchise_percentage);
    
    // –í–ª–∞–¥–µ–ª–µ—Ü —Ñ—Ä–∞–Ω—à–∏–∑—ã –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å 24% –æ—Ç –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Å–≤–æ–µ–π –Ω–æ–¥–µ
    let expected_franchise_tokens = 50.0 * 20.0 * 0.24; // 50 –ø–æ–∫—É–ø–æ–∫ * 20 —Ç–æ–∫–µ–Ω–æ–≤ * 24%
    assert!((franchise_tokens - expected_franchise_tokens).abs() < 0.01, "–í–ª–∞–¥–µ–ª–µ—Ü —Ñ—Ä–∞–Ω—à–∏–∑—ã –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å 24% –æ—Ç –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Å–≤–æ–µ–π –Ω–æ–¥–µ");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–ª–µ—Ä—Ç—ã –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
    let alerts = bc.get_monitoring_alerts(Some(10));
    let franchise_alerts: Vec<_> = alerts.iter()
        .filter(|alert| matches!(alert.alert_type, AlertType::FranchiseExceedsLimit))
        .collect();
    
    println!("  –ê–ª–µ—Ä—Ç–æ–≤ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Ñ—Ä–∞–Ω—à–∏–∑—ã: {}", franchise_alerts.len());
    
    // –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü —Ñ—Ä–∞–Ω—à–∏–∑—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–ª–µ—Ä—Ç—ã
    if franchise_percentage > 48.0 + 0.01 {
        assert!(!franchise_alerts.is_empty(), "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–ª–µ—Ä—Ç—ã –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Ñ—Ä–∞–Ω—à–∏–∑—ã");
        println!("  ‚ö†Ô∏è –í–ª–∞–¥–µ–ª–µ—Ü —Ñ—Ä–∞–Ω—à–∏–∑—ã –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç 48% - —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –ø—Ä–∏ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ");
    } else {
        assert!(franchise_alerts.is_empty(), "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞–ª–µ—Ä—Ç–æ–≤ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Ñ—Ä–∞–Ω—à–∏–∑—ã");
    }
}

#[test]
fn test_customer_limits() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüë• === –¢–ï–°–¢: –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –î–õ–Ø –ü–û–ö–£–ü–ê–¢–ï–õ–ï–ô ===");
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –º–Ω–æ–≥–æ –ø–æ–∫—É–ø–æ–∫
    let big_customer = "BigCustomer".to_string();
    
    for i in 0..100 {
        bc.process_purchase(
            big_customer.clone(),
            "Truck1".to_string(),
            10.0,
            vec!["Burger".to_string()],
        );
    }
    
    let customer_tokens = bc.token_holders.get(&big_customer).unwrap().security_tokens;
    let total_tokens: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
    let customer_percentage = (customer_tokens / total_tokens) * 100.0;
    
    println!("–ü–æ—Å–ª–µ 100 –ø–æ–∫—É–ø–æ–∫ –ø–æ 10 —Ç–æ–∫–µ–Ω–æ–≤ –æ–¥–Ω–∏–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º:");
    println!("  –¢–æ–∫–µ–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {:.2}", customer_tokens);
    println!("  –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {:.2}% (–ª–∏–º–∏—Ç: 49%)", customer_percentage);
    
    // –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å 49% –æ—Ç –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏
    let expected_customer_tokens = 100.0 * 10.0 * 0.49; // 100 –ø–æ–∫—É–ø–æ–∫ * 10 —Ç–æ–∫–µ–Ω–æ–≤ * 49%
    assert!((customer_tokens - expected_customer_tokens).abs() < 0.01, "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å 49% –æ—Ç –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
    assert!(customer_percentage <= 49.0, "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 49%");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
    let alerts = bc.get_monitoring_alerts(Some(10));
    let customer_alerts: Vec<_> = alerts.iter()
        .filter(|alert| matches!(alert.alert_type, AlertType::CustomerExceedsLimit))
        .collect();
    
    println!("  –ê–ª–µ—Ä—Ç–æ–≤ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {}", customer_alerts.len());
    assert!(customer_alerts.is_empty(), "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞–ª–µ—Ä—Ç–æ–≤ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è");
}

#[test]
fn test_token_emission_for_investors() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüí∞ === –¢–ï–°–¢: –≠–ú–ò–°–°–ò–Ø –¢–û–ö–ï–ù–û–í –î–õ–Ø –ò–ù–í–ï–°–¢–û–†–û–í ===");
    
    // –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
    for i in 0..10 {
        bc.process_purchase(
            format!("Customer{}", i),
            "Truck1".to_string(),
            100.0,
            vec!["Burger".to_string()],
        );
    }
    
    let initial_owner_tokens = bc.token_holders.get(&owner).unwrap().security_tokens;
    let initial_total: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
    
    println!("–î–æ —ç–º–∏—Å—Å–∏–∏:");
    println!("  –¢–æ–∫–µ–Ω—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2}", initial_owner_tokens);
    println!("  –û–±—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {:.2}", initial_total);
    
    // –≠–º–∏—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: 48% –≤–ª–∞–¥–µ–ª–µ—Ü, 3% —Ñ–æ–Ω–¥, 49% –∏–Ω–≤–µ—Å—Ç–æ—Ä)
    let investor = "WhaleInvestor".to_string();
    let emission_amount = 1000.0;
    
    let result = bc.emit_tokens_for_investors(emission_amount, investor.clone());
    assert!(result.is_ok(), "–≠–º–∏—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π");
    
    let final_owner_tokens = bc.token_holders.get(&owner).unwrap().security_tokens;
    let final_investor_tokens = bc.token_holders.get(&investor).unwrap().security_tokens;
    let final_charity_tokens = bc.token_holders.get(&bc.charity_fund.fund_id).unwrap().security_tokens;
    let final_total: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
    
    let final_owner_percentage = (final_owner_tokens / final_total) * 100.0;
    
    println!("–ü–æ—Å–ª–µ —ç–º–∏—Å—Å–∏–∏ {} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞:", emission_amount);
    println!("  –¢–æ–∫–µ–Ω—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2} (–¥–æ–±–∞–≤–ª–µ–Ω–æ: {:.2})", final_owner_tokens, final_owner_tokens - initial_owner_tokens);
    println!("  –¢–æ–∫–µ–Ω—ã –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞: {:.2} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {:.2})", final_investor_tokens, emission_amount * 0.49);
    println!("  –¢–æ–∫–µ–Ω—ã —Ñ–æ–Ω–¥–∞: {:.2} (–¥–æ–±–∞–≤–ª–µ–Ω–æ: {:.2})", final_charity_tokens, emission_amount * 0.03);
    println!("  –û–±—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {:.2}", final_total);
    println!("  –ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2}% (–ª–∏–º–∏—Ç: 48%)", final_owner_percentage);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–º–∏—Å—Å–∏–∏
    let owner_emission = final_owner_tokens - initial_owner_tokens;
    let initial_charity_tokens = bc.charity_fund.total_donations - (emission_amount * 0.03);
    let charity_emission = final_charity_tokens - initial_charity_tokens;
    
    assert!((owner_emission - (emission_amount * 0.48)).abs() < 0.01, "–í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å 48% –æ—Ç —ç–º–∏—Å—Å–∏–∏");
    assert!((final_investor_tokens - (emission_amount * 0.49)).abs() < 0.01, "–ò–Ω–≤–µ—Å—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å 49% –æ—Ç —ç–º–∏—Å—Å–∏–∏");
    assert!((charity_emission - (emission_amount * 0.03)).abs() < 0.01, "–§–æ–Ω–¥ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å 3% –æ—Ç —ç–º–∏—Å—Å–∏–∏");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç
    assert!(final_owner_percentage <= 48.0, "–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 48% –ø–æ—Å–ª–µ —ç–º–∏—Å—Å–∏–∏");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
    let alerts = bc.get_monitoring_alerts(Some(10));
    let owner_alerts: Vec<_> = alerts.iter()
        .filter(|alert| matches!(alert.alert_type, AlertType::OwnerExceedsLimit))
        .collect();
    
    println!("  –ê–ª–µ—Ä—Ç–æ–≤ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞: {}", owner_alerts.len());
    assert!(owner_alerts.is_empty(), "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞–ª–µ—Ä—Ç–æ–≤ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞");
}

#[test]
fn test_monitoring_system() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüìä === –¢–ï–°–¢: –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===");
    
    // –î–µ–ª–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤
    for i in 0..20 {
        bc.process_purchase(
            format!("Customer{}", i),
            "Truck1".to_string(),
            50.0,
            vec!["Burger".to_string()],
        );
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–ª–µ—Ä—Ç—ã
    let alerts = bc.get_monitoring_alerts(Some(50));
    
    println!("–í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: {}", alerts.len());
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã –ø–æ —Ç–∏–ø–∞–º
    let mut alert_counts = HashMap::new();
    for alert in &alerts {
        let count = alert_counts.entry(&alert.alert_type).or_insert(0);
        *count += 1;
    }
    
    println!("–ê–ª–µ—Ä—Ç—ã –ø–æ —Ç–∏–ø–∞–º:");
    for (alert_type, count) in alert_counts {
        println!("  {:?}: {}", alert_type, count);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
    assert!(!alerts.is_empty() || alerts.is_empty(), "–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–ª–µ—Ä—Ç–æ–≤
    for alert in &alerts {
        assert!(!alert.alert_id.is_empty(), "ID –∞–ª–µ—Ä—Ç–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        assert!(!alert.message.is_empty(), "–°–æ–æ–±—â–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        assert!(alert.timestamp > 0, "–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π");
    }
}

#[test]
fn test_load_testing_7_nodes() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüåê === –ù–ê–ì–†–£–ó–û–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ï–¢–ò –ò–ó 7 –ù–û–î ===");
    
    // –°–æ–∑–¥–∞–µ–º 7 –Ω–æ–¥ (1 –æ—Å–Ω–æ–≤–Ω–∞—è + 6 —Ñ—Ä–∞–Ω—à–∏–∑–Ω—ã—Ö)
    let nodes = vec![
        ("MainNode", None), // –û—Å–Ω–æ–≤–Ω–∞—è –Ω–æ–¥–∞
        ("FranchiseNode1", Some("FranchiseOwner1")),
        ("FranchiseNode2", Some("FranchiseOwner2")),
        ("FranchiseNode3", Some("FranchiseOwner3")),
        ("FranchiseNode4", Some("FranchiseOwner4")),
        ("FranchiseNode5", Some("FranchiseOwner5")),
        ("FranchiseNode6", Some("FranchiseOwner6")),
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–Ω—à–∏–∑–Ω—ã–µ –Ω–æ–¥—ã
    for (node_id, franchise_owner) in &nodes {
        if let Some(owner) = franchise_owner {
            bc.add_franchise_node(node_id.to_string(), owner.to_string())
                .expect("Should add franchise node");
        }
    }
    
    println!("–°–æ–∑–¥–∞–Ω–∞ —Å–µ—Ç—å –∏–∑ {} –Ω–æ–¥", nodes.len());
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É - –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –≤—Å–µ—Ö –Ω–æ–¥–∞—Ö
    let purchases_per_node = 100;
    let purchase_amount = 10.0;
    
    for (node_id, _) in &nodes {
        for i in 0..purchases_per_node {
            bc.process_purchase(
                format!("Customer_{}_{}", node_id, i),
                node_id.to_string(),
                purchase_amount,
                vec!["Burger".to_string()],
            );
        }
    }
    
    let total_purchases = nodes.len() * purchases_per_node;
    let total_amount = total_purchases as f64 * purchase_amount;
    
    println!("–í—ã–ø–æ–ª–Ω–µ–Ω–æ {} –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º—É {:.2} —Ç–æ–∫–µ–Ω–æ–≤", total_purchases, total_amount);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    let owner_tokens = bc.token_holders.get(&owner).unwrap().security_tokens;
    let charity_tokens = bc.token_holders.get(&bc.charity_fund.fund_id).unwrap().security_tokens;
    let total_tokens: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
    
    let owner_percentage = (owner_tokens / total_tokens) * 100.0;
    let charity_percentage = (charity_tokens / total_tokens) * 100.0;
    
    println!("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤:");
    println!("  –í–ª–∞–¥–µ–ª–µ—Ü: {:.2} —Ç–æ–∫–µ–Ω–æ–≤ ({:.2}%)", owner_tokens, owner_percentage);
    println!("  –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥: {:.2} —Ç–æ–∫–µ–Ω–æ–≤ ({:.2}%)", charity_tokens, charity_percentage);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 48% (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–∑-–∑–∞ —Ñ—Ä–∞–Ω—à–∏–∑–Ω—ã—Ö –Ω–æ–¥)
    assert!(owner_percentage <= 48.0, "–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 48%");
    assert!(owner_percentage >= 25.0, "–í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å –º–∏–Ω–∏–º—É–º 25% (–æ—Ç —Ñ—Ä–∞–Ω—à–∏–∑–Ω—ã—Ö –Ω–æ–¥)");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥ –ø–æ–ª—É—á–∞–µ—Ç —Ä–æ–≤–Ω–æ 3%
    assert!((charity_percentage - 3.0).abs() < 0.01, "–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —Ä–æ–≤–Ω–æ 3%");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–Ω—à–∏–∑–Ω—ã—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
    let franchise_owners: Vec<_> = bc.token_holders.values()
        .filter(|h| h.is_franchise_owner)
        .collect();
    
    println!("–§—Ä–∞–Ω—à–∏–∑–Ω—ã—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤: {}", franchise_owners.len());
    
    for franchise_holder in &franchise_owners {
        let franchise_percentage = (franchise_holder.security_tokens / total_tokens) * 100.0;
        println!("  {}: {:.2} —Ç–æ–∫–µ–Ω–æ–≤ ({:.2}%)", franchise_holder.address, franchise_holder.security_tokens, franchise_percentage);
        
        // –ö–∞–∂–¥—ã–π —Ñ—Ä–∞–Ω—à–∏–∑–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 48%
        assert!(franchise_percentage <= 48.0, "–§—Ä–∞–Ω—à–∏–∑–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 48%");
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
    let alerts = bc.get_monitoring_alerts(Some(100));
    let critical_alerts: Vec<_> = alerts.iter()
        .filter(|alert| matches!(alert.severity, AlertSeverity::Critical))
        .collect();
    
    println!("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤: {}", critical_alerts.len());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã —Å–≤—è–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–æ–≤
    let owner_exceed_alerts: Vec<_> = critical_alerts.iter()
        .filter(|alert| matches!(alert.alert_type, AlertType::OwnerExceedsLimit))
        .collect();
    
    println!("  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞: {}", owner_exceed_alerts.len());
    
    // –í–ª–∞–¥–µ–ª–µ—Ü –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 28% –∏–∑-–∑–∞ —Ñ—Ä–∞–Ω—à–∏–∑–Ω—ã—Ö –Ω–æ–¥ (25% –æ—Ç —Ñ—Ä–∞–Ω—à–∏–∑–Ω—ã—Ö + 48% –æ—Ç —Å–≤–æ–∏—Ö)
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑—É–º–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
    assert!(owner_percentage >= 25.0, "–í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å –º–∏–Ω–∏–º—É–º 25% (–æ—Ç —Ñ—Ä–∞–Ω—à–∏–∑–Ω—ã—Ö –Ω–æ–¥)");
    assert!(owner_percentage <= 48.0, "–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 48%");
    
    // –ü—Ä–∏ —Ç–∞–∫–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ
    assert!(owner_exceed_alerts.is_empty(), "–ü—Ä–∏ —Ä–∞–∑—É–º–Ω–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞–ª–µ—Ä—Ç–æ–≤ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    let start_time = std::time::Instant::now();
    let report = bc.check_network_security();
    let security_check_time = start_time.elapsed();
    
    println!("–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {:?}", security_check_time);
    println!("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–µ—Ç–∏: {}", if report.is_secure { "‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ" } else { "‚ö†Ô∏è –†–∏—Å–∫–∏" });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ–π
    assert!(security_check_time.as_millis() < 100, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ–π");
}
