use crate::*;

/// –¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
/// 
/// –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç:
/// 1. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
/// 2. –ì–æ–¥–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–æ–ª–µ –≤–ª–∞–¥–µ–Ω–∏—è
/// 3. API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
/// 4. –ü—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤

#[test]
fn test_unclaimed_tokens_tracking() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüìã === –¢–ï–°–¢: –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ù–ï–í–û–°–¢–†–ï–ë–û–í–ê–ù–ù–´–• –¢–û–ö–ï–ù–û–í ===");
    
    // –î–µ–ª–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–µ)
    let _check1 = bc.process_purchase(
        "Customer1".to_string(),
        "Truck1".to_string(),
        100.0,
        vec!["Burger".to_string()],
    );
    
    let _check2 = bc.process_purchase(
        "Customer2".to_string(),
        "Truck1".to_string(),
        200.0,
        vec!["Pizza".to_string()],
    );
    
    // –î–µ–ª–∞–µ–º –ø–æ–∫—É–ø–∫—É —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É (–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–∞—è)
    // –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let phone = "+1234567890".to_string();
    let wallet = "Customer3".to_string();
    bc.register_user_with_phone(phone.clone(), wallet.clone()).expect("Should register user");
    
    // –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º –ø–æ–∫—É–ø–∫—É - –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–æ–π
    let _check3 = bc.process_purchase(
        wallet,
        "Truck1".to_string(),
        150.0,
        vec!["Salad".to_string()],
    );
    
    let unclaimed_tokens = bc.get_unclaimed_tokens(Some(10));
    
    println!("–ù–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {}", unclaimed_tokens.len());
    
    // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞ (check1 –∏ check2)
    assert_eq!(unclaimed_tokens.len(), 2, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—ã
    let total_unclaimed: f64 = unclaimed_tokens.iter().map(|r| r.amount).sum();
    let expected_unclaimed = (100.0 * 0.49) + (200.0 * 0.49); // 49% –æ—Ç –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏
    
    println!("–û–±—â–∞—è —Å—É–º–º–∞ –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {:.2}", total_unclaimed);
    println!("–û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞: {:.2}", expected_unclaimed);
    
    assert!((total_unclaimed - expected_unclaimed).abs() < 0.01, "–°—É–º–º–∞ –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –Ω–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    for record in &unclaimed_tokens {
        assert!(!record.is_distributed, "–¢–æ–∫–µ–Ω—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã");
        assert!(record.distributed_timestamp.is_none(), "–í—Ä–µ–º—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å None");
    }
}

#[test]
fn test_annual_distribution_proportional() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüí∞ === –¢–ï–°–¢: –ì–û–î–û–í–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–†–û–ü–û–†–¶–ò–û–ù–ê–õ–¨–ù–û –î–û–õ–ï –í–õ–ê–î–ï–ù–ò–Ø ===");
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π —Ç–æ–∫–µ–Ω–æ–≤
    bc.process_purchase("Customer1".to_string(), "Truck1".to_string(), 1000.0, vec!["Burger".to_string()]);
    bc.process_purchase("Customer2".to_string(), "Truck1".to_string(), 1000.0, vec!["Pizza".to_string()]);
    bc.process_purchase("Customer3".to_string(), "Truck1".to_string(), 1000.0, vec!["Salad".to_string()]);
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
    let owner_tokens_before = bc.token_holders.get(&owner).unwrap().security_tokens;
    let charity_tokens_before = bc.token_holders.get(&bc.charity_fund.fund_id).unwrap().security_tokens;
    let customer1_tokens_before = bc.token_holders.get("Customer1").unwrap().security_tokens;
    
    println!("–î–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:");
    println!("  –í–ª–∞–¥–µ–ª–µ—Ü: {:.2} —Ç–æ–∫–µ–Ω–æ–≤", owner_tokens_before);
    println!("  –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥: {:.2} —Ç–æ–∫–µ–Ω–æ–≤", charity_tokens_before);
    println!("  Customer1: {:.2} —Ç–æ–∫–µ–Ω–æ–≤", customer1_tokens_before);
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    let unclaimed_tokens = bc.get_unclaimed_tokens(Some(10));
    let total_unclaimed: f64 = unclaimed_tokens.iter().map(|r| r.amount).sum();
    
    println!("–ù–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {:.2}", total_unclaimed);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ –ø—Ä–æ—à–ª–æ–µ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    for record in &mut bc.unclaimed_tokens {
        record.expiry_timestamp = SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs() - 1;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    let _total_security_tokens: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≥–æ–¥–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    let distribution_result = bc.distribute_unclaimed_tokens_annually();
    
    match distribution_result {
        Ok(_distribution) => {
            println!("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
            println!("–ì–æ–¥: {}", _distribution.year);
            println!("–û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {:.2}", _distribution.total_unclaimed_tokens);
            println!("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {}", _distribution.distributions.len());
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            for dist in &_distribution.distributions {
                println!("  {}: {:.2} —Ç–æ–∫–µ–Ω–æ–≤ ({:.2}%)", dist.recipient_address, dist.amount, dist.percentage);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–≤–Ω–∞ –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–∞–º
            let total_distributed: f64 = _distribution.distributions.iter().map(|d| d.amount).sum();
            assert!((total_distributed - _distribution.total_unclaimed_tokens).abs() < 0.01, 
                "–û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–≤–Ω—è—Ç—å—Å—è –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–∞–º");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –±–∞–ª–∞–Ω—Å–∞–º
            let owner_tokens_after = bc.token_holders.get(&owner).unwrap().security_tokens;
            let charity_tokens_after = bc.token_holders.get(&bc.charity_fund.fund_id).unwrap().security_tokens;
            let customer1_tokens_after = bc.token_holders.get("Customer1").unwrap().security_tokens;
            
            println!("–ü–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:");
            println!("  –í–ª–∞–¥–µ–ª–µ—Ü: {:.2} —Ç–æ–∫–µ–Ω–æ–≤ (+{:.2})", owner_tokens_after, owner_tokens_after - owner_tokens_before);
            println!("  –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥: {:.2} —Ç–æ–∫–µ–Ω–æ–≤ (+{:.2})", charity_tokens_after, charity_tokens_after - charity_tokens_before);
            println!("  Customer1: {:.2} —Ç–æ–∫–µ–Ω–æ–≤ (+{:.2})", customer1_tokens_after, customer1_tokens_after - customer1_tokens_before);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã
            assert!(owner_tokens_after > owner_tokens_before, "–í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã");
            assert!(charity_tokens_after > charity_tokens_before, "–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã");
            assert!(customer1_tokens_after > customer1_tokens_before, "Customer1 –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã");
            
        },
        Err(e) => {
            panic!("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏: {}", e);
        }
    }
}

#[test]
fn test_expired_tokens_check() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\n‚è∞ === –¢–ï–°–¢: –ü–†–û–í–ï–†–ö–ê –ò–°–¢–ï–ß–ï–ù–ò–Ø –ù–ï–í–û–°–¢–†–ï–ë–û–í–ê–ù–ù–´–• –¢–û–ö–ï–ù–û–í ===");
    
    // –î–µ–ª–∞–µ–º –ø–æ–∫—É–ø–∫–∏
    bc.process_purchase("Customer1".to_string(), "Truck1".to_string(), 100.0, vec!["Burger".to_string()]);
    bc.process_purchase("Customer2".to_string(), "Truck1".to_string(), 200.0, vec!["Pizza".to_string()]);
    
    let unclaimed_tokens = bc.get_unclaimed_tokens(Some(10));
    println!("–°–æ–∑–¥–∞–Ω–æ –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {}", unclaimed_tokens.len());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Ç–æ–∫–µ–Ω—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–Ω–∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–∏, —Ç–∞–∫ –∫–∞–∫ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω—ã)
    let expired_checks = bc.check_expired_unclaimed_tokens();
    println!("–ò—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤: {}", expired_checks.len());
    
    // –í –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
    assert_eq!(expired_checks.len(), 0, "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ
    for record in &unclaimed_tokens {
        assert!(!record.is_distributed, "–¢–æ–∫–µ–Ω—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã");
        assert!(record.distributed_timestamp.is_none(), "–í—Ä–µ–º—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å None");
    }
}

#[test]
fn test_annual_distributions_history() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüìä === –¢–ï–°–¢: –ò–°–¢–û–†–ò–Ø –ì–û–î–û–í–´–• –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ô ===");
    
    // –î–µ–ª–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    bc.process_purchase("Customer1".to_string(), "Truck1".to_string(), 500.0, vec!["Burger".to_string()]);
    bc.process_purchase("Customer2".to_string(), "Truck1".to_string(), 500.0, vec!["Pizza".to_string()]);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ –ø—Ä–æ—à–ª–æ–µ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    for record in &mut bc.unclaimed_tokens {
        record.expiry_timestamp = SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs() - 1;
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    let distribution_result = bc.distribute_unclaimed_tokens_annually();
    
    match distribution_result {
        Ok(_) => {
            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
            let distributions = bc.get_annual_distributions(Some(10));
            
            println!("–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π: {} –∑–∞–ø–∏—Å–µ–π", distributions.len());
            
            assert_eq!(distributions.len(), 1, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏");
            
            let distribution = &distributions[0];
            println!("–ì–æ–¥: {}", distribution.year);
            println!("–û–±—â–∞—è —Å—É–º–º–∞: {:.2}", distribution.total_unclaimed_tokens);
            println!("–í—Ä–µ–º—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {}", distribution.distribution_timestamp);
            println!("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {}", distribution.distributions.len());
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            assert_eq!(distribution.year, 2024, "–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 2024");
            assert!(distribution.total_unclaimed_tokens > 0.0, "–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π");
            assert!(!distribution.distributions.is_empty(), "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–∏");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ
            let unclaimed_tokens = bc.get_unclaimed_tokens(Some(10));
            for record in &unclaimed_tokens {
                assert!(record.is_distributed, "–í—Å–µ —Ç–æ–∫–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ");
                assert!(record.distributed_timestamp.is_some(), "–í—Ä–µ–º—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
            }
            
        },
        Err(e) => {
            panic!("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏: {}", e);
        }
    }
}

#[test]
fn test_no_unclaimed_tokens_distribution() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüö´ === –¢–ï–°–¢: –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ë–ï–ó –ù–ï–í–û–°–¢–†–ï–ë–û–í–ê–ù–ù–´–• –¢–û–ö–ï–ù–û–í ===");
    
    // –ù–µ —Å–æ–∑–¥–∞–µ–º –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    let distribution_result = bc.distribute_unclaimed_tokens_annually();
    
    match distribution_result {
        Ok(_) => {
            panic!("–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–µ–∑ –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤");
        },
        Err(e) => {
            println!("–û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {}", e);
            assert!(e.contains("–ù–µ—Ç –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"), "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤");
        }
    }
}

#[test]
fn test_distribution_preserves_ownership_limits() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüõ°Ô∏è === –¢–ï–°–¢: –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–û–•–†–ê–ù–Ø–ï–¢ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –í–õ–ê–î–ï–ù–ò–Ø ===");
    
    // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    for i in 0..50 {
        bc.process_purchase(
            format!("Customer{}", i),
            "Truck1".to_string(),
            100.0,
            vec!["Burger".to_string()],
        );
    }
    
    let total_unclaimed: f64 = bc.get_unclaimed_tokens(Some(100)).iter().map(|r| r.amount).sum();
    println!("–û–±—â–∞—è —Å—É–º–º–∞ –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {:.2}", total_unclaimed);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ –ø—Ä–æ—à–ª–æ–µ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    for record in &mut bc.unclaimed_tokens {
        record.expiry_timestamp = SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs() - 1;
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    let distribution_result = bc.distribute_unclaimed_tokens_annually();
    
    match distribution_result {
        Ok(distribution) => {
            println!("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç
            let owner_tokens = bc.token_holders.get(&owner).unwrap().security_tokens;
            let total_tokens: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
            let owner_percentage = (owner_tokens / total_tokens) * 100.0;
            
            println!("–ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {:.2}%", owner_percentage);
            
            // –í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 48%
            assert!(owner_percentage <= 48.0, "–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç 48% –ø–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
            let alerts = bc.get_monitoring_alerts(Some(10));
            let owner_alerts: Vec<_> = alerts.iter()
                .filter(|alert| matches!(alert.alert_type, AlertType::OwnerExceedsLimit))
                .collect();
            
            println!("–ê–ª–µ—Ä—Ç–æ–≤ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞: {}", owner_alerts.len());
            
            // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
            assert!(owner_alerts.is_empty(), "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞–ª–µ—Ä—Ç–æ–≤ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞");
            
        },
        Err(e) => {
            panic!("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏: {}", e);
        }
    }
}
