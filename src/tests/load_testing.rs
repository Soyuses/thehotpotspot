use crate::*;
use std::time::Instant;
use std::collections::HashMap;

/// –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
/// 
/// –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç:
/// 1. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –Ω–∞–≥—Ä—É–∑–∫–∞—Ö
/// 2. –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
/// 3. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
/// 4. –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã

#[test]
fn test_high_volume_purchase_performance() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\n‚ö° === –ù–ê–ì–†–£–ó–û–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –í–´–°–û–ö–ò–ô –û–ë–™–ï–ú –ü–û–ö–£–ü–û–ö ===");
    
    let test_scenarios = vec![
        (100, "–ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"),
        (1000, "–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞"),
        (5000, "–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"),
        (10000, "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"),
    ];
    
    for (num_purchases, scenario_name) in test_scenarios {
        println!("\n--- {}: {} –ø–æ–∫—É–ø–æ–∫ ---", scenario_name, num_purchases);
        
        let start_time = Instant::now();
        let mut bc_test = bc.clone();
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫–∏
        for i in 0..num_purchases {
            let purchase_amount = 10.0 + (i as f64 % 50.0); // –û—Ç 10 –¥–æ 60
            bc_test.process_purchase(
                format!("LoadTest_Customer_{}", i),
                "Truck".to_string(),
                purchase_amount,
                vec!["Meal".to_string()],
            );
        }
        
        let purchase_time = start_time.elapsed();
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        let security_start = Instant::now();
        let report = bc_test.check_network_security();
        let security_time = security_start.elapsed();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        let total_tokens: f64 = bc_test.token_holders.values().map(|h| h.security_tokens).sum();
        let owner_tokens = bc_test.token_holders.get(&owner).unwrap().security_tokens;
        let owner_percentage = (owner_tokens / total_tokens) * 100.0;
        
        println!("  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫: {:?}", purchase_time);
        println!("  –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {:?}", security_time);
        println!("  –ü–æ–∫—É–ø–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É: {:.2}", num_purchases as f64 / purchase_time.as_secs_f64());
        println!("  –¢–æ–∫–µ–Ω—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2}", owner_tokens);
        println!("  –ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2}%", owner_percentage);
        println!("  –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {}", if report.is_secure { "‚úÖ" } else { "‚ö†Ô∏è" });
        println!("  –†–∏—Å–∫–æ–≤: {}", report.security_risks.len());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π
        assert!(bc_test.is_chain_valid());
        assert!(purchase_time.as_secs() < 60); // –ù–µ –±–æ–ª–µ–µ –º–∏–Ω—É—Ç—ã –Ω–∞ —Ç–µ—Å—Ç
    }
}

#[test]
fn test_concurrent_balance_transfers() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüîÑ === –ù–ê–ì–†–£–ó–û–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ï –ü–ï–†–ï–ù–û–°–´ –ë–ê–õ–ê–ù–°–ê ===");
    
    // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
    let num_checks = 100;
    let mut checks = Vec::new();
    
    for i in 0..num_checks {
        let check = bc.process_purchase(
            format!("TransferCustomer{}", i),
            "Truck".to_string(),
            15.0,
            vec!["Meal".to_string()],
        );
        checks.push(check);
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let mut users = Vec::new();
    for i in 0..num_checks {
        let phone = format!("+123456789{}", i);
        let wallet = format!("0xwallet{}", i);
        let verification_code = bc.register_user_with_phone(phone.clone(), wallet.clone())
            .expect("registration should succeed");
        bc.verify_phone_number(phone.clone(), verification_code)
            .expect("verification should succeed");
        users.push((phone, wallet));
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
    let start_time = Instant::now();
    let mut successful_transfers = 0;
    let mut failed_transfers = 0;
    
    for (i, check) in checks.iter().enumerate() {
        let (phone, _) = &users[i];
        match bc.transfer_balance_from_check(check.check_id.clone(), phone.clone()) {
            Ok(_) => successful_transfers += 1,
            Err(_) => failed_transfers += 1,
        }
    }
    
    let transfer_time = start_time.elapsed();
    
    println!("  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤: {:?}", transfer_time);
    println!("  –£—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤: {}", successful_transfers);
    println!("  –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤: {}", failed_transfers);
    println!("  –ü–µ—Ä–µ–Ω–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {:.2}", num_checks as f64 / transfer_time.as_secs_f64());
    println!("  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {:.2}%", (successful_transfers as f64 / num_checks as f64) * 100.0);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    let report = bc.check_network_security();
    println!("  –§–∏–Ω–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {}", if report.is_secure { "‚úÖ" } else { "‚ö†Ô∏è" });
    println!("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏—Å–∫–æ–≤: {}", report.security_risks.len());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π
    assert!(bc.is_chain_valid());
    assert!(transfer_time.as_secs() < 30); // –ù–µ –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥
}

#[test]
fn test_memory_usage_under_load() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüíæ === –ù–ê–ì–†–£–ó–û–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ü–ê–ú–Ø–¢–ò ===");
    
    let test_sizes = vec![100, 500, 1000, 2000];
    
    for size in test_sizes {
        println!("\n--- –¢–µ—Å—Ç —Å {} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ ---", size);
        
        let mut bc_test = bc.clone();
        
        // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π —Ç–æ–∫–µ–Ω–æ–≤
        for i in 0..size {
            let mut holder = TokenHolder::new(format!("holder{}", i), false);
            holder.add_security_tokens(10.0 + (i as f64 % 100.0));
            bc_test.token_holders.insert(format!("holder{}", i), holder);
        }
        
        // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for i in 0..size {
            let phone = format!("+123456789{}", i);
            let wallet = format!("0xwallet{}", i);
            let user = AuthorizedUser::new(phone.clone(), wallet.clone());
            bc_test.authorized_users.insert(phone, user);
        }
        
        // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–µ—Ä–µ–Ω–æ—Å–∞ –±–∞–ª–∞–Ω—Å–∞
        for i in 0..size {
            let record = BalanceTransferRecord {
                transfer_id: format!("TRANSFER_{}", i),
                from_check_id: format!("CHECK_{}", i),
                from_wallet: format!("0xfrom{}", i),
                to_wallet: format!("0xto{}", i),
                to_phone: format!("+123456789{}", i),
                security_tokens_transferred: 10.0,
                utility_tokens_transferred: 1.0,
                timestamp: 1234567890 + i as u64,
                status: TransferStatus::Completed,
            };
            bc_test.balance_transfer_history.push(record);
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π
        let start_time = Instant::now();
        let report = bc_test.check_network_security();
        let security_time = start_time.elapsed();
        
        let history_start = Instant::now();
        let history = bc_test.get_balance_transfer_history(Some(100));
        let history_time = history_start.elapsed();
        
        println!("  –î–µ—Ä–∂–∞—Ç–µ–ª–µ–π —Ç–æ–∫–µ–Ω–æ–≤: {}", bc_test.token_holders.len());
        println!("  –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {}", bc_test.authorized_users.len());
        println!("  –ó–∞–ø–∏—Å–µ–π –ø–µ—Ä–µ–Ω–æ—Å–∞: {}", bc_test.balance_transfer_history.len());
        println!("  –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {:?}", security_time);
        println!("  –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {:?}", history_time);
        println!("  –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {}", if report.is_secure { "‚úÖ" } else { "‚ö†Ô∏è" });
        println!("  –†–∏—Å–∫–æ–≤: {}", report.security_risks.len());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π
        assert!(bc_test.is_chain_valid());
        assert!(security_time.as_millis() < 1000); // –ù–µ –±–æ–ª–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
    }
}

#[test]
fn test_stress_testing_security_checks() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüõ°Ô∏è === –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–í–ï–†–û–ö –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===");
    
    // –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—É—é —Å–µ—Ç—å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ä–∏—Å–∫–∞–º–∏
    let mut bc_stress = bc.clone();
    
    // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ —Ä–∏—Å–∫–∞
    for i in 0..100 {
        let mut holder = TokenHolder::new(format!("risky_holder{}", i), false);
        let tokens = match i % 10 {
            0 => 1000.0, // –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
            1..=3 => 500.0, // –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫
            _ => 50.0, // –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫
        };
        holder.add_security_tokens(tokens);
        bc_stress.token_holders.insert(format!("risky_holder{}", i), holder);
    }
    
    // –°–æ–∑–¥–∞–µ–º "–∫–∏—Ç–æ–≤" —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–∫–µ–Ω–æ–≤
    for i in 0..10 {
        let mut whale = TokenHolder::new(format!("whale{}", i), false);
        whale.add_security_tokens(2000.0 + (i as f64 * 100.0));
        bc_stress.token_holders.insert(format!("whale{}", i), whale);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    let iterations = 1000;
    let start_time = Instant::now();
    
    for _ in 0..iterations {
        let report = bc_stress.check_network_security();
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assert!(report.total_security_tokens > 0.0);
    }
    
    let total_time = start_time.elapsed();
    let avg_time = total_time / iterations;
    
    println!("  –ò—Ç–µ—Ä–∞—Ü–∏–π: {}", iterations);
    println!("  –û–±—â–µ–µ –≤—Ä–µ–º—è: {:?}", total_time);
    println!("  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É: {:?}", avg_time);
    println!("  –ü—Ä–æ–≤–µ—Ä–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É: {:.2}", iterations as f64 / total_time.as_secs_f64());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    let final_report = bc_stress.check_network_security();
    println!("  –§–∏–Ω–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {}", if final_report.is_secure { "‚úÖ" } else { "‚ö†Ô∏è" });
    println!("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏—Å–∫–æ–≤: {}", final_report.security_risks.len());
    println!("  –û–±—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {:.2}", final_report.total_security_tokens);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π
    assert!(bc_stress.is_chain_valid());
    assert!(avg_time.as_millis() < 10); // –ù–µ –±–æ–ª–µ–µ 10–º—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
}

#[test]
fn test_scalability_limits() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüìà === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–î–ï–õ–û–í –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–û–°–¢–ò ===");
    
    let scale_tests = vec![
        (1000, "1K —ç–ª–µ–º–µ–Ω—Ç–æ–≤"),
        (5000, "5K —ç–ª–µ–º–µ–Ω—Ç–æ–≤"),
        (10000, "10K —ç–ª–µ–º–µ–Ω—Ç–æ–≤"),
        (20000, "20K —ç–ª–µ–º–µ–Ω—Ç–æ–≤"),
    ];
    
    for (size, description) in scale_tests {
        println!("\n--- {} ---", description);
        
        let mut bc_scale = bc.clone();
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
        let start_time = Instant::now();
        
        for i in 0..size {
            let mut holder = TokenHolder::new(format!("scale_holder{}", i), false);
            holder.add_security_tokens(10.0 + (i as f64 % 50.0));
            bc_scale.token_holders.insert(format!("scale_holder{}", i), holder);
        }
        
        let creation_time = start_time.elapsed();
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        let ops_start = Instant::now();
        
        // –û–ø–µ—Ä–∞—Ü–∏—è 1: –ü–æ–∏—Å–∫ –¥–µ—Ä–∂–∞—Ç–µ–ª—è
        let search_start = Instant::now();
        let _ = bc_scale.token_holders.get("scale_holder5000");
        let search_time = search_start.elapsed();
        
        // –û–ø–µ—Ä–∞—Ü–∏—è 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        let security_start = Instant::now();
        let report = bc_scale.check_network_security();
        let security_time = security_start.elapsed();
        
        // –û–ø–µ—Ä–∞—Ü–∏—è 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
        let roles_start = Instant::now();
        bc_scale.update_roles();
        let roles_time = roles_start.elapsed();
        
        let ops_time = ops_start.elapsed();
        
        println!("  –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {:?}", creation_time);
        println!("  –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {:?}", search_time);
        println!("  –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {:?}", security_time);
        println!("  –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π: {:?}", roles_time);
        println!("  –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–π: {:?}", ops_time);
        println!("  –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {:.2}", size as f64 / creation_time.as_secs_f64());
        println!("  –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {}", if report.is_secure { "‚úÖ" } else { "‚ö†Ô∏è" });
        println!("  –†–∏—Å–∫–æ–≤: {}", report.security_risks.len());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π
        assert!(bc_scale.is_chain_valid());
        assert!(creation_time.as_secs() < 60); // –ù–µ –±–æ–ª–µ–µ –º–∏–Ω—É—Ç—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ
        assert!(security_time.as_millis() < 5000); // –ù–µ –±–æ–ª–µ–µ 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    }
}

#[test]
fn test_network_growth_simulation() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüå± === –°–ò–ú–£–õ–Ø–¶–ò–Ø –†–û–°–¢–ê –°–ï–¢–ò ===");
    
    let growth_phases = vec![
        (100, "–§–∞–∑–∞ 1: –°—Ç–∞—Ä—Ç–∞–ø (100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"),
        (500, "–§–∞–∑–∞ 2: –†–æ—Å—Ç (500 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"),
        (1000, "–§–∞–∑–∞ 3: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ (1K –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"),
        (5000, "–§–∞–∑–∞ 4: –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ (5K –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"),
        (10000, "–§–∞–∑–∞ 5: –ó—Ä–µ–ª–æ—Å—Ç—å (10K –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"),
    ];
    
    for (target_size, phase_name) in growth_phases {
        println!("\n--- {} ---", phase_name);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        let current_size = bc.token_holders.len();
        let users_to_add = target_size - current_size;
        
        let start_time = Instant::now();
        
        for i in 0..users_to_add {
            let mut holder = TokenHolder::new(format!("growth_user{}", i), false);
            holder.add_security_tokens(10.0 + (i as f64 % 100.0));
            bc.token_holders.insert(format!("growth_user{}", i), holder);
        }
        
        let growth_time = start_time.elapsed();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏
        let total_tokens: f64 = bc.token_holders.values().map(|h| h.security_tokens).sum();
        let owner_tokens = bc.token_holders.get(&owner).unwrap().security_tokens;
        let owner_percentage = (owner_tokens / total_tokens) * 100.0;
        
        let report = bc.check_network_security();
        
        println!("  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {}", bc.token_holders.len());
        println!("  –í—Ä–µ–º—è —Ä–æ—Å—Ç–∞: {:?}", growth_time);
        println!("  –û–±—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {:.2}", total_tokens);
        println!("  –ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞: {:.2}%", owner_percentage);
        println!("  –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {}", if report.is_secure { "‚úÖ" } else { "‚ö†Ô∏è" });
        println!("  –†–∏—Å–∫–æ–≤: {}", report.security_risks.len());
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–ª–∞—Å—Ç–∏
        let mut power_distribution = HashMap::new();
        for holder in bc.token_holders.values() {
            let percentage = (holder.security_tokens / total_tokens) * 100.0;
            let category = match percentage {
                p if p >= 10.0 => "10%+",
                p if p >= 5.0 => "5-10%",
                p if p >= 1.0 => "1-5%",
                _ => "<1%",
            };
            *power_distribution.entry(category).or_insert(0) += 1;
        }
        
        println!("  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–ª–∞—Å—Ç–∏:");
        for (category, count) in power_distribution {
            println!("    {}: {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", category, count);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π
        assert!(bc.is_chain_valid());
        assert!(growth_time.as_secs() < 30); // –ù–µ –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ñ–∞–∑—É
    }
}

#[test]
fn test_extreme_scenarios() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüö® === –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ï –°–¶–ï–ù–ê–†–ò–ò ===");
    
    // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –û–¥–∏–Ω "–∫–∏—Ç" —Å 90% —Ç–æ–∫–µ–Ω–æ–≤
    println!("\n--- –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ö–∏—Ç —Å 90% —Ç–æ–∫–µ–Ω–æ–≤ ---");
    let mut whale = TokenHolder::new("mega_whale".to_string(), false);
    whale.add_security_tokens(9000.0);
    bc.token_holders.insert("mega_whale".to_string(), whale);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–ª–∫–∏—Ö –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π
    for i in 0..1000 {
        let mut holder = TokenHolder::new(format!("small_holder{}", i), false);
        holder.add_security_tokens(1.0);
        bc.token_holders.insert(format!("small_holder{}", i), holder);
    }
    
    let report1 = bc.check_network_security();
    println!("  –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {}", if report1.is_secure { "‚úÖ" } else { "üö® –û–ü–ê–°–ù–û" });
    println!("  –†–∏—Å–∫–æ–≤: {}", report1.security_risks.len());
    
    // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    println!("\n--- –°—Ü–µ–Ω–∞—Ä–∏–π 2: –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ---");
    let mut bc_even = Blockchain::new(owner.clone());
    
    for i in 0..1000 {
        let mut holder = TokenHolder::new(format!("even_holder{}", i), false);
        holder.add_security_tokens(10.0);
        bc_even.token_holders.insert(format!("even_holder{}", i), holder);
    }
    
    let report2 = bc_even.check_network_security();
    println!("  –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {}", if report2.is_secure { "‚úÖ" } else { "‚ö†Ô∏è" });
    println!("  –†–∏—Å–∫–æ–≤: {}", report2.security_risks.len());
    
    // –°—Ü–µ–Ω–∞—Ä–∏–π 3: –î–≤–∞ –∫—Ä—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
    println!("\n--- –°—Ü–µ–Ω–∞—Ä–∏–π 3: –î–≤–∞ –∫—Ä—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ ---");
    let mut bc_duopoly = Blockchain::new(owner.clone());
    
    let mut player1 = TokenHolder::new("player1".to_string(), false);
    player1.add_security_tokens(4000.0);
    bc_duopoly.token_holders.insert("player1".to_string(), player1);
    
    let mut player2 = TokenHolder::new("player2".to_string(), false);
    player2.add_security_tokens(4000.0);
    bc_duopoly.token_holders.insert("player2".to_string(), player2);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–ª–∫–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    for i in 0..100 {
        let mut holder = TokenHolder::new(format!("small_player{}", i), false);
        holder.add_security_tokens(20.0);
        bc_duopoly.token_holders.insert(format!("small_player{}", i), holder);
    }
    
    let report3 = bc_duopoly.check_network_security();
    println!("  –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {}", if report3.is_secure { "‚úÖ" } else { "‚ö†Ô∏è" });
    println!("  –†–∏—Å–∫–æ–≤: {}", report3.security_risks.len());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –æ—Å—Ç–∞—é—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏
    assert!(bc.is_chain_valid());
    assert!(bc_even.is_chain_valid());
    assert!(bc_duopoly.is_chain_valid());
}
