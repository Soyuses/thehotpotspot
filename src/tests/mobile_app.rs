use crate::*;
use std::collections::HashMap;

/// –¢–µ—Å—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
/// 
/// –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç:
/// 1. API endpoints, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–æ–±–∏–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
/// 2. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
/// 3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—ã–π API
/// 4. –û–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

#[test]
fn test_mobile_customer_wallet_api() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüì± === –¢–ï–°–¢ –ú–û–ë–ò–õ–¨–ù–û–ì–û API: –ö–û–®–ï–õ–ï–ö –ö–õ–ò–ï–ù–¢–ê ===");
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–∫—É–ø–∫–∞–º–∏
    let customer = "MobileCustomer1".to_string();
    bc.process_purchase(
        customer.clone(),
        "Truck1".to_string(),
        100.0,
        vec!["Burger".to_string()],
    );
    
    bc.process_purchase(
        customer.clone(),
        "Truck2".to_string(),
        50.0,
        vec!["Pizza".to_string()],
    );
    
    let api_server = ApiServer::new(bc);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞
    let request = ApiRequest::GetTokenHolders;
    let response = api_server.process_request(request);
    
    match response {
        ApiResponse::TokenHolders(holders) => {
            println!("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞:");
            
            if let Some(customer_holder) = holders.get(&customer) {
                println!("  –ö–ª–∏–µ–Ω—Ç: {}", customer);
                println!("  Security —Ç–æ–∫–µ–Ω—ã: {:.2}", customer_holder.security_tokens);
                println!("  Utility —Ç–æ–∫–µ–Ω—ã: {:.2}", customer_holder.utility_tokens);
                println!("  –†–æ–ª—å: {:?}", customer_holder.role);
                println!("  –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {}", customer_holder.is_authorized);
                
                assert!(customer_holder.security_tokens > 0.0, "–ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å security —Ç–æ–∫–µ–Ω—ã");
                assert!(customer_holder.utility_tokens > 0.0, "–ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å utility —Ç–æ–∫–µ–Ω—ã");
                assert_eq!(customer_holder.role, UserRole::Starter, "–ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–æ–ª—å Starter");
            } else {
                panic!("–ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω –≤ –¥–µ—Ä–∂–∞—Ç–µ–ª—è—Ö —Ç–æ–∫–µ–Ω–æ–≤");
            }
        },
        _ => panic!("–û–∂–∏–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç TokenHolders"),
    }
}

#[test]
fn test_mobile_check_activation() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüì± === –¢–ï–°–¢ –ú–û–ë–ò–õ–¨–ù–û–ì–û API: –ê–ö–¢–ò–í–ê–¶–ò–Ø –ß–ï–ö–ê ===");
    
    // –°–æ–∑–¥–∞–µ–º —á–µ–∫
    let check = bc.process_purchase(
        "MobileCustomer1".to_string(),
        "Truck1".to_string(),
        100.0,
        vec!["Burger".to_string()],
    );
    
    println!("–°–æ–∑–¥–∞–Ω —á–µ–∫: {}", check.check_id);
    println!("–°—É–º–º–∞ —á–µ–∫–∞: {:.2}", check.amount);
    println!("–ê–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥: {}", check.activation_code);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é —á–µ–∫–∞
    let personal_data = PersonalData {
        name: "John Doe".to_string(),
        email: "john@example.com".to_string(),
        phone: "+1234567890".to_string(),
    };
    
    let result = bc.activate_account(&check.check_id, &check.activation_code, personal_data.clone());
    
    match result {
        Ok(()) => {
            println!("‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
            let api_server = ApiServer::new(bc);
            let request = ApiRequest::GetChecks;
            let response = api_server.process_request(request);
            
            match response {
                ApiResponse::Checks(checks) => {
                    if let Some(activated_check) = checks.iter().find(|c| c.check_id == check.check_id) {
                        println!("  –ß–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {}", activated_check.is_active);
                        assert!(activated_check.is_active, "–ß–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
                    } else {
                        panic!("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω");
                    }
                },
                _ => panic!("–û–∂–∏–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç Checks"),
            }
        },
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞: {}", e);
            panic!("–ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π");
        }
    }
}

#[test]
fn test_mobile_transaction_history() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüì± === –¢–ï–°–¢ –ú–û–ë–ò–õ–¨–ù–û–ì–û API: –ò–°–¢–û–†–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===");
    
    let customer = "MobileCustomer1".to_string();
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    let check1 = bc.process_purchase(
        customer.clone(),
        "Truck1".to_string(),
        100.0,
        vec!["Burger".to_string()],
    );
    
    let check2 = bc.process_purchase(
        customer.clone(),
        "Truck2".to_string(),
        75.0,
        vec!["Pizza".to_string()],
    );
    
    let check3 = bc.process_purchase(
        customer.clone(),
        "Truck1".to_string(),
        50.0,
        vec!["Salad".to_string()],
    );
    
    let api_server = ApiServer::new(bc);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    let request = ApiRequest::GetTransactions;
    let response = api_server.process_request(request);
    
    match response {
        ApiResponse::Transactions(transactions) => {
            println!("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:");
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
            let customer_transactions: Vec<_> = transactions.iter()
                .filter(|tx| tx.customer == customer)
                .collect();
            
            println!("  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–ª–∏–µ–Ω—Ç–∞: {}", customer_transactions.len());
            
            for tx in &customer_transactions {
                println!("    {}: {} -> {} ({} —Ç–æ–∫–µ–Ω–æ–≤)", 
                    tx.transaction_id, tx.customer, tx.food_truck, tx.amount);
                println!("      –¢–æ–≤–∞—Ä—ã: {:?}", tx.food_items);
            }
            
            assert!(customer_transactions.len() >= 3, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
            let transaction_ids: Vec<String> = customer_transactions.iter()
                .map(|tx| tx.transaction_id.clone())
                .collect();
            
            // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —á–µ–∫–∞–º
            let check_transactions: Vec<_> = transactions.iter()
                .filter(|tx| tx.check.as_ref().map_or(false, |c| 
                    c.check_id == check1.check_id || 
                    c.check_id == check2.check_id || 
                    c.check_id == check3.check_id))
                .collect();
            
            assert!(check_transactions.len() >= 3, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —á–µ–∫–∞–º");
        },
        _ => panic!("–û–∂–∏–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç Transactions"),
    }
}

#[test]
fn test_mobile_owner_dashboard() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüì± === –¢–ï–°–¢ –ú–û–ë–ò–õ–¨–ù–û–ì–û API: –î–ê–®–ë–û–†–î –í–õ–ê–î–ï–õ–¨–¶–ê ===");
    
    // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–µ—Ç–∏
    bc.process_purchase(
        "Customer1".to_string(),
        "Truck1".to_string(),
        100.0,
        vec!["Burger".to_string()],
    );
    
    bc.process_purchase(
        "Customer2".to_string(),
        "Truck2".to_string(),
        75.0,
        vec!["Pizza".to_string()],
    );
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–Ω—à–∏–∑–Ω—É—é –Ω–æ–¥—É
    let franchise_owner = "FranchiseOwner1".to_string();
    let franchise_node = "FranchiseTruck1".to_string();
    bc.add_franchise_node(franchise_node.clone(), franchise_owner.clone());
    
    bc.process_purchase(
        "Customer3".to_string(),
        franchise_node.clone(),
        50.0,
        vec!["Salad".to_string()],
    );
    
    let api_server = ApiServer::new(bc);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    let request = ApiRequest::GetTokenHolders;
    let response = api_server.process_request(request);
    
    match response {
        ApiResponse::TokenHolders(holders) => {
            println!("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞:");
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
            let owner_holder = holders.get(&owner).unwrap();
            let total_tokens: f64 = holders.values().map(|h| h.security_tokens).sum();
            let owner_percentage = (owner_holder.security_tokens / total_tokens) * 100.0;
            
            println!("  –í–ª–∞–¥–µ–ª–µ—Ü: {}", owner);
            println!("  Security —Ç–æ–∫–µ–Ω—ã: {:.2}", owner_holder.security_tokens);
            println!("  Utility —Ç–æ–∫–µ–Ω—ã: {:.2}", owner_holder.utility_tokens);
            println!("  –ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è: {:.2}%", owner_percentage);
            println!("  –†–æ–ª—å: {:?}", owner_holder.role);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–Ω—à–∏–∑–Ω—ã–µ –Ω–æ–¥—ã
            let franchise_holders: Vec<_> = holders.values()
                .filter(|h| h.is_franchise_owner)
                .collect();
            
            println!("  –í–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Ñ—Ä–∞–Ω—à–∏–∑: {}", franchise_holders.len());
            for holder in &franchise_holders {
                println!("    –§—Ä–∞–Ω—à–∏–∑–∞: {:.2} security —Ç–æ–∫–µ–Ω–æ–≤", holder.security_tokens);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥
            let charity_holder = holders.get(&api_server.blockchain.charity_fund.fund_id).unwrap();
            println!("  –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥: {:.2} —Ç–æ–∫–µ–Ω–æ–≤", charity_holder.security_tokens);
            
            assert!(owner_holder.security_tokens > 0.0, "–í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–æ–∫–µ–Ω—ã");
            assert!(owner_percentage <= 48.0, "–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 48%");
            assert!(!franchise_holders.is_empty(), "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü—ã —Ñ—Ä–∞–Ω—à–∏–∑");
            assert!(charity_holder.security_tokens > 0.0, "–§–æ–Ω–¥ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–æ–∫–µ–Ω—ã");
        },
        _ => panic!("–û–∂–∏–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç TokenHolders"),
    }
}

#[test]
fn test_mobile_franchise_dashboard() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüì± === –¢–ï–°–¢ –ú–û–ë–ò–õ–¨–ù–û–ì–û API: –î–ê–®–ë–û–†–î –§–†–ê–ù–ß–ê–ô–ó–ò ===");
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–Ω—à–∏–∑–Ω—É—é –Ω–æ–¥—É
    let franchise_owner = "FranchiseOwner1".to_string();
    let franchise_node = "FranchiseTruck1".to_string();
    bc.add_franchise_node(franchise_node.clone(), franchise_owner.clone());
    
    // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Ñ—Ä–∞–Ω—à–∏–∑–Ω–æ–π –Ω–æ–¥–µ
    bc.process_purchase(
        "Customer1".to_string(),
        franchise_node.clone(),
        100.0,
        vec!["Burger".to_string()],
    );
    
    bc.process_purchase(
        "Customer2".to_string(),
        franchise_node.clone(),
        75.0,
        vec!["Pizza".to_string()],
    );
    
    let api_server = ApiServer::new(bc);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ —Ñ—Ä–∞–Ω—á–∞–π–∑–∏
    let request = ApiRequest::GetTokenHolders;
    let response = api_server.process_request(request);
    
    match response {
        ApiResponse::TokenHolders(holders) => {
            println!("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ —Ñ—Ä–∞–Ω—á–∞–π–∑–∏:");
            
            if let Some(franchise_holder) = holders.get(&franchise_owner) {
                let total_tokens: f64 = holders.values().map(|h| h.security_tokens).sum();
                let franchise_percentage = (franchise_holder.security_tokens / total_tokens) * 100.0;
                
                println!("  –í–ª–∞–¥–µ–ª–µ—Ü —Ñ—Ä–∞–Ω—à–∏–∑—ã: {}", franchise_owner);
                println!("  Security —Ç–æ–∫–µ–Ω—ã: {:.2}", franchise_holder.security_tokens);
                println!("  Utility —Ç–æ–∫–µ–Ω—ã: {:.2}", franchise_holder.utility_tokens);
                println!("  –ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è: {:.2}%", franchise_percentage);
                println!("  –†–æ–ª—å: {:?}", franchise_holder.role);
                println!("  –§—Ä–∞–Ω—à–∏–∑–Ω—ã–µ –Ω–æ–¥—ã: {:?}", franchise_holder.franchise_nodes);
                
                assert!(franchise_holder.security_tokens > 0.0, "–í–ª–∞–¥–µ–ª–µ—Ü —Ñ—Ä–∞–Ω—à–∏–∑—ã –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–æ–∫–µ–Ω—ã");
                assert!(franchise_holder.is_franchise_owner, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü —Ñ—Ä–∞–Ω—à–∏–∑—ã");
                assert!(franchise_holder.franchise_nodes.contains(&franchise_node), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ—Ä–∞–Ω—à–∏–∑–Ω–∞—è –Ω–æ–¥–∞");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü —Ñ—Ä–∞–Ω—à–∏–∑—ã –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–æ–ª—é
                let expected_tokens = (100.0 + 75.0) * 0.24; // 24% –æ—Ç –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Ñ—Ä–∞–Ω—à–∏–∑–Ω–æ–π –Ω–æ–¥–µ
                assert!((franchise_holder.security_tokens - expected_tokens).abs() < 0.01, 
                    "–í–ª–∞–¥–µ–ª–µ—Ü —Ñ—Ä–∞–Ω—à–∏–∑—ã –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å 24% –æ—Ç –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Å–≤–æ–µ–π –Ω–æ–¥–µ");
            } else {
                panic!("–í–ª–∞–¥–µ–ª–µ—Ü —Ñ—Ä–∞–Ω—à–∏–∑—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω");
            }
        },
        _ => panic!("–û–∂–∏–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç TokenHolders"),
    }
}

#[test]
fn test_mobile_security_monitoring() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüì± === –¢–ï–°–¢ –ú–û–ë–ò–õ–¨–ù–û–ì–û API: –ú–û–ù–ò–¢–û–†–ò–ù–ì –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===");
    
    // –°–æ–∑–¥–∞–µ–º —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    bc.process_purchase(
        "Customer1".to_string(),
        "Truck1".to_string(),
        100.0,
        vec!["Burger".to_string()],
    );
    
    let api_server = ApiServer::new(bc);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    let request = ApiRequest::GetNetworkSecurity;
    let response = api_server.process_request(request);
    
    match response {
        ApiResponse::NetworkSecurity(report) => {
            println!("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:");
            println!("  –°–µ—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–∞: {}", report.is_secure);
            println!("  –û–±—â–∏–µ security —Ç–æ–∫–µ–Ω—ã: {:.2}", report.total_security_tokens);
            println!("  –û–±—â–∏–µ utility —Ç–æ–∫–µ–Ω—ã: {:.2}", report.total_utility_tokens);
            println!("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏—Å–∫–æ–≤: {}", report.security_risks.len());
            println!("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ utility —Ä–∏—Å–∫–æ–≤: {}", report.utility_risks.len());
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç—á–µ—Ç–∞
            assert!(report.total_security_tokens > 0.0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å security —Ç–æ–∫–µ–Ω—ã");
            assert!(report.total_utility_tokens > 0.0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å utility —Ç–æ–∫–µ–Ω—ã");
        },
        _ => panic!("–û–∂–∏–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç NetworkSecurity"),
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–ª–µ—Ä—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    let request = ApiRequest::GetMonitoringAlerts { limit: Some(10) };
    let response = api_server.process_request(request);
    
    match response {
        ApiResponse::MonitoringAlerts(alerts) => {
            println!("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∞–ª–µ—Ä—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:");
            for alert in &alerts {
                println!("  {:?}: {} - {}", 
                    alert.alert_type, alert.severity, alert.message);
            }
            println!("  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–µ—Ä—Ç–æ–≤: {}", alerts.len());
        },
        _ => panic!("–û–∂–∏–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç MonitoringAlerts"),
    }
}

#[test]
fn test_mobile_data_consistency() {
    let owner = "Alice".to_string();
    let mut bc = Blockchain::new(owner.clone());
    
    println!("\nüì± === –¢–ï–°–¢ –ú–û–ë–ò–õ–¨–ù–û–ì–û API: –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–¨ –î–ê–ù–ù–´–• ===");
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é
    let customer = "MobileCustomer1".to_string();
    let check = bc.process_purchase(
        customer.clone(),
        "Truck1".to_string(),
        100.0,
        vec!["Burger".to_string()],
    );
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–µ–∫
    let personal_data = PersonalData {
        name: "John Doe".to_string(),
        email: "john@example.com".to_string(),
        phone: "+1234567890".to_string(),
    };
    
    bc.activate_account(&check.check_id, &check.activation_code, personal_data).unwrap();
    
    let api_server = ApiServer::new(bc);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ API endpoints
    let holders_request = ApiRequest::GetTokenHolders;
    let holders_response = api_server.process_request(holders_request);
    
    let checks_request = ApiRequest::GetChecks;
    let checks_response = api_server.process_request(checks_request);
    
    let transactions_request = ApiRequest::GetTransactions;
    let transactions_response = api_server.process_request(transactions_request);
    
    match (holders_response, checks_response, transactions_response) {
        (ApiResponse::TokenHolders(holders), ApiResponse::Checks(checks), ApiResponse::Transactions(transactions)) => {
            println!("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –µ—Å—Ç—å –≤ –¥–µ—Ä–∂–∞—Ç–µ–ª—è—Ö —Ç–æ–∫–µ–Ω–æ–≤
            assert!(holders.contains_key(&customer), "–ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–µ—Ä–∂–∞—Ç–µ–ª—è—Ö —Ç–æ–∫–µ–Ω–æ–≤");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
            let activated_check = checks.iter().find(|c| c.check_id == check.check_id).unwrap();
            assert!(activated_check.is_active, "–ß–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            let customer_transaction = transactions.iter().find(|t| t.customer == customer).unwrap();
            assert_eq!(customer_transaction.amount, 100.0, "–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
            let customer_holder = holders.get(&customer).unwrap();
            let expected_tokens = 100.0 * 0.49; // 49% –æ—Ç –ø–æ–∫—É–ø–∫–∏
            assert!((customer_holder.security_tokens - expected_tokens).abs() < 0.01, 
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫–µ");
            
            println!("  ‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã –º–µ–∂–¥—É API endpoints");
        },
        _ => panic!("–û–∂–∏–¥–∞–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç –≤—Å–µ—Ö API endpoints"),
    }
}
