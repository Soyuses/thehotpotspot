//! –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è ARM –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–µ—Ç–∏
//! 
//! –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –≤ ARM –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–µ—Ç–∏
//! —Å —Ü–µ–ª—å—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 0.001% –æ—à–∏–±–æ–∫ –∏ 100% –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏.

use std::collections::HashMap;
use std::sync::Arc;
use tokio::sync::{RwLock, mpsc};
use serde::{Serialize, Deserialize};
use std::time::{SystemTime, UNIX_EPOCH};
use crate::observability::AlertSeverity;

/// –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum ErrorNotificationType {
    /// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (—Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞)
    Critical,
    /// –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞)
    High,
    /// –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è)
    Medium,
    /// –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    Low,
    /// –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 100% –ø–æ–∫—Ä—ã—Ç–∏—è)
    TestCoverage,
    /// –û—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ 0.001% –æ—à–∏–±–æ–∫)
    Performance,
}

/// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ErrorNotification {
    pub id: String,
    pub notification_type: ErrorNotificationType,
    pub severity: AlertSeverity,
    pub title: String,
    pub message: String,
    pub component: String,
    pub timestamp: u64,
    pub metadata: HashMap<String, String>,
    pub stack_trace: Option<String>,
    pub user_impact: String,
    pub suggested_action: String,
}

/// –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum NotificationChannel {
    /// Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    Email(String),
    /// SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    SMS(String),
    /// Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    Push(String),
    /// Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    Webhook(String),
    /// Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    Telegram(String),
    /// Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    Slack(String),
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
#[derive(Debug, Clone)]
pub struct NotificationConfig {
    pub owner_arm_id: String,
    pub channels: Vec<NotificationChannel>,
    pub critical_threshold: f64, // 0.001% = 0.00001
    pub test_coverage_threshold: f64, // 100% = 1.0
    pub notification_cooldown: u64, // —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    pub max_notifications_per_hour: u32,
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ErrorStatistics {
    pub total_requests: u64,
    pub total_errors: u64,
    pub error_rate: f64,
    pub test_coverage: f64,
    pub last_notification_time: u64,
    pub notifications_sent_this_hour: u32,
    pub error_breakdown: HashMap<String, u64>,
}

/// –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
pub struct ErrorNotificationSystem {
    config: NotificationConfig,
    statistics: Arc<RwLock<ErrorStatistics>>,
    notification_sender: mpsc::UnboundedSender<ErrorNotification>,
    notification_receiver: Arc<RwLock<mpsc::UnboundedReceiver<ErrorNotification>>>,
    sent_notifications: Arc<RwLock<HashMap<String, u64>>>, // notification_id -> timestamp
}

impl ErrorNotificationSystem {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    pub fn new(config: NotificationConfig) -> Self {
        let (sender, receiver) = mpsc::unbounded_channel();
        
        Self {
            config,
            statistics: Arc::new(RwLock::new(ErrorStatistics {
                total_requests: 0,
                total_errors: 0,
                error_rate: 0.0,
                test_coverage: 0.0,
                last_notification_time: 0,
                notifications_sent_this_hour: 0,
                error_breakdown: HashMap::new(),
            })),
            notification_sender: sender,
            notification_receiver: Arc::new(RwLock::new(receiver)),
            sent_notifications: Arc::new(RwLock::new(HashMap::new())),
        }
    }

    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    pub async fn start(&self) -> Result<(), String> {
        let receiver = Arc::clone(&self.notification_receiver);
        let config = self.config.clone();
        let statistics = Arc::clone(&self.statistics);
        let sent_notifications = Arc::clone(&self.sent_notifications);

        tokio::spawn(async move {
            let mut receiver = receiver.write().await;
            while let Some(notification) = receiver.recv().await {
                Self::process_notification(
                    notification,
                    &config,
                    &statistics,
                    &sent_notifications,
                ).await;
            }
        });

        Ok(())
    }

    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    async fn process_notification(
        notification: ErrorNotification,
        config: &NotificationConfig,
        statistics: &Arc<RwLock<ErrorStatistics>>,
        sent_notifications: &Arc<RwLock<HashMap<String, u64>>>,
    ) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        let sent = sent_notifications.read().await;
        if let Some(last_sent) = sent.get(&notification.id) {
            let current_time = SystemTime::now()
                .duration_since(UNIX_EPOCH)
                .unwrap()
                .as_secs();
            
            if current_time - last_sent < config.notification_cooldown {
                return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑-–∑–∞ cooldown
            }
        }
        drop(sent);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —á–∞—Å
        let stats = statistics.read().await;
        if stats.notifications_sent_this_hour >= config.max_notifications_per_hour {
            return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞
        }
        drop(stats);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        Self::send_notification(&notification, config).await;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        let mut sent = sent_notifications.write().await;
        sent.insert(notification.id.clone(), SystemTime::now()
            .duration_since(UNIX_EPOCH)
            .unwrap()
            .as_secs());

        let mut stats = statistics.write().await;
        stats.last_notification_time = SystemTime::now()
            .duration_since(UNIX_EPOCH)
            .unwrap()
            .as_secs();
        stats.notifications_sent_this_hour += 1;
    }

    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    async fn send_notification(
        notification: &ErrorNotification,
        config: &NotificationConfig,
    ) {
        for channel in &config.channels {
            match channel {
                NotificationChannel::Email(email) => {
                    Self::send_email_notification(notification, email).await;
                },
                NotificationChannel::SMS(phone) => {
                    Self::send_sms_notification(notification, phone).await;
                },
                NotificationChannel::Push(device_id) => {
                    Self::send_push_notification(notification, device_id).await;
                },
                NotificationChannel::Webhook(url) => {
                    Self::send_webhook_notification(notification, url).await;
                },
                NotificationChannel::Telegram(chat_id) => {
                    Self::send_telegram_notification(notification, chat_id).await;
                },
                NotificationChannel::Slack(webhook_url) => {
                    Self::send_slack_notification(notification, webhook_url).await;
                },
            }
        }
    }

    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    async fn send_email_notification(notification: &ErrorNotification, email: &str) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å email —Å–µ—Ä–≤–∏—Å–æ–º
        println!("üìß EMAIL NOTIFICATION to {}: {} - {}", 
                 email, notification.title, notification.message);
    }

    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    async fn send_sms_notification(notification: &ErrorNotification, phone: &str) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS —Å–µ—Ä–≤–∏—Å–æ–º
        println!("üì± SMS NOTIFICATION to {}: {} - {}", 
                 phone, notification.title, notification.message);
    }

    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    async fn send_push_notification(notification: &ErrorNotification, device_id: &str) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å push —Å–µ—Ä–≤–∏—Å–æ–º
        println!("üîî PUSH NOTIFICATION to {}: {} - {}", 
                 device_id, notification.title, notification.message);
    }

    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    async fn send_webhook_notification(notification: &ErrorNotification, url: &str) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å webhook —Å–µ—Ä–≤–∏—Å–æ–º
        println!("üîó WEBHOOK NOTIFICATION to {}: {} - {}", 
                 url, notification.title, notification.message);
    }

    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    async fn send_telegram_notification(notification: &ErrorNotification, chat_id: &str) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot API
        println!("üì® TELEGRAM NOTIFICATION to {}: {} - {}", 
                 chat_id, notification.title, notification.message);
    }

    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    async fn send_slack_notification(notification: &ErrorNotification, webhook_url: &str) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Slack API
        println!("üí¨ SLACK NOTIFICATION to {}: {} - {}", 
                 webhook_url, notification.title, notification.message);
    }

    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É
    pub async fn register_error(
        &self,
        error_type: ErrorNotificationType,
        title: String,
        message: String,
        component: String,
        stack_trace: Option<String>,
        user_impact: String,
        suggested_action: String,
    ) -> Result<(), String> {
        let notification = ErrorNotification {
            id: format!("error_{}", SystemTime::now()
                .duration_since(UNIX_EPOCH)
                .unwrap()
                .as_nanos()),
            notification_type: error_type.clone(),
            severity: match error_type {
                ErrorNotificationType::Critical => AlertSeverity::Critical,
                ErrorNotificationType::High => AlertSeverity::Warning,
                ErrorNotificationType::Medium => AlertSeverity::Warning,
                ErrorNotificationType::Low => AlertSeverity::Info,
                ErrorNotificationType::TestCoverage => AlertSeverity::Warning,
                ErrorNotificationType::Performance => AlertSeverity::Critical,
            },
            title,
            message,
            component,
            timestamp: SystemTime::now()
                .duration_since(UNIX_EPOCH)
                .unwrap()
                .as_secs(),
            metadata: HashMap::new(),
            stack_trace,
            user_impact,
            suggested_action,
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        let mut stats = self.statistics.write().await;
        stats.total_errors += 1;
        stats.error_rate = stats.total_errors as f64 / stats.total_requests as f64;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ø–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫
        if stats.error_rate > self.config.critical_threshold {
            let _ = self.notification_sender.send(notification.clone());
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏
        if stats.test_coverage < self.config.test_coverage_threshold {
            let coverage_notification = ErrorNotification {
                id: format!("coverage_{}", SystemTime::now()
                    .duration_since(UNIX_EPOCH)
                    .unwrap()
                    .as_nanos()),
                notification_type: ErrorNotificationType::TestCoverage,
                severity: AlertSeverity::Warning,
                title: "Test Coverage Below Target".to_string(),
                message: format!("Current test coverage: {:.2}%, Target: {:.2}%", 
                               stats.test_coverage * 100.0, 
                               self.config.test_coverage_threshold * 100.0),
                component: "Test System".to_string(),
                timestamp: SystemTime::now()
                    .duration_since(UNIX_EPOCH)
                    .unwrap()
                    .as_secs(),
                metadata: HashMap::new(),
                stack_trace: None,
                user_impact: "Reduced code quality and reliability".to_string(),
                suggested_action: "Increase test coverage to 100%".to_string(),
            };
            let _ = self.notification_sender.send(coverage_notification);
        }

        Ok(())
    }

    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    pub async fn register_success(&self) -> Result<(), String> {
        let mut stats = self.statistics.write().await;
        stats.total_requests += 1;
        stats.error_rate = stats.total_errors as f64 / stats.total_requests as f64;
        Ok(())
    }

    /// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏
    pub async fn update_test_coverage(&self, coverage: f64) -> Result<(), String> {
        let mut stats = self.statistics.write().await;
        stats.test_coverage = coverage;
        
        if coverage < self.config.test_coverage_threshold {
            let notification = ErrorNotification {
                id: format!("coverage_{}", SystemTime::now()
                    .duration_since(UNIX_EPOCH)
                    .unwrap()
                    .as_nanos()),
                notification_type: ErrorNotificationType::TestCoverage,
                severity: AlertSeverity::Warning,
                title: "Test Coverage Below Target".to_string(),
                message: format!("Current test coverage: {:.2}%, Target: {:.2}%", 
                               coverage * 100.0, 
                               self.config.test_coverage_threshold * 100.0),
                component: "Test System".to_string(),
                timestamp: SystemTime::now()
                    .duration_since(UNIX_EPOCH)
                    .unwrap()
                    .as_secs(),
                metadata: HashMap::new(),
                stack_trace: None,
                user_impact: "Reduced code quality and reliability".to_string(),
                suggested_action: "Increase test coverage to 100%".to_string(),
            };
            let _ = self.notification_sender.send(notification);
        }
        
        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
    pub async fn get_statistics(&self) -> ErrorStatistics {
        self.statistics.read().await.clone()
    }

    /// –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    pub async fn reset_statistics(&self) -> Result<(), String> {
        let mut stats = self.statistics.write().await;
        *stats = ErrorStatistics {
            total_requests: 0,
            total_errors: 0,
            error_rate: 0.0,
            test_coverage: 0.0,
            last_notification_time: 0,
            notifications_sent_this_hour: 0,
            error_breakdown: HashMap::new(),
        };
        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    fn create_test_config() -> NotificationConfig {
        NotificationConfig {
            owner_arm_id: "owner_arm_123".to_string(),
            channels: vec![
                NotificationChannel::Email("owner@hotpot.com".to_string()),
                NotificationChannel::Telegram("123456789".to_string()),
            ],
            critical_threshold: 0.00001, // 0.001%
            test_coverage_threshold: 1.0, // 100%
            notification_cooldown: 300, // 5 –º–∏–Ω—É—Ç
            max_notifications_per_hour: 10,
        }
    }

    #[tokio::test]
    async fn test_error_notification_system_creation() {
        let config = create_test_config();
        let system = ErrorNotificationSystem::new(config);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞
        assert_eq!(system.config.owner_arm_id, "owner_arm_123");
        assert_eq!(system.config.channels.len(), 2);
    }

    #[tokio::test]
    async fn test_register_error() {
        let config = create_test_config();
        let system = ErrorNotificationSystem::new(config);
        
        let result = system.register_error(
            ErrorNotificationType::Critical,
            "Test Error".to_string(),
            "This is a test error".to_string(),
            "Test Component".to_string(),
            Some("Stack trace here".to_string()),
            "No user impact".to_string(),
            "Fix the error".to_string(),
        ).await;
        
        assert!(result.is_ok());
        
        let stats = system.get_statistics().await;
        assert_eq!(stats.total_errors, 1);
    }

    #[tokio::test]
    async fn test_register_success() {
        let config = create_test_config();
        let system = ErrorNotificationSystem::new(config);
        
        let result = system.register_success().await;
        assert!(result.is_ok());
        
        let stats = system.get_statistics().await;
        assert_eq!(stats.total_requests, 1);
        assert_eq!(stats.error_rate, 0.0);
    }

    #[tokio::test]
    async fn test_error_rate_calculation() {
        let config = create_test_config();
        let system = ErrorNotificationSystem::new(config);
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º 1000 —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        for _ in 0..1000 {
            system.register_success().await.unwrap();
        }
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º 1 –æ—à–∏–±–∫—É
        system.register_error(
            ErrorNotificationType::Critical,
            "Test Error".to_string(),
            "This is a test error".to_string(),
            "Test Component".to_string(),
            None,
            "No user impact".to_string(),
            "Fix the error".to_string(),
        ).await.unwrap();
        
        let stats = system.get_statistics().await;
        assert_eq!(stats.total_requests, 1000);
        assert_eq!(stats.total_errors, 1);
        assert_eq!(stats.error_rate, 0.001); // 0.1%
    }

    #[tokio::test]
    async fn test_test_coverage_notification() {
        let config = create_test_config();
        let system = ErrorNotificationSystem::new(config);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –Ω–∏–∂–µ —Ü–µ–ª–µ–≤–æ–≥–æ
        let result = system.update_test_coverage(0.85).await; // 85%
        assert!(result.is_ok());
        
        let stats = system.get_statistics().await;
        assert_eq!(stats.test_coverage, 0.85);
    }

    #[tokio::test]
    async fn test_critical_threshold_exceeded() {
        let config = create_test_config();
        let system = ErrorNotificationSystem::new(config.clone());
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º 1000 —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        for _ in 0..1000 {
            system.register_success().await.unwrap();
        }
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º 2 –æ—à–∏–±–∫–∏ (0.2% > 0.001%)
        for i in 0..2 {
            system.register_error(
                ErrorNotificationType::Critical,
                format!("Test Error {}", i),
                "This is a test error".to_string(),
                "Test Component".to_string(),
                None,
                "No user impact".to_string(),
                "Fix the error".to_string(),
            ).await.unwrap();
        }
        
        let stats = system.get_statistics().await;
        assert!(stats.error_rate > config.critical_threshold);
    }
}
