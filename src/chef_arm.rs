use std::collections::HashMap;
use std::time::{SystemTime, UNIX_EPOCH};
use serde::{Deserialize, Serialize};

/// –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–≤–∞—Ä–∞
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum OrderStatus {
    Pending,        // –ó–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–≤–∞—Ä–∞
    Confirmed,      // –ü–æ–≤–∞—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫–∞–∑ –∏ –Ω–∞—á–∞–ª –≥–æ—Ç–æ–≤–∏—Ç—å
    InProgress,     // –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è
    Ready,          // –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤
    Completed,      // –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω (–≤—ã–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç—É)
    Cancelled,      // –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –ø–æ–≤–∞—Ä–∞
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ChefOrder {
    pub order_id: String,
    pub customer_id: String,
    pub food_truck_id: String,
    pub items: Vec<OrderItem>,
    pub total_amount: u128,
    pub status: OrderStatus,
    pub created_at: u64,
    pub confirmed_at: Option<u64>,
    pub started_at: Option<u64>,
    pub ready_at: Option<u64>,
    pub completed_at: Option<u64>,
    pub estimated_time: u32, // –í –º–∏–Ω—É—Ç–∞—Ö
    pub actual_time: Option<u32>, // –í –º–∏–Ω—É—Ç–∞—Ö
    pub chef_notes: Option<String>,
    pub customer_notes: Option<String>,
}

/// –≠–ª–µ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OrderItem {
    pub item_id: String,
    pub name: String,
    pub quantity: u32,
    pub price: u128,
    pub special_instructions: Option<String>,
    pub allergens: Vec<String>,
    pub preparation_time: u32, // –í –º–∏–Ω—É—Ç–∞—Ö
}

/// ARM –ø–æ–≤–∞—Ä–∞ - —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
#[derive(Debug, Clone)]
pub struct ChefARM {
    pub chef_id: String,
    pub food_truck_id: String,
    pub orders: HashMap<String, ChefOrder>,
    pub is_active: bool,
    pub current_orders: Vec<String>, // ID –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    pub completed_orders_today: u32,
    pub total_orders_processed: u32,
    pub average_preparation_time: f32, // –í –º–∏–Ω—É—Ç–∞—Ö
    pub chef_rating: f32, // –†–µ–π—Ç–∏–Ω–≥ –ø–æ–≤–∞—Ä–∞ (1.0 - 5.0)
    pub specializations: Vec<String>, // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–≤–∞—Ä–∞
    pub working_hours: (u8, u8), // (start_hour, end_hour)
    pub break_schedule: Vec<(u8, u8)>, // –í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
}

impl ChefARM {
    /// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ ARM –ø–æ–≤–∞—Ä–∞
    pub fn new(chef_id: String, food_truck_id: String) -> Self {
        Self {
            chef_id,
            food_truck_id,
            orders: HashMap::new(),
            is_active: false,
            current_orders: Vec::new(),
            completed_orders_today: 0,
            total_orders_processed: 0,
            average_preparation_time: 0.0,
            chef_rating: 5.0, // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            specializations: Vec::new(),
            working_hours: (8, 20), // 8:00 - 20:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            break_schedule: Vec::new(),
        }
    }

    /// –ê–∫—Ç–∏–≤–∞—Ü–∏—è ARM –ø–æ–≤–∞—Ä–∞
    pub fn activate(&mut self) {
        self.is_active = true;
        println!("üç≥ ARM –ø–æ–≤–∞—Ä–∞ {} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –Ω–æ–¥—ã {}", self.chef_id, self.food_truck_id);
    }

    /// –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è ARM –ø–æ–≤–∞—Ä–∞
    pub fn deactivate(&mut self) {
        self.is_active = false;
        println!("üç≥ ARM –ø–æ–≤–∞—Ä–∞ {} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", self.chef_id);
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    pub fn receive_order(&mut self, order: ChefOrder) -> Result<(), String> {
        if !self.is_active {
            return Err("ARM –ø–æ–≤–∞—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω".to_string());
        }

        if self.current_orders.len() >= 10 { // –ú–∞–∫—Å–∏–º—É–º 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            return Err("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤".to_string());
        }

        let order_id = order.order_id.clone();
        self.orders.insert(order_id.clone(), order);
        self.current_orders.push(order_id.clone());

        println!("üç≥ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ {} –¥–ª—è –ø–æ–≤–∞—Ä–∞ {}", order_id, self.chef_id);
        Ok(())
    }

    /// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ–≤–∞—Ä–æ–º
    pub fn confirm_order(&mut self, order_id: &str, estimated_time: u32, chef_notes: Option<String>) -> Result<(), String> {
        if let Some(order) = self.orders.get_mut(order_id) {
            if order.status != OrderStatus::Pending {
                return Err("–ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω".to_string());
            }

            order.status = OrderStatus::Confirmed;
            order.confirmed_at = Some(SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs());
            order.estimated_time = estimated_time;
            order.chef_notes = chef_notes;

            println!("‚úÖ –ü–æ–≤–∞—Ä {} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫–∞–∑ {} (–≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {} –º–∏–Ω)", 
                     self.chef_id, order_id, estimated_time);
            Ok(())
        } else {
            Err("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω".to_string())
        }
    }

    /// –ù–∞—á–∞–ª–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    pub fn start_cooking(&mut self, order_id: &str) -> Result<(), String> {
        if let Some(order) = self.orders.get_mut(order_id) {
            if order.status != OrderStatus::Confirmed {
                return Err("–ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è".to_string());
            }

            order.status = OrderStatus::InProgress;
            order.started_at = Some(SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs());

            println!("üë®‚Äçüç≥ –ü–æ–≤–∞—Ä {} –Ω–∞—á–∞–ª –≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ {}", self.chef_id, order_id);
            Ok(())
        } else {
            Err("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω".to_string())
        }
    }

    /// –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤
    pub fn mark_ready(&mut self, order_id: &str) -> Result<(), String> {
        if let Some(order) = self.orders.get_mut(order_id) {
            if order.status != OrderStatus::InProgress {
                return Err("–ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è".to_string());
            }

            order.status = OrderStatus::Ready;
            order.ready_at = Some(SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs());

            // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
            if let (Some(started), Some(ready)) = (order.started_at, order.ready_at) {
                let actual_time = (ready - started) / 60; // –í –º–∏–Ω—É—Ç–∞—Ö
                order.actual_time = Some(actual_time as u32);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
                self.update_average_preparation_time(actual_time as u32);
            }

            println!("üçΩÔ∏è –ó–∞–∫–∞–∑ {} –≥–æ—Ç–æ–≤! –ü–æ–≤–∞—Ä: {}", order_id, self.chef_id);
            Ok(())
        } else {
            Err("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω".to_string())
        }
    }

    /// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–≤—ã–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç—É)
    pub fn complete_order(&mut self, order_id: &str) -> Result<(), String> {
        if let Some(order) = self.orders.get_mut(order_id) {
            if order.status != OrderStatus::Ready {
                return Err("–ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º".to_string());
            }

            order.status = OrderStatus::Completed;
            order.completed_at = Some(SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs());

            // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            self.current_orders.retain(|id| id != order_id);
            self.completed_orders_today += 1;
            self.total_orders_processed += 1;

            println!("‚úÖ –ó–∞–∫–∞–∑ {} –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–≤–∞—Ä–æ–º {}", order_id, self.chef_id);
            Ok(())
        } else {
            Err("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω".to_string())
        }
    }

    /// –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
    pub fn cancel_order(&mut self, order_id: &str, reason: String) -> Result<(), String> {
        if let Some(order) = self.orders.get_mut(order_id) {
            if order.status == OrderStatus::Completed {
                return Err("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å".to_string());
            }

            order.status = OrderStatus::Cancelled;
            order.chef_notes = Some(format!("–û—Ç–º–µ–Ω–µ–Ω: {}", reason));

            // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            self.current_orders.retain(|id| id != order_id);

            println!("‚ùå –ó–∞–∫–∞–∑ {} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–≤–∞—Ä–æ–º {}: {}", order_id, self.chef_id, reason);
            Ok(())
        } else {
            Err("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω".to_string())
        }
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    pub fn get_order_status(&self, order_id: &str) -> Option<OrderStatus> {
        self.orders.get(order_id).map(|order| order.status.clone())
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    pub fn get_active_orders(&self) -> Vec<&ChefOrder> {
        self.current_orders.iter()
            .filter_map(|id| self.orders.get(id))
            .collect()
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    pub fn get_orders_by_status(&self, status: OrderStatus) -> Vec<&ChefOrder> {
        self.orders.values()
            .filter(|order| order.status == status)
            .collect()
    }

    /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    fn update_average_preparation_time(&mut self, new_time: u32) {
        if self.total_orders_processed == 0 {
            self.average_preparation_time = new_time as f32;
        } else {
            let total_time = self.average_preparation_time * (self.total_orders_processed - 1) as f32 + new_time as f32;
            self.average_preparation_time = total_time / self.total_orders_processed as f32;
        }
    }

    /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–≤–∞—Ä–∞
    pub fn update_rating(&mut self, new_rating: f32) {
        if new_rating >= 1.0 && new_rating <= 5.0 {
            self.chef_rating = new_rating;
            println!("‚≠ê –†–µ–π—Ç–∏–Ω–≥ –ø–æ–≤–∞—Ä–∞ {} –æ–±–Ω–æ–≤–ª–µ–Ω: {:.1}", self.chef_id, new_rating);
        }
    }

    /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    pub fn add_specialization(&mut self, specialization: String) {
        if !self.specializations.contains(&specialization) {
            self.specializations.push(specialization.clone());
            println!("üéØ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–≤–∞—Ä–∞ {}: {}", self.chef_id, specialization);
        }
    }

    /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    pub fn set_working_hours(&mut self, start_hour: u8, end_hour: u8) {
        if start_hour < 24 && end_hour < 24 && start_hour < end_hour {
            self.working_hours = (start_hour, end_hour);
            println!("‚è∞ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –ø–æ–≤–∞—Ä–∞ {}: {}:00 - {}:00", 
                     self.chef_id, start_hour, end_hour);
        }
    }

    /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ—Ä—ã–≤–∞
    pub fn add_break(&mut self, start_hour: u8, end_hour: u8) {
        if start_hour < 24 && end_hour < 24 && start_hour < end_hour {
            self.break_schedule.push((start_hour, end_hour));
            println!("‚òï –ü–µ—Ä–µ—Ä—ã–≤ –ø–æ–≤–∞—Ä–∞ {}: {}:00 - {}:00", 
                     self.chef_id, start_hour, end_hour);
        }
    }

    /// –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø–æ–≤–∞—Ä –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    pub fn is_working_now(&self) -> bool {
        let now = SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs();
        let hour = (now / 3600) % 24;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        if hour < self.working_hours.0 as u64 || hour >= self.working_hours.1 as u64 {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ä—ã–≤—ã
        for (break_start, break_end) in &self.break_schedule {
            if hour >= *break_start as u64 && hour < *break_end as u64 {
                return false;
            }
        }

        true
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–≤–∞—Ä–∞
    pub fn get_statistics(&self) -> ChefStatistics {
        ChefStatistics {
            chef_id: self.chef_id.clone(),
            total_orders: self.total_orders_processed,
            completed_today: self.completed_orders_today,
            active_orders: self.current_orders.len(),
            average_time: self.average_preparation_time,
            rating: self.chef_rating,
            is_working: self.is_working_now(),
        }
    }

    /// –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    pub fn reset_daily_stats(&mut self) {
        self.completed_orders_today = 0;
        println!("üìä –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≤–∞—Ä–∞ {} —Å–±—Ä–æ—à–µ–Ω–∞", self.chef_id);
    }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≤–∞—Ä–∞
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ChefStatistics {
    pub chef_id: String,
    pub total_orders: u32,
    pub completed_today: u32,
    pub active_orders: usize,
    pub average_time: f32,
    pub rating: f32,
    pub is_working: bool,
}

/// –ú–µ–Ω–µ–¥–∂–µ—Ä ARM –ø–æ–≤–∞—Ä–æ–≤
#[derive(Debug, Clone)]
pub struct ChefARMManager {
    pub chefs: HashMap<String, ChefARM>,
    pub food_truck_chefs: HashMap<String, String>, // food_truck_id -> chef_id
}

impl ChefARMManager {
    pub fn new() -> Self {
        Self {
            chefs: HashMap::new(),
            food_truck_chefs: HashMap::new(),
        }
    }

    /// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–≤–∞—Ä–∞
    pub fn register_chef(&mut self, chef_id: String, food_truck_id: String) -> Result<(), String> {
        if self.chefs.contains_key(&chef_id) {
            return Err("–ü–æ–≤–∞—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω".to_string());
        }

        if self.food_truck_chefs.contains_key(&food_truck_id) {
            return Err("–£ —ç—Ç–æ–π –Ω–æ–¥—ã —É–∂–µ –µ—Å—Ç—å –ø–æ–≤–∞—Ä".to_string());
        }

        let chef_arm = ChefARM::new(chef_id.clone(), food_truck_id.clone());
        self.chefs.insert(chef_id.clone(), chef_arm);
        self.food_truck_chefs.insert(food_truck_id.clone(), chef_id.clone());

        println!("üë®‚Äçüç≥ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–≤–∞—Ä: {} –¥–ª—è –Ω–æ–¥—ã {}", chef_id, food_truck_id);
        Ok(())
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ ARM –ø–æ–≤–∞—Ä–∞ –ø–æ ID
    pub fn get_chef(&self, chef_id: &str) -> Option<&ChefARM> {
        self.chefs.get(chef_id)
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ ARM –ø–æ–≤–∞—Ä–∞ –ø–æ ID –Ω–æ–¥—ã
    pub fn get_chef_by_food_truck(&self, food_truck_id: &str) -> Option<&ChefARM> {
        if let Some(chef_id) = self.food_truck_chefs.get(food_truck_id) {
            self.chefs.get(chef_id)
        } else {
            None
        }
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –º—É—Ç–∞–±–µ–ª—å–Ω–æ–≥–æ ARM –ø–æ–≤–∞—Ä–∞ –ø–æ ID
    pub fn get_chef_mut(&mut self, chef_id: &str) -> Option<&mut ChefARM> {
        self.chefs.get_mut(chef_id)
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –º—É—Ç–∞–±–µ–ª—å–Ω–æ–≥–æ ARM –ø–æ–≤–∞—Ä–∞ –ø–æ ID –Ω–æ–¥—ã
    pub fn get_chef_by_food_truck_mut(&mut self, food_truck_id: &str) -> Option<&mut ChefARM> {
        if let Some(chef_id) = self.food_truck_chefs.get(food_truck_id) {
            self.chefs.get_mut(chef_id)
        } else {
            None
        }
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–≤–∞—Ä–æ–≤
    pub fn get_all_chefs(&self) -> Vec<&ChefARM> {
        self.chefs.values().collect()
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –ø–æ–≤–∞—Ä–æ–≤
    pub fn get_all_statistics(&self) -> Vec<ChefStatistics> {
        self.chefs.values().map(|chef| chef.get_statistics()).collect()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_chef_arm_creation() {
        let chef_arm = ChefARM::new("chef_001".to_string(), "truck_001".to_string());
        assert_eq!(chef_arm.chef_id, "chef_001");
        assert_eq!(chef_arm.food_truck_id, "truck_001");
        assert!(!chef_arm.is_active);
        assert_eq!(chef_arm.current_orders.len(), 0);
    }

    #[test]
    fn test_order_workflow() {
        let mut chef_arm = ChefARM::new("chef_001".to_string(), "truck_001".to_string());
        chef_arm.activate();

        let order = ChefOrder {
            order_id: "order_001".to_string(),
            customer_id: "customer_001".to_string(),
            food_truck_id: "truck_001".to_string(),
            items: vec![OrderItem {
                item_id: "item_001".to_string(),
                name: "–ë—É—Ä–≥–µ—Ä".to_string(),
                quantity: 1,
                price: 1000,
                special_instructions: None,
                allergens: vec!["–≥–ª—é—Ç–µ–Ω".to_string()],
                preparation_time: 15,
            }],
            total_amount: 1000,
            status: OrderStatus::Pending,
            created_at: SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs(),
            confirmed_at: None,
            started_at: None,
            ready_at: None,
            completed_at: None,
            estimated_time: 0,
            actual_time: None,
            chef_notes: None,
            customer_notes: None,
        };

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        assert!(chef_arm.receive_order(order).is_ok());
        assert_eq!(chef_arm.current_orders.len(), 1);

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        assert!(chef_arm.confirm_order("order_001", 15, Some("–ë–µ–∑ –ª—É–∫–∞".to_string())).is_ok());
        assert_eq!(chef_arm.get_order_status("order_001"), Some(OrderStatus::Confirmed));

        // –ù–∞—á–∞–ª–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        assert!(chef_arm.start_cooking("order_001").is_ok());
        assert_eq!(chef_arm.get_order_status("order_001"), Some(OrderStatus::InProgress));

        // –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤
        assert!(chef_arm.mark_ready("order_001").is_ok());
        assert_eq!(chef_arm.get_order_status("order_001"), Some(OrderStatus::Ready));

        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        assert!(chef_arm.complete_order("order_001").is_ok());
        assert_eq!(chef_arm.get_order_status("order_001"), Some(OrderStatus::Completed));
        assert_eq!(chef_arm.current_orders.len(), 0);
        assert_eq!(chef_arm.completed_orders_today, 1);
    }

    #[test]
    fn test_chef_manager() {
        let mut manager = ChefARMManager::new();
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–≤–∞—Ä–∞
        assert!(manager.register_chef("chef_001".to_string(), "truck_001".to_string()).is_ok());
        
        // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≥–æ –∂–µ –ø–æ–≤–∞—Ä–∞
        assert!(manager.register_chef("chef_001".to_string(), "truck_002".to_string()).is_err());
        
        // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–∞—Ä–∞ –¥–ª—è —Ç–æ–π –∂–µ –Ω–æ–¥—ã
        assert!(manager.register_chef("chef_002".to_string(), "truck_001".to_string()).is_err());
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≤–∞—Ä–∞
        assert!(manager.get_chef("chef_001").is_some());
        assert!(manager.get_chef_by_food_truck("truck_001").is_some());
        assert!(manager.get_chef_by_food_truck("truck_002").is_none());
    }
}
