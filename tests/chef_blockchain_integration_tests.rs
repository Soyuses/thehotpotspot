use blockchain_project::chef_arm::{ChefARM, ChefARMManager, ChefOrder, OrderStatus, OrderItem};
use std::time::{SystemTime, UNIX_EPOCH};

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–ª–æ–∫—á–µ–π–Ω–∞
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –±—ã–ª–∏ –±—ã –∏–º–ø–æ—Ä—Ç—ã –∏–∑ main.rs
// –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏

#[derive(Debug, Clone)]
struct MockTokenHolder {
    pub address: String,
    pub security_tokens: u128,
    pub utility_tokens: u128,
}

impl MockTokenHolder {
    fn new(address: String) -> Self {
        Self {
            address,
            security_tokens: 0,
            utility_tokens: 0,
        }
    }

    fn add_security_tokens(&mut self, amount: u128) {
        self.security_tokens += amount;
    }

    fn add_utility_tokens(&mut self, amount: u128) {
        self.utility_tokens += amount;
    }
}

#[derive(Debug, Clone)]
struct MockBlockchain {
    pub token_holders: std::collections::HashMap<String, MockTokenHolder>,
    pub chef_arm_manager: ChefARMManager,
    pub main_owner: String,
    pub charity_fund: String,
}

impl MockBlockchain {
    fn new(main_owner: String) -> Self {
        let mut token_holders = std::collections::HashMap::new();
        token_holders.insert(main_owner.clone(), MockTokenHolder::new(main_owner.clone()));
        
        Self {
            token_holders,
            chef_arm_manager: ChefARMManager::new(),
            main_owner: main_owner.clone(),
            charity_fund: "charity_fund".to_string(),
        }
    }

    fn process_purchase_with_chef(&mut self, customer: String, food_truck: String, amount_subunits: u128, food_items: Vec<String>) -> String {
        // –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —Å –∫–æ—à–µ–ª—å–∫–æ–º –ø–æ–≤–∞—Ä–∞:
        // –ù–æ–¥–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–µ—Ç–∏: 48% –≤–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ç–∏, 3% —Ñ–æ–Ω–¥, 24% –ø–æ–≤–∞—Ä, 25% –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
        // –ù–æ–¥–∞ —Ñ—Ä–∞–Ω—á–∞–π–∑–∏: 48% –≤–ª–∞–¥–µ–ª–µ—Ü —Ñ—Ä–∞–Ω—à–∏–∑—ã, 3% —Ñ–æ–Ω–¥, 24% –ø–æ–≤–∞—Ä, 25% –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
        
        let check_id = format!("check_{}", SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs());
        
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        let main_owner_tokens = (amount_subunits * 48) / 100;
        let charity_tokens = (amount_subunits * 3) / 100;
        let chef_tokens = (amount_subunits * 24) / 100;
        let customer_tokens = (amount_subunits * 25) / 100;
        
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
        if let Some(holder) = self.token_holders.get_mut(&self.main_owner) {
            holder.add_security_tokens(main_owner_tokens);
        }
        
        if let Some(holder) = self.token_holders.get_mut(&self.charity_fund) {
            holder.add_security_tokens(charity_tokens);
        } else {
            let mut charity_holder = MockTokenHolder::new(self.charity_fund.clone());
            charity_holder.add_security_tokens(charity_tokens);
            self.token_holders.insert(self.charity_fund.clone(), charity_holder);
        }
        
        // –ö–æ—à–µ–ª–µ–∫ –ø–æ–≤–∞—Ä–∞
        let chef_address = format!("chef_{}", food_truck);
        if let Some(holder) = self.token_holders.get_mut(&chef_address) {
            holder.add_security_tokens(chef_tokens);
        } else {
            let mut chef_holder = MockTokenHolder::new(chef_address.clone());
            chef_holder.add_security_tokens(chef_tokens);
            self.token_holders.insert(chef_address, chef_holder);
        }
        
        // –ö–æ—à–µ–ª–µ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        if let Some(holder) = self.token_holders.get_mut(&customer) {
            holder.add_security_tokens(customer_tokens);
        } else {
            let mut customer_holder = MockTokenHolder::new(customer.clone());
            customer_holder.add_security_tokens(customer_tokens);
            self.token_holders.insert(customer.clone(), customer_holder);
        }
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–≤–∞—Ä–∞
        self.create_chef_order(&customer, &food_truck, amount_subunits, &food_items, &check_id);
        
        check_id
    }

    fn create_chef_order(&mut self, customer: &str, food_truck: &str, amount_subunits: u128, food_items: &[String], check_id: &str) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–≤–∞—Ä –¥–ª—è —ç—Ç–æ–π –Ω–æ–¥—ã
        if let Some(chef_arm) = self.chef_arm_manager.get_chef_by_food_truck_mut(food_truck) {
            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞
            let order_items: Vec<OrderItem> = food_items.iter().enumerate().map(|(i, item)| {
                OrderItem {
                    item_id: format!("item_{}_{}", check_id, i),
                    name: item.clone(),
                    quantity: 1,
                    price: amount_subunits / food_items.len() as u128,
                    special_instructions: None,
                    allergens: vec!["–≥–ª—é—Ç–µ–Ω".to_string()],
                    preparation_time: 15,
                }
            }).collect();

            // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–≤–∞—Ä–∞
            let chef_order = ChefOrder {
                order_id: check_id.to_string(),
                customer_id: customer.to_string(),
                food_truck_id: food_truck.to_string(),
                items: order_items,
                total_amount: amount_subunits,
                status: OrderStatus::Pending,
                created_at: SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs(),
                confirmed_at: None,
                started_at: None,
                ready_at: None,
                completed_at: None,
                estimated_time: 0,
                actual_time: None,
                chef_notes: None,
                customer_notes: None,
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –ø–æ–≤–∞—Ä—É
            if let Err(e) = chef_arm.receive_order(chef_order) {
                println!("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ–≤–∞—Ä—É: {}", e);
            } else {
                println!("üç≥ –ó–∞–∫–∞–∑ {} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤–∞—Ä—É –Ω–æ–¥—ã {}", check_id, food_truck);
            }
        } else {
            println!("‚ö†Ô∏è –ü–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –Ω–æ–¥—ã {}", food_truck);
        }
    }

    fn register_chef(&mut self, chef_id: String, food_truck_id: String) -> Result<(), String> {
        self.chef_arm_manager.register_chef(chef_id, food_truck_id)
    }

    fn activate_chef(&mut self, chef_id: &str) -> Result<(), String> {
        if let Some(chef_arm) = self.chef_arm_manager.get_chef_mut(chef_id) {
            chef_arm.activate();
            Ok(())
        } else {
            Err("–ü–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω".to_string())
        }
    }

    fn get_chef_tokens(&self, food_truck: &str) -> u128 {
        let chef_address = format!("chef_{}", food_truck);
        self.token_holders.get(&chef_address)
            .map(|h| h.security_tokens)
            .unwrap_or(0)
    }

    fn get_customer_tokens(&self, customer: &str) -> u128 {
        self.token_holders.get(customer)
            .map(|h| h.security_tokens)
            .unwrap_or(0)
    }

    fn get_owner_tokens(&self) -> u128 {
        self.token_holders.get(&self.main_owner)
            .map(|h| h.security_tokens)
            .unwrap_or(0)
    }

    fn get_charity_tokens(&self) -> u128 {
        self.token_holders.get(&self.charity_fund)
            .map(|h| h.security_tokens)
            .unwrap_or(0)
    }
}

#[test]
fn test_chef_token_distribution() {
    let mut blockchain = MockBlockchain::new("main_owner".to_string());
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–≤–∞—Ä–∞
    assert!(blockchain.register_chef("chef_001".to_string(), "truck_001".to_string()).is_ok());
    assert!(blockchain.activate_chef("chef_001").is_ok());
    
    // –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –¥–µ–ª–∞–µ—Ç –∑–∞–∫–∞–∑ –Ω–∞ 1000 subunits
    let customer = "customer_001".to_string();
    let food_truck = "truck_001".to_string();
    let amount = 1000;
    let food_items = vec!["–ë—É—Ä–≥–µ—Ä".to_string(), "–ö–∞—Ä—Ç–æ—à–∫–∞".to_string()];
    
    let check_id = blockchain.process_purchase_with_chef(
        customer.clone(),
        food_truck.clone(),
        amount,
        food_items,
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    let owner_tokens = blockchain.get_owner_tokens();
    let charity_tokens = blockchain.get_charity_tokens();
    let chef_tokens = blockchain.get_chef_tokens(&food_truck);
    let customer_tokens = blockchain.get_customer_tokens(&customer);
    
    // 48% –≤–ª–∞–¥–µ–ª—å—Ü—É = 480
    assert_eq!(owner_tokens, 480);
    // 3% —Ñ–æ–Ω–¥—É = 30
    assert_eq!(charity_tokens, 30);
    // 24% –ø–æ–≤–∞—Ä—É = 240
    assert_eq!(chef_tokens, 240);
    // 25% –ø–æ–∫—É–ø–∞—Ç–µ–ª—é = 250
    assert_eq!(customer_tokens, 250);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–≤–∞—Ä–∞
    if let Some(chef_arm) = blockchain.chef_arm_manager.get_chef("chef_001") {
        assert_eq!(chef_arm.current_orders.len(), 1);
        assert_eq!(chef_arm.get_order_status(&check_id), Some(OrderStatus::Pending));
    }
}

#[test]
fn test_chef_order_workflow_integration() {
    let mut blockchain = MockBlockchain::new("main_owner".to_string());
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–≤–∞—Ä–∞
    assert!(blockchain.register_chef("chef_001".to_string(), "truck_001".to_string()).is_ok());
    assert!(blockchain.activate_chef("chef_001").is_ok());
    
    // –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –¥–µ–ª–∞–µ—Ç –∑–∞–∫–∞–∑
    let customer = "customer_001".to_string();
    let food_truck = "truck_001".to_string();
    let amount = 1000;
    let food_items = vec!["–ë—É—Ä–≥–µ—Ä".to_string()];
    
    let check_id = blockchain.process_purchase_with_chef(
        customer.clone(),
        food_truck.clone(),
        amount,
        food_items,
    );
    
    // –ü–æ–≤–∞—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–∫–∞–∑
    if let Some(chef_arm) = blockchain.chef_arm_manager.get_chef_mut("chef_001") {
        assert!(chef_arm.confirm_order(&check_id, 15, Some("–ë–µ–∑ –ª—É–∫–∞".to_string())).is_ok());
        assert_eq!(chef_arm.get_order_status(&check_id), Some(OrderStatus::Confirmed));
        
        // –ü–æ–≤–∞—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç –≥–æ—Ç–æ–≤–∏—Ç—å
        assert!(chef_arm.start_cooking(&check_id).is_ok());
        assert_eq!(chef_arm.get_order_status(&check_id), Some(OrderStatus::InProgress));
        
        // –ü–æ–≤–∞—Ä –æ—Ç–º–µ—á–∞–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
        assert!(chef_arm.mark_ready(&check_id).is_ok());
        assert_eq!(chef_arm.get_order_status(&check_id), Some(OrderStatus::Ready));
        
        // –ü–æ–≤–∞—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–∫–∞–∑
        assert!(chef_arm.complete_order(&check_id).is_ok());
        assert_eq!(chef_arm.get_order_status(&check_id), Some(OrderStatus::Completed));
        assert_eq!(chef_arm.current_orders.len(), 0);
        assert_eq!(chef_arm.completed_orders_today, 1);
    }
}

#[test]
fn test_multiple_chefs_different_trucks() {
    let mut blockchain = MockBlockchain::new("main_owner".to_string());
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–≤—É—Ö –ø–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –Ω–æ–¥
    assert!(blockchain.register_chef("chef_001".to_string(), "truck_001".to_string()).is_ok());
    assert!(blockchain.register_chef("chef_002".to_string(), "truck_002".to_string()).is_ok());
    
    assert!(blockchain.activate_chef("chef_001").is_ok());
    assert!(blockchain.activate_chef("chef_002").is_ok());
    
    // –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ –¥–µ–ª–∞—é—Ç –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–∑–Ω—ã—Ö –Ω–æ–¥–∞—Ö
    let customer1 = "customer_001".to_string();
    let customer2 = "customer_002".to_string();
    let truck1 = "truck_001".to_string();
    let truck2 = "truck_002".to_string();
    let amount = 1000;
    let food_items = vec!["–ë—É—Ä–≥–µ—Ä".to_string()];
    
    let check_id1 = blockchain.process_purchase_with_chef(
        customer1.clone(),
        truck1.clone(),
        amount,
        food_items.clone(),
    );
    
    let check_id2 = blockchain.process_purchase_with_chef(
        customer2.clone(),
        truck2.clone(),
        amount,
        food_items,
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π –ø–æ–≤–∞—Ä –ø–æ–ª—É—á–∏–ª —Å–≤–æ–π –∑–∞–∫–∞–∑
    if let Some(chef1) = blockchain.chef_arm_manager.get_chef("chef_001") {
        assert_eq!(chef1.current_orders.len(), 1);
        assert_eq!(chef1.get_order_status(&check_id1), Some(OrderStatus::Pending));
    }
    
    if let Some(chef2) = blockchain.chef_arm_manager.get_chef("chef_002") {
        assert_eq!(chef2.current_orders.len(), 1);
        assert_eq!(chef2.get_order_status(&check_id2), Some(OrderStatus::Pending));
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–≤–∞—Ä–∞
    let chef1_tokens = blockchain.get_chef_tokens(&truck1);
    let chef2_tokens = blockchain.get_chef_tokens(&truck2);
    
    assert_eq!(chef1_tokens, 240); // 24% –æ—Ç 1000
    assert_eq!(chef2_tokens, 240); // 24% –æ—Ç 1000
}

#[test]
fn test_chef_without_registration() {
    let mut blockchain = MockBlockchain::new("main_owner".to_string());
    
    // –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –¥–µ–ª–∞–µ—Ç –∑–∞–∫–∞–∑ –≤ –Ω–æ–¥–µ –±–µ–∑ –ø–æ–≤–∞—Ä–∞
    let customer = "customer_001".to_string();
    let food_truck = "truck_001".to_string();
    let amount = 1000;
    let food_items = vec!["–ë—É—Ä–≥–µ—Ä".to_string()];
    
    let check_id = blockchain.process_purchase_with_chef(
        customer.clone(),
        food_truck.clone(),
        amount,
        food_items,
    );
    
    // –¢–æ–∫–µ–Ω—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è
    let owner_tokens = blockchain.get_owner_tokens();
    let charity_tokens = blockchain.get_charity_tokens();
    let chef_tokens = blockchain.get_chef_tokens(&food_truck);
    let customer_tokens = blockchain.get_customer_tokens(&customer);
    
    assert_eq!(owner_tokens, 480);
    assert_eq!(charity_tokens, 30);
    assert_eq!(chef_tokens, 240); // –ü–æ–≤–∞—Ä –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    assert_eq!(customer_tokens, 250);
    
    // –ù–æ –∑–∞–∫–∞–∑ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–≤–∞—Ä–∞
    // (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
}

#[test]
fn test_chef_statistics_after_multiple_orders() {
    let mut blockchain = MockBlockchain::new("main_owner".to_string());
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–≤–∞—Ä–∞
    assert!(blockchain.register_chef("chef_001".to_string(), "truck_001".to_string()).is_ok());
    assert!(blockchain.activate_chef("chef_001").is_ok());
    
    // –ü–æ–≤–∞—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤
    for i in 1..=3 {
        let customer = format!("customer_{:03}", i);
        let food_truck = "truck_001".to_string();
        let amount = 1000;
        let food_items = vec!["–ë—É—Ä–≥–µ—Ä".to_string()];
        
        let check_id = blockchain.process_purchase_with_chef(
            customer,
            food_truck,
            amount,
            food_items,
        );
        
        // –ü–æ–≤–∞—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑
        if let Some(chef_arm) = blockchain.chef_arm_manager.get_chef_mut("chef_001") {
            chef_arm.confirm_order(&check_id, 15, None).unwrap();
            chef_arm.start_cooking(&check_id).unwrap();
            chef_arm.mark_ready(&check_id).unwrap();
            chef_arm.complete_order(&check_id).unwrap();
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–≤–∞—Ä–∞
    if let Some(chef_arm) = blockchain.chef_arm_manager.get_chef("chef_001") {
        let stats = chef_arm.get_statistics();
        assert_eq!(stats.chef_id, "chef_001");
        assert_eq!(stats.total_orders, 3);
        assert_eq!(stats.completed_today, 3);
        assert_eq!(stats.active_orders, 0);
        assert!(stats.average_time > 0.0);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–≤–∞—Ä –Ω–∞–∫–æ–ø–∏–ª —Ç–æ–∫–µ–Ω—ã
    let chef_tokens = blockchain.get_chef_tokens("truck_001");
    assert_eq!(chef_tokens, 720); // 24% –æ—Ç 3000 (3 –∑–∞–∫–∞–∑–∞ –ø–æ 1000)
}
