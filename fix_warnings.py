#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è warnings –≤ Rust –ø—Ä–æ–µ–∫—Ç–µ
"""

import os
import re
import subprocess

def run_cargo_check():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å cargo check –∏ –ø–æ–ª—É—á–∏—Ç—å warnings"""
    try:
        result = subprocess.run(['cargo', 'check'], 
                              capture_output=True, text=True, cwd='.')
        return result.stdout, result.stderr
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ cargo check: {e}")
        return "", ""

def fix_unused_imports(file_path, warnings):
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã"""
    if not os.path.exists(file_path):
        return
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ warnings –æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
    file_warnings = [w for w in warnings if file_path in w and 'unused import' in w]
    
    for warning in file_warnings:
        # –ò–∑–≤–ª–µ—á—å –∏–º—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        match = re.search(r"unused import: `([^`]+)`", warning)
        if match:
            import_name = match.group(1)
            # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç
            pattern = f"use {re.escape(import_name)};"
            replacement = f"// use {import_name};"
            content = re.sub(pattern, replacement, content)
            
            # –¢–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –≤ —Å–∫–æ–±–∫–∞—Ö
            pattern = f"use ([^;]+{{{re.escape(import_name)}[^}}]*}});"
            replacement = lambda m: f"// use {m.group(1)};"
            content = re.sub(pattern, replacement, content)
    
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)

def fix_unused_variables(file_path, warnings):
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"""
    if not os.path.exists(file_path):
        return
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ warnings –æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
    file_warnings = [w for w in warnings if file_path in w and 'unused variable' in w]
    
    for warning in file_warnings:
        # –ò–∑–≤–ª–µ—á—å –∏–º—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        match = re.search(r"unused variable: `([^`]+)`", warning)
        if match:
            var_name = match.group(1)
            # –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å _ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            pattern = f"\\b{re.escape(var_name)}\\b"
            replacement = f"_{var_name}"
            content = re.sub(pattern, replacement, content)
    
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)

def main():
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ warnings –≤ Rust –ø—Ä–æ–µ–∫—Ç–µ...")
    
    # –ü–æ–ª—É—á–∏—Ç—å warnings
    stdout, stderr = run_cargo_check()
    all_output = stdout + stderr
    
    # –†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ warnings
    warnings = [line.strip() for line in all_output.split('\n') if 'warning:' in line]
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(warnings)} warnings")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å warnings –ø–æ —Ñ–∞–π–ª–∞–º
    files_to_fix = set()
    for warning in warnings:
        if '-->' in warning:
            file_match = re.search(r'--> ([^:]+):', warning)
            if file_match:
                files_to_fix.add(file_match.group(1))
    
    print(f"–§–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {len(files_to_fix)}")
    
    # –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for file_path in files_to_fix:
        print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {file_path}...")
        fix_unused_imports(file_path, warnings)
        fix_unused_variables(file_path, warnings)
    
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
    stdout, stderr = run_cargo_check()
    new_warnings = [line for line in (stdout + stderr).split('\n') if 'warning:' in line]
    print(f"–û—Å—Ç–∞–ª–æ—Å—å warnings: {len(new_warnings)}")

if __name__ == "__main__":
    main()
