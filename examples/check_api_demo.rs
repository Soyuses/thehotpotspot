//! Check API Demo for The Hot Pot Spot
//! 
//! This example demonstrates the check generation and claiming workflow.

use blockchain_project::{
    check_generation::{
        CheckGenerationService, CheckGenerationRequest, CheckClaimRequest,
        CheckGenerationConfig, CheckStatus
    },
    check_api::demo_check_api
};

fn main() {
    println!("üîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Check API –¥–ª—è The Hot Pot Spot");
    println!("{}", "=".repeat(50));

    // Initialize check generation service
    let config = CheckGenerationConfig::default();
    let mut service = CheckGenerationService::new(config);

    // Demo 1: Generate a check for a sale
    println!("\nüìã –î–µ–º–æ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏");
    println!("{}", "-".repeat(30));

    let sale_request = CheckGenerationRequest {
        sale_id: "sale_2024_001".to_string(),
        node_id: "node_tbilisi_001".to_string(),
        amount_gel: 25.0,
        st_tokens: 500, // 25 GEL * 20 (1 GEL = 0.2 THP)
        customer_phone: None,
    };

    match service.generate_check(sale_request) {
        Ok(response) => {
            let check = &response.check;
            println!("‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!");
            println!("   ID —á–µ–∫–∞: {}", check.check_id);
            println!("   –°—É–º–º–∞: {} GEL", check.amount_gel);
            println!("   –¢–æ–∫–µ–Ω—ã: {} ST", check.st_tokens);
            println!("   –ö–æ—à–µ–ª–µ–∫: {}", check.wallet_address);
            println!("   –°—Ç–∞—Ç—É—Å: {:?}", check.status);
            println!("   QR –∫–æ–¥: {} —Å–∏–º–≤–æ–ª–æ–≤", check.qr_data.len());

            // Demo 2: Print the check (simulate POS printing)
            println!("\nüñ®Ô∏è  –î–µ–º–æ 2: –ü–µ—á–∞—Ç—å —á–µ–∫–∞");
            println!("{}", "-".repeat(30));

            match service.print_check(&check.check_id) {
                Ok(_) => {
                    println!("‚úÖ –ß–µ–∫ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω –∏ –≤—ã–¥–∞–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—é");
                    
                    // Demo 3: Customer claims the check
                    println!("\nüì± –î–µ–º–æ 3: –ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º");
                    println!("{}", "-".repeat(30));

                    let claim_request = CheckClaimRequest {
                        qr_data: check.qr_data.clone(),
                        user_id: "user_001".to_string(),
                        user_wallet: "0xuser_wallet_1234567890abcdef".to_string(),
                    };

                    match service.claim_check(claim_request) {
                        Ok(claim_response) => {
                            println!("‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!");
                            println!("   –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {} ST", claim_response.transferred_tokens);
                            println!("   –ù–∞ –∫–æ—à–µ–ª–µ–∫: 0xuser_wallet_1234567890abcdef");
                        }
                        Err(e) => {
                            println!("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞: {}", e);
                        }
                    }
                }
                Err(e) => {
                    println!("‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ —á–µ–∫–∞: {}", e);
                }
            }
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫–∞: {}", e);
        }
    }

    // Demo 4: Generate multiple checks for different scenarios
    println!("\nüîÑ –î–µ–º–æ 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–µ–∫–æ–≤");
    println!("{}", "-".repeat(30));

    let scenarios = vec![
        ("sale_2024_002", "node_tbilisi_001", 15.0, 300), // 15 GEL = 3 THP
        ("sale_2024_003", "node_batumi_001", 50.0, 1000), // 50 GEL = 10 THP
        ("sale_2024_004", "node_kutaisi_001", 10.0, 200), // 10 GEL = 2 THP
    ];

    for (sale_id, node_id, amount, tokens) in scenarios {
        let request = CheckGenerationRequest {
            sale_id: sale_id.to_string(),
            node_id: node_id.to_string(),
            amount_gel: amount,
            st_tokens: tokens,
            customer_phone: None,
        };

        match service.generate_check(request) {
            Ok(response) => {
                println!("‚úÖ –ß–µ–∫ {}: {} GEL ‚Üí {} ST", 
                    response.check.check_id, amount, tokens);
                
                // Simulate different customer behaviors
                match sale_id {
                    "sale_2024_002" => {
                        // Customer prints but doesn't claim
                        service.print_check(&response.check.check_id).unwrap();
                        println!("   üìÑ –ù–∞–ø–µ—á–∞—Ç–∞–Ω, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
                    }
                    "sale_2024_003" => {
                        // Customer prints and claims
                        service.print_check(&response.check.check_id).unwrap();
                        let claim_request = CheckClaimRequest {
                            qr_data: response.check.qr_data.clone(),
                            user_id: "user_002".to_string(),
                            user_wallet: "0xuser_wallet_abcdef1234567890".to_string(),
                        };
                        service.claim_check(claim_request).unwrap();
                        println!("   ‚úÖ –ù–∞–ø–µ—á–∞—Ç–∞–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
                    }
                    "sale_2024_004" => {
                        // Customer discards the check
                        service.print_check(&response.check.check_id).unwrap();
                        service.discard_check(&response.check.check_id).unwrap();
                        println!("   üóëÔ∏è  –ù–∞–ø–µ—á–∞—Ç–∞–Ω, –Ω–æ –≤—ã–±—Ä–æ—à–µ–Ω");
                    }
                    _ => {}
                }
            }
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫–∞ {}: {}", sale_id, e);
            }
        }
    }

    // Demo 5: Check statistics and analytics
    println!("\nüìä –î–µ–º–æ 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞");
    println!("{}", "-".repeat(30));

    let stats = service.get_statistics();
    println!("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ–∫–æ–≤:");
    println!("   –í—Å–µ–≥–æ —á–µ–∫–æ–≤: {}", stats.total_checks);
    println!("   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {}", stats.generated);
    println!("   –ù–∞–ø–µ—á–∞—Ç–∞–Ω–æ: {}", stats.printed);
    println!("   –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {}", stats.claimed);
    println!("   –ò—Å—Ç–µ–∫—à–∏—Ö: {}", stats.expired);
    println!("   –í—ã–±—Ä–æ—à–µ–Ω–Ω—ã—Ö: {}", stats.discarded);
    println!("   –¢–æ–∫–µ–Ω–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {} ST", stats.total_tokens_claimed);
    println!("   –¢–æ–∫–µ–Ω–æ–≤ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {} ST", stats.total_tokens_unclaimed);

    // Demo 6: Unclaimed checks for redistribution
    println!("\nüîÑ –î–µ–º–æ 6: –ù–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–µ —á–µ–∫–∏");
    println!("{}", "-".repeat(30));

    let unclaimed = service.get_unclaimed_checks();
    println!("üìã –ù–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–µ —á–µ–∫–∏ ({} —à—Ç.):", unclaimed.len());
    for check in unclaimed {
        println!("   {}: {} GEL ‚Üí {} ST (—Å—Ç–∞—Ç—É—Å: {:?})", 
            check.check_id, check.amount_gel, check.st_tokens, check.status);
    }

    let expired = service.get_expired_checks();
    println!("‚è∞ –ò—Å—Ç–µ–∫—à–∏–µ —á–µ–∫–∏ ({} —à—Ç.):", expired.len());
    for check in expired {
        println!("   {}: {} GEL ‚Üí {} ST", 
            check.check_id, check.amount_gel, check.st_tokens);
    }

    // Demo 7: Customer journey simulation
    println!("\nüë§ –î–µ–º–æ 7: –°–∏–º—É–ª—è—Ü–∏—è –ø—É—Ç–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è");
    println!("{}", "-".repeat(30));

    println!("üõí –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –¥–µ–ª–∞–µ—Ç –∑–∞–∫–∞–∑ –Ω–∞ 30 GEL");
    let customer_request = CheckGenerationRequest {
        sale_id: "customer_journey_001".to_string(),
        node_id: "node_tbilisi_001".to_string(),
        amount_gel: 30.0,
        st_tokens: 600, // 30 GEL * 20
        customer_phone: None,
    };

    match service.generate_check(customer_request) {
        Ok(response) => {
            println!("‚úÖ –ü–æ–ª—É—á–µ–Ω —á–µ–∫ —Å QR-–∫–æ–¥–æ–º");
            service.print_check(&response.check.check_id).unwrap();
            println!("üìÑ –ß–µ–∫ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω –∏ –≤—ã–¥–∞–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—é");
            
            println!("\nü§î –í—ã–±–æ—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:");
            println!("   –í–∞—Ä–∏–∞–Ω—Ç –ê: –í—ã–±—Ä–æ—Å–∏—Ç—å —á–µ–∫ ‚Üí —Ç–æ–∫–µ–Ω—ã –æ—Å—Ç–∞—é—Ç—Å—è –≤ –æ–±–µ–∑–ª–∏—á–µ–Ω–Ω–æ–º –∫–æ—à–µ–ª—å–∫–µ");
            println!("   –í–∞—Ä–∏–∞–Ω—Ç –ë: –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ ‚Üí –ø–µ—Ä–µ–π—Ç–∏ –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é");
            
            // Simulate customer choosing option B
            println!("\nüì± –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –ë:");
            println!("   1. –°–∫–∞–Ω–∏—Ä—É–µ—Ç QR-–∫–æ–¥");
            println!("   2. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
            println!("   3. –°–∫–∞—á–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–π –û–°");
            println!("   4. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏");
            println!("   5. –°–∫–∞–Ω–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏");
            
            let claim_request = CheckClaimRequest {
                qr_data: response.check.qr_data.clone(),
                user_id: "customer_001".to_string(),
                user_wallet: "0xcustomer_wallet_1234567890abcdef".to_string(),
            };

            match service.claim_check(claim_request) {
                Ok(claim_response) => {
                    println!("‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –ª–∏—á–Ω—ã–π –∫–æ—à–µ–ª–µ–∫!");
                    println!("   –ü–æ–ª—É—á–µ–Ω–æ: {} ST —Ç–æ–∫–µ–Ω–æ–≤", claim_response.transferred_tokens);
                    println!("   –ö–æ—à–µ–ª–µ–∫: 0xcustomer_wallet_1234567890abcdef");
                    println!("   –¢–µ–ø–µ—Ä—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ DAO –∏ –ø–æ–ª—É—á–∞—Ç—å –¥–∏–≤–∏–¥–µ–Ω–¥—ã!");
                }
                Err(e) => {
                    println!("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤: {}", e);
                }
            }
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫–∞: {}", e);
        }
    }

    // Final statistics
    println!("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    println!("{}", "=".repeat(50));
    let final_stats = service.get_statistics();
    println!("–í—Å–µ–≥–æ —á–µ–∫–æ–≤: {}", final_stats.total_checks);
    println!("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {} ({}%)", 
        final_stats.claimed,
        if final_stats.total_checks > 0 {
            (final_stats.claimed * 100) / final_stats.total_checks
        } else { 0 }
    );
    println!("–ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {} ({}%)", 
        final_stats.printed + final_stats.discarded,
        if final_stats.total_checks > 0 {
            ((final_stats.printed + final_stats.discarded) * 100) / final_stats.total_checks
        } else { 0 }
    );
    println!("–¢–æ–∫–µ–Ω–æ–≤ –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏: {} ST", final_stats.total_tokens_claimed);
    println!("–¢–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {} ST", final_stats.total_tokens_unclaimed);

    println!("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    println!("üí° –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:");
    println!("   ‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è —ç–º–∏—Å—Å–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (1 THP = 5 GEL –∑–∞—Ç—Ä–∞—Ç)");
    println!("   ‚Ä¢ –û–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏");
    println!("   ‚Ä¢ QR-–∫–æ–¥—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏");
    println!("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤");
    println!("   ‚Ä¢ –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä—É–µ–º–æ—Å—Ç—å –≤ –±–ª–æ–∫—á–µ–π–Ω–µ");
}

