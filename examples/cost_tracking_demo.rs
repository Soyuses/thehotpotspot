use blockchain_project::{
    recipe_management::RecipeManager,
    purchase_planning::PurchasePlanner,
    cost_tracking::{CostTracker, ActualPurchase, PurchaseStatus},
};
use std::collections::HashMap;
use chrono::Utc;

fn main() {
    println!("üçî –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É—á–µ—Ç–∞ –∑–∞—Ç—Ä–∞—Ç Food Truck Network");
    println!("=====================================================\n");

    // 1. –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ—Ü–µ–ø—Ç–æ–≤
    println!("1. –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤...");
    let recipe_manager = RecipeManager::new();
    let recipes = recipe_manager.get_all_recipes();
    
    println!("   –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {}", recipes.len());
    for recipe in &recipes {
        println!("   - {}: {:.2} –ª–∞—Ä–∏ –∑–∞ –ø–æ—Ä—Ü–∏—é", recipe.name, recipe.cost_per_portion);
    }
    println!();

    // 2. –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–∫—É–ø–æ–∫
    println!("2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–∫—É–ø–æ–∫...");
    let planner = PurchasePlanner::new();
    println!("   –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ\n");

    // 3. –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –∑–∞–∫—É–ø–∫–∏ –Ω–∞ 1000 –±–ª—é–¥
    println!("3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –∑–∞–∫—É–ø–∫–∏ –Ω–∞ 1000 –±–ª—é–¥...");
    let mut dish_quantities = HashMap::new();
    dish_quantities.insert("plov_001".to_string(), 1000); // 1000 –ø–æ—Ä—Ü–∏–π –ø–ª–æ–≤–∞

    let detailed_plan = planner.create_detailed_plan_for_1000_dishes(
        "franchise_001".to_string(),
        dish_quantities.clone(),
    );

    println!("   –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω: {}", detailed_plan.id);
    println!("   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {:.2} –ª–∞—Ä–∏", detailed_plan.total_estimated_cost);
    println!("   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {}", detailed_plan.ingredient_orders.len());
    println!();

    // 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–æ–≤
    println!("4. –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:");
    for order in &detailed_plan.ingredient_orders {
        println!("   - {}: {:.2} –∫–≥ –ø–æ {:.3} –ª–∞—Ä–∏/–∫–≥ = {:.2} –ª–∞—Ä–∏", 
                order.ingredient_name, 
                order.quantity_kg, 
                order.unit_price, 
                order.total_cost);
    }
    println!();

    // 5. –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–∫–µ—Ä –∑–∞—Ç—Ä–∞—Ç
    println!("5. –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞ –∑–∞—Ç—Ä–∞—Ç...");
    let mut cost_tracker = CostTracker::new();
    println!("   –¢—Ä–µ–∫–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ\n");

    // 6. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è —ç–º–∏—Å—Å–∏–∏
    println!("6. –†–∞—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —ç–º–∏—Å—Å–∏–∏...");
    let (plan, tokens) = cost_tracker.create_plan_and_calculate_tokens(
        "franchise_001".to_string(),
        dish_quantities,
    );

    println!("   –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: {:.2} –ª–∞—Ä–∏", plan.total_estimated_cost);
    println!("   –¢–æ–∫–µ–Ω–æ–≤ –∫ —ç–º–∏—Å—Å–∏–∏: {}", tokens);
    println!("   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: 1 —Ç–æ–∫–µ–Ω = 5 –ª–∞—Ä–∏ –∑–∞—Ç—Ä–∞—Ç");
    println!();

    // 7. –°–∏–º—É–ª–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–∫—É–ø–∫–∏
    println!("7. –°–∏–º—É–ª—è—Ü–∏—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–∫—É–ø–æ–∫...");
    
    // –ó–∞–∫—É–ø–∫–∞ —Ä–∏—Å–∞
    let rice_purchase = ActualPurchase {
        id: "purchase_001".to_string(),
        franchise_id: "franchise_001".to_string(),
        ingredient: "–†–∏—Å".to_string(),
        quantity_kg: 220.0, // 220 –∫–≥ —Ä–∏—Å–∞
        cost: 440.0, // 440 –ª–∞—Ä–∏
        date: Utc::now(),
        supplier: "rice_trader_001".to_string(),
        invoice_number: Some("INV-RICE-001".to_string()),
        status: PurchaseStatus::Paid,
    };

    // –ó–∞–∫—É–ø–∫–∞ –º—è—Å–∞
    let meat_purchase = ActualPurchase {
        id: "purchase_002".to_string(),
        franchise_id: "franchise_001".to_string(),
        ingredient: "–ì–æ–≤—è–¥–∏–Ω–∞".to_string(),
        quantity_kg: 165.0, // 165 –∫–≥ –º—è—Å–∞
        cost: 825.0, // 825 –ª–∞—Ä–∏
        date: Utc::now(),
        supplier: "meat_market_001".to_string(),
        invoice_number: Some("INV-MEAT-001".to_string()),
        status: PurchaseStatus::Paid,
    };

    // –ó–∞–∫—É–ø–∫–∞ –æ–≤–æ—â–µ–π
    let vegetables_purchase = ActualPurchase {
        id: "purchase_003".to_string(),
        franchise_id: "franchise_001".to_string(),
        ingredient: "–õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π".to_string(),
        quantity_kg: 55.0, // 55 –∫–≥ –ª—É–∫–∞
        cost: 55.0, // 55 –ª–∞—Ä–∏
        date: Utc::now(),
        supplier: "vegetables_plus_001".to_string(),
        invoice_number: Some("INV-VEG-001".to_string()),
        status: PurchaseStatus::Paid,
    };

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–∫—É–ø–∫–∏
    cost_tracker.register_actual_purchase(rice_purchase).unwrap();
    cost_tracker.register_actual_purchase(meat_purchase).unwrap();
    cost_tracker.register_actual_purchase(vegetables_purchase).unwrap();

    println!("   –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–∫—É–ø–æ–∫: 3");
    println!("   - –†–∏—Å: 220 –∫–≥ –∑–∞ 440 –ª–∞—Ä–∏");
    println!("   - –ì–æ–≤—è–¥–∏–Ω–∞: 165 –∫–≥ –∑–∞ 825 –ª–∞—Ä–∏");
    println!("   - –õ—É–∫: 55 –∫–≥ –∑–∞ 55 –ª–∞—Ä–∏");
    println!();

    // 8. –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ –∑–∞—Ç—Ä–∞—Ç–∞—Ö
    println!("8. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –∑–∞—Ç—Ä–∞—Ç–∞—Ö...");
    let period = blockchain_project::cost_tracking::DateRange {
        start: Utc::now() - chrono::Duration::days(30),
        end: Utc::now(),
    };

    let report = cost_tracker.create_cost_report("franchise_001", period.clone());
    
    println!("   –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {}", report.id);
    println!("   –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: {:.2} –ª–∞—Ä–∏", report.total_costs);
    println!("   –¢–æ–∫–µ–Ω–æ–≤ –∫ —ç–º–∏—Å—Å–∏–∏: {}", report.tokens_to_emit);
    println!("   –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏: {:.1}%", report.transparency_score);
    println!();

    // 9. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–±–∏–≤–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    println!("9. –†–∞–∑–±–∏–≤–∫–∞ –∑–∞—Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:");
    for (category, cost) in &report.cost_breakdown {
        let percentage = (cost / report.total_costs) * 100.0;
        println!("   - {}: {:.2} –ª–∞—Ä–∏ ({:.1}%)", category, cost, percentage);
    }
    println!();

    // 10. –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    println!("10. –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ñ—Ä–∞–Ω—à–∏–∑—ã...");
    let efficiency = cost_tracker.analyze_efficiency("franchise_001", period);
    
    println!("   –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: {:.2} –ª–∞—Ä–∏", efficiency.planned_vs_actual.planned_cost);
    println!("   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: {:.2} –ª–∞—Ä–∏", efficiency.planned_vs_actual.actual_cost);
    println!("   –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {:.2} –ª–∞—Ä–∏ ({:.1}%)", 
            efficiency.planned_vs_actual.variance,
            efficiency.planned_vs_actual.variance_percentage);
    println!("   –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ç–µ—Ä—å: {:.1}%", efficiency.waste_percentage);
    println!();

    // 11. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    println!("11. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤:");
    let token_stats = cost_tracker.get_token_statistics("franchise_001");
    
    println!("   –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: {:.2} –ª–∞—Ä–∏", token_stats.total_cost);
    println!("   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {}", token_stats.total_tokens);
    println!("   –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: {:.2} –ª–∞—Ä–∏", 
            cost_tracker.token_calculator.get_token_cost_in_lari());
    println!();

    // 12. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–ª–æ–∫—á–µ–π–Ω–∞
    println!("12. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:");
    println!("   ‚úÖ –í—Å–µ –∑–∞–∫—É–ø–∫–∏ –∏–º–µ—é—Ç –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–æ–≤");
    println!("   ‚úÖ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º—É–ª–µ (1 —Ç–æ–∫–µ–Ω = 5 –ª–∞—Ä–∏)");
    println!("   ‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –ø–æ–¥–¥–µ–ª—å–Ω–∞—è (–≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã)");
    println!("   ‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–µ");
    println!();

    println!("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    println!("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.");
}
