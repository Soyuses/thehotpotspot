use std::collections::HashMap;
use std::sync::Arc;
use tokio::sync::RwLock;
use chrono::{DateTime, Utc};

use blockchain_project::{
    transparency_reporting::{
        TransparencyReportingSystem, ReportGenerationRequest, ReportType,
        TransparencyConfig, NotificationType, NotificationPriority,
    },
    cost_tracking::CostTracker,
    new_tokenomics::NewTokenomicsManager,
    tokenomics_config::TokenomicsConfig,
};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("üîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏");
    println!("==================================================");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
    let mut transparency_system = TransparencyReportingSystem::new();
    transparency_system.config = TransparencyConfig {
        auto_report_generation: true,
        report_frequency: ReportType::Monthly,
        notification_enabled: true,
        public_access: true,
        data_retention_days: 365,
        cost_threshold_alerts: 1000.0,
        revenue_threshold_alerts: 5000.0,
        efficiency_threshold_alerts: 0.8,
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É—á–µ—Ç–∞ –∑–∞—Ç—Ä–∞—Ç
    let cost_tracker = CostTracker::new();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–º–∏–∫–∏
    let tokenomics_config = TokenomicsConfig::default();
    let tokenomics_manager = NewTokenomicsManager::new(tokenomics_config);

    // Mock –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
    let sales_data = HashMap::from([
        ("plov".to_string(), 1250.0),
        ("khinkali".to_string(), 980.0),
        ("khachapuri".to_string(), 1100.0),
        ("salad".to_string(), 450.0),
        ("tea".to_string(), 200.0),
    ]);

    println!("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏");
    println!("------------------------------------------------");

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞
    let report_request = ReportGenerationRequest {
        report_type: ReportType::Monthly,
        period_start: Utc::now() - chrono::Duration::days(30),
        period_end: Utc::now(),
        include_details: true,
        include_recommendations: true,
        generated_by: "admin".to_string(),
    };

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    let report_response = transparency_system
        .generate_report(
            report_request,
            &cost_tracker,
            &tokenomics_manager,
            &sales_data,
        )
        .await;

    if report_response.success {
        println!("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!");
        if let Some(report_id) = &report_response.report_id {
            println!("   ID –æ—Ç—á–µ—Ç–∞: {}", report_id);
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        if let Some(ref report_id) = report_response.report_id {
            if let Some(report) = transparency_system.get_report(&report_id) {
                println!("\nüìã –î–µ—Ç–∞–ª–∏ –æ—Ç—á–µ—Ç–∞:");
                println!("   –¢–∏–ø: {:?}", report.report_type);
                println!("   –ü–µ—Ä–∏–æ–¥: {} - {}", report.period_start, report.period_end);
                println!("   –°—Ç–∞—Ç—É—Å: {:?}", report.status);
                
                println!("\nüí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:");
                println!("   –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {:.2} GEL", report.data.total_revenue);
                println!("   –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: {:.2} GEL", report.data.total_costs);
                println!("   –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {:.2} GEL", report.data.net_profit);
                println!("   –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: {:.2}%", report.data.profit_margin * 100.0);
                
                println!("\nü™ô –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞:");
                println!("   ST —Ç–æ–∫–µ–Ω—ã —ç–º–∏—Ç–∏—Ä–æ–≤–∞–Ω—ã: {}", report.data.st_tokens_emitted);
                println!("   UT —Ç–æ–∫–µ–Ω—ã –∑–∞—Ä–∞–±–æ—Ç–∞–Ω—ã: {}", report.data.ut_tokens_earned);
                println!("   –†–∞—É–Ω–¥—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {}", report.data.conversion_rounds);
                println!("   DAO –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {}", report.data.dao_proposals);
                
                println!("\n‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:");
                println!("   –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞—Ç—Ä–∞—Ç: {:.2}x", report.efficiency_metrics.cost_efficiency);
                println!("   –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤: {:.2}", report.efficiency_metrics.token_efficiency);
                println!("   –°—Ç–∞–≤–∫–∞ —ç–º–∏—Å—Å–∏–∏: {:.2} THP/GEL", report.token_emission.st_emission_rate);
                
                println!("\nüí° –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:");
                for highlight in &report.summary.key_highlights {
                    println!("   ‚Ä¢ {}", highlight);
                }
                
                println!("\nüìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:");
                for recommendation in &report.summary.recommendations {
                    println!("   ‚Ä¢ {}", recommendation);
                }
                
                println!("\n‚ö†Ô∏è –†–∏—Å–∫–∏:");
                for risk in &report.summary.risks {
                    println!("   ‚Ä¢ {}", risk);
                }
                
                println!("\nüöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:");
                for opportunity in &report.summary.opportunities {
                    println!("   ‚Ä¢ {}", opportunity);
                }
            }
        }
    } else {
        println!("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {}", report_response.error.unwrap());
    }

    println!("\nüîî –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
    println!("----------------------");

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    transparency_system.send_notification(blockchain_project::transparency_reporting::TransparencyNotification {
        notification_id: uuid::Uuid::new_v4().to_string(),
        notification_type: NotificationType::ReportGenerated,
        title: "–û—Ç—á–µ—Ç –æ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω".to_string(),
        message: "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É".to_string(),
        created_at: Utc::now(),
        priority: NotificationPriority::Medium,
        recipients: vec!["admin".to_string(), "owner".to_string()],
        status: blockchain_project::transparency_reporting::NotificationStatus::Pending,
        action_required: false,
        action_url: Some("/reports/monthly".to_string()),
    });

    transparency_system.send_notification(blockchain_project::transparency_reporting::TransparencyNotification {
        notification_id: uuid::Uuid::new_v4().to_string(),
        notification_type: NotificationType::CostAnomaly,
        title: "–ê–Ω–æ–º–∞–ª–∏—è –≤ –∑–∞—Ç—Ä–∞—Ç–∞—Ö".to_string(),
        message: "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ 15%".to_string(),
        created_at: Utc::now(),
        priority: NotificationPriority::High,
        recipients: vec!["admin".to_string(), "finance".to_string()],
        status: blockchain_project::transparency_reporting::NotificationStatus::Pending,
        action_required: true,
        action_url: Some("/costs/analysis".to_string()),
    });

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    let notifications = transparency_system.get_notifications(Some(10));
    println!("üì¨ –ê–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({}):", notifications.len());
    for notification in notifications {
        println!("   üîî {} - {}", notification.title, notification.message);
        println!("      –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {:?}, –°—Ç–∞—Ç—É—Å: {:?}", notification.priority, notification.status);
        if notification.action_required {
            println!("      ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ: {}", notification.action_url.as_ref().unwrap_or(&"N/A".to_string()));
        }
    }

    println!("\nüìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤");
    println!("------------------");

    // –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ JSON
    if let Some(ref report_id) = report_response.report_id {
        match transparency_system.export_report_json(&report_id) {
            Ok(json_data) => {
                println!("‚úÖ JSON —ç–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω");
                println!("   –†–∞–∑–º–µ—Ä: {} –±–∞–π—Ç", json_data.len());
            }
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ JSON —ç–∫—Å–ø–æ—Ä—Ç–∞: {}", e);
            }
        }

        // –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ CSV
        match transparency_system.export_report_csv(&report_id) {
            Ok(csv_data) => {
                println!("‚úÖ CSV —ç–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω");
                println!("   –†–∞–∑–º–µ—Ä: {} –±–∞–π—Ç", csv_data.len());
                println!("   –î–∞–Ω–Ω—ã–µ:\n{}", csv_data);
            }
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ CSV —ç–∫—Å–ø–æ—Ä—Ç–∞: {}", e);
            }
        }
    }

    println!("\nüåê –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞");
    println!("--------------------");

    // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    if let Some(ref report_id) = report_response.report_id {
        match transparency_system.publish_report(&report_id) {
            Ok(_) => {
                println!("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞");
            }
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {}", e);
            }
        }
    }

    println!("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã");
    println!("--------------------");
    println!("   –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {}", transparency_system.reports.len());
    println!("   –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {}", transparency_system.notifications.len());
    println!("   –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤: {}", transparency_system.config.auto_report_generation);
    println!("   –ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤: {:?}", transparency_system.config.report_frequency);
    println!("   –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø: {}", transparency_system.config.public_access);

    println!("\nüéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    println!("–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.");

    Ok(())
}
