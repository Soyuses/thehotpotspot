use blockchain_project::video_streaming::VideoStreamingManager;
use blockchain_project::video_streaming_api::create_video_streaming_routes;
use warp::Filter;
use std::sync::Arc;
use tokio::sync::RwLock;

#[tokio::main]
async fn main() {
    println!("üé• –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–≤ The Hot Pot Spot");
    println!("=" .repeat(50));

    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–≤
    let manager = Arc::new(RwLock::new(VideoStreamingManager::new()));

    // –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
    let routes = create_video_streaming_routes(manager)
        .with(warp::cors()
            .allow_any_origin()
            .allow_headers(vec!["content-type"])
            .allow_methods(vec!["GET", "POST", "PUT", "DELETE"]));

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    let port = 8083;
    println!("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {}", port);
    println!("üì± –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:{}/video_streaming_dashboard.html", port);
    println!("üîó API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:");
    println!("   GET  /api/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞");
    println!("   GET  /api/cameras - –°–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä");
    println!("   POST /api/streams/camera - –°–æ–∑–¥–∞—Ç—å –ø–æ—Ç–æ–∫ —Å –∫–∞–º–µ—Ä—ã");
    println!("   POST /api/streams/youtube - –°–æ–∑–¥–∞—Ç—å –ø–æ—Ç–æ–∫ —Å YouTube");
    println!("   POST /api/streams/start/{id} - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ç–æ–∫");
    println!("   POST /api/streams/stop/{id} - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫");
    println!("   GET  /api/streams - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤");
    println!("   GET  /api/streams/{id} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ç–æ–∫–µ");
    println!("   POST /api/youtube/validate - –í–∞–ª–∏–¥–∞—Ü–∏—è YouTube URL");
    println!("=" .repeat(50));

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    let static_files = warp::path("video_streaming_dashboard.html")
        .and(warp::fs::file("./video_streaming_dashboard.html"));

    let all_routes = routes.or(static_files);

    warp::serve(all_routes)
        .run(([127, 0, 0, 1], port))
        .await;
}
