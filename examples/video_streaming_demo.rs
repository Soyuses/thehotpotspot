use blockchain_project::video_streaming::{
    VideoStreamingManager, StreamConfig, StreamQuality, OverlayConfig
};
use tokio::time::{sleep, Duration};
use std::sync::Arc;
use tokio::sync::RwLock;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("üé• The Hot Pot Spot - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–≤");
    println!("{}", "=".repeat(50));

    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–≤
    let manager = Arc::new(RwLock::new(VideoStreamingManager::new()));

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä
    println!("\nüìπ –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä...");
    let cameras = manager.read().await.get_available_cameras().await;
    
    if cameras.is_empty() {
        println!("‚ùå –ö–∞–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
    } else {
        println!("‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä: {}", cameras.len());
        for camera in &cameras {
            println!("   - {} ({}): {}", camera.name, camera.resolution, camera.device_id);
        }
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ —Å –∫–∞–º–µ—Ä—ã
    if !cameras.is_empty() {
        println!("\nüé¨ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ —Å –∫–∞–º–µ—Ä—ã...");
        
        let config = StreamConfig {
            auto_start: false,
            loop_video: false,
            quality: StreamQuality::High,
            overlay: Some(OverlayConfig {
                show_timestamp: true,
                show_logo: true,
                logo_path: Some("logo.png".to_string()),
                text_overlay: Some("The Hot Pot Spot".to_string()),
            }),
        };

        let camera_stream_id = manager.write().await.create_camera_stream(
            cameras[0].device_id.clone(),
            cameras[0].resolution.clone(),
            "–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞–º–µ—Ä–∞ —Ñ—É–¥—Ç—Ä–∞–∫–∞".to_string(),
            config,
        ).await?;

        println!("‚úÖ –ü–æ—Ç–æ–∫ —Å –∫–∞–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω: {}", camera_stream_id);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Å –∫–∞–º–µ—Ä—ã
        println!("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —Å –∫–∞–º–µ—Ä—ã...");
        manager.write().await.start_stream(&camera_stream_id).await?;
        println!("‚úÖ –ü–æ—Ç–æ–∫ —Å –∫–∞–º–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω");

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        sleep(Duration::from_secs(3)).await;

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ —Å –∫–∞–º–µ—Ä—ã
        println!("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ —Å –∫–∞–º–µ—Ä—ã...");
        manager.write().await.stop_stream(&camera_stream_id).await?;
        println!("‚úÖ –ü–æ—Ç–æ–∫ —Å –∫–∞–º–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ —Å YouTube
    println!("\nüì∫ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ —Å YouTube...");
    
    let youtube_url = "https://www.youtube.com/watch?v=dQw4w9WgXcQ";
    let video_id = manager.read().await.validate_youtube_url(youtube_url)?;
    
    let youtube_config = StreamConfig {
        auto_start: false,
        loop_video: true,
        quality: StreamQuality::High,
        overlay: None,
    };

    let youtube_stream_id = manager.write().await.create_youtube_stream(
        video_id,
        youtube_url.to_string(),
        "–§–æ–Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è —Ñ—É–¥—Ç—Ä–∞–∫–∞".to_string(),
        youtube_config,
    ).await?;

    println!("‚úÖ YouTube –ø–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω: {}", youtube_stream_id);

    // –ó–∞–ø—É—Å–∫–∞–µ–º YouTube –ø–æ—Ç–æ–∫
    println!("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ YouTube –ø–æ—Ç–æ–∫–∞...");
    manager.write().await.start_stream(&youtube_stream_id).await?;
    println!("‚úÖ YouTube –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω");

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    sleep(Duration::from_secs(5)).await;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–æ–∫–∞—Ö
    println!("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ç–æ–∫–∞—Ö:");
    let all_streams = manager.read().await.get_all_streams().await;
    
    for stream in &all_streams {
        println!("\nüé• –ü–æ—Ç–æ–∫: {}", stream.metadata.title);
        println!("   ID: {}", stream.stream_id);
        println!("   –¢–∏–ø: {:?}", stream.stream_type);
        println!("   –°—Ç–∞—Ç—É—Å: {:?}", stream.status);
        println!("   –°–æ–∑–¥–∞–Ω: {}", stream.created_at);
        println!("   –û–±–Ω–æ–≤–ª–µ–Ω: {}", stream.updated_at);
        
        if let Some(fps) = stream.metadata.fps {
            println!("   FPS: {}", fps);
        }
        if let Some(bitrate) = stream.metadata.bitrate {
            println!("   –ë–∏—Ç—Ä–µ–π—Ç: {} kbps", bitrate);
        }
        if let Some(resolution) = &stream.metadata.resolution {
            println!("   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {}", resolution);
        }
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º YouTube –ø–æ—Ç–æ–∫
    println!("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ YouTube –ø–æ—Ç–æ–∫–∞...");
    manager.write().await.stop_stream(&youtube_stream_id).await?;
    println!("‚úÖ YouTube –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ YouTube URL
    println!("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ YouTube URL:");
    
    let test_urls = vec![
        "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
        "https://youtu.be/dQw4w9WgXcQ",
        "https://www.youtube.com/watch?v=dQw4w9WgXcQ&t=10s",
        "https://invalid-url.com",
        "not-a-url",
    ];

    for url in test_urls {
        match manager.read().await.validate_youtube_url(url) {
            Ok(video_id) => {
                println!("‚úÖ {} -> {}", url, video_id);
            }
            Err(e) => {
                println!("‚ùå {} -> {}", url, e);
            }
        }
    }

    println!("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    println!("{}", "=".repeat(50));

    Ok(())
}
