//! Anonymous Wallets Demo for The Hot Pot Spot
//! 
//! This example demonstrates the anonymous wallet system for unclaimed tokens.

use blockchain_project::anonymous_wallets::{
    AnonymousWalletManager, AnonymousWalletConfig, WalletStatus, WalletTransferRequest
};

fn main() {
    println!("üîê –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤");
    println!("{}", "=".repeat(50));

    // Initialize anonymous wallet manager
    let config = AnonymousWalletConfig::default();
    let mut manager = AnonymousWalletManager::new(config);

    // Demo 1: Create anonymous wallets for different sales
    println!("\nüìã –î–µ–º–æ 1: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤");
    println!("{}", "-".repeat(30));

    let sales = vec![
        ("sale_001", "check_001", "node_tbilisi_001", 25.0, 500),
        ("sale_002", "check_002", "node_batumi_001", 15.0, 300),
        ("sale_003", "check_003", "node_kutaisi_001", 50.0, 1000),
        ("sale_004", "check_004", "node_tbilisi_001", 10.0, 200),
        ("sale_005", "check_005", "node_batumi_001", 30.0, 600),
    ];

    let mut created_wallets = Vec::new();

    for (sale_id, check_id, node_id, amount, tokens) in sales {
        match manager.create_wallet(
            check_id.to_string(),
            sale_id.to_string(),
            node_id.to_string(),
            amount,
            tokens
        ) {
            Ok(wallet) => {
                println!("‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ—à–µ–ª–µ–∫ {} –¥–ª—è —á–µ–∫–∞ {}", wallet.wallet_id, check_id);
                println!("   –ê–¥—Ä–µ—Å: {}", wallet.address);
                println!("   –°—É–º–º–∞: {} GEL ‚Üí {} ST", amount, tokens);
                created_wallets.push(wallet);
            }
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è {}: {}", check_id, e);
            }
        }
    }

    // Demo 2: Activate wallets (mint tokens)
    println!("\nü™ô –î–µ–º–æ 2: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤ (—ç–º–∏—Å—Å–∏—è —Ç–æ–∫–µ–Ω–æ–≤)");
    println!("{}", "-".repeat(30));

    for wallet in &created_wallets {
        match manager.activate_wallet(&wallet.wallet_id) {
            Ok(_) => {
                println!("‚úÖ –ö–æ—à–µ–ª–µ–∫ {} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", wallet.wallet_id);
            }
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞ {}: {}", wallet.wallet_id, e);
            }
        }
    }

    // Demo 3: Customer journey simulation
    println!("\nüë§ –î–µ–º–æ 3: –°–∏–º—É–ª—è—Ü–∏—è –ø—É—Ç–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è");
    println!("{}", "-".repeat(30));

    let customer_scenarios = vec![
        ("check_001", "user_001", "0xuser_wallet_1234567890abcdef", "–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —á–µ–∫"),
        ("check_002", "user_002", "0xuser_wallet_abcdef1234567890", "–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —á–µ–∫"),
        ("check_003", "user_003", "0xuser_wallet_9876543210fedcba", "–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —á–µ–∫"),
        ("check_004", "", "", "–í—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç —á–µ–∫"),
        ("check_005", "user_005", "0xuser_wallet_fedcba0987654321", "–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —á–µ–∫"),
    ];

    for (check_id, user_id, user_wallet, action) in customer_scenarios {
        println!("\nüõí –ü–æ–∫—É–ø–∞—Ç–µ–ª—å —Å —á–µ–∫–æ–º {}: {}", check_id, action);
        
        if let Some(wallet) = manager.get_wallet_by_check(check_id) {
            let wallet_id = wallet.wallet_id.clone();
            if action == "–í—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç —á–µ–∫" {
                // Customer discards the check
                match manager.discard_wallet(&wallet_id) {
                    Ok(_) => {
                        println!("   üóëÔ∏è  –ß–µ–∫ –≤—ã–±—Ä–æ—à–µ–Ω, –∫–æ—à–µ–ª–µ–∫ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ discarded");
                    }
                    Err(e) => {
                        println!("   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏–∏ —á–µ–∫–∞: {}", e);
                    }
                }
            } else {
                // Customer claims the check
                match manager.transfer_to_user(
                    &wallet_id,
                    user_id.to_string(),
                    user_wallet.to_string()
                ) {
                    Ok(transferred_tokens) => {
                        println!("   ‚úÖ –¢–æ–∫–µ–Ω—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –ª–∏—á–Ω—ã–π –∫–æ—à–µ–ª–µ–∫");
                        println!("   üí∞ –ü–æ–ª—É—á–µ–Ω–æ: {} ST —Ç–æ–∫–µ–Ω–æ–≤", transferred_tokens);
                        println!("   üîó –ö–æ—à–µ–ª–µ–∫: {}", user_wallet);
                    }
                    Err(e) => {
                        println!("   ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤: {}", e);
                    }
                }
            }
        } else {
            println!("   ‚ùå –ö–æ—à–µ–ª–µ–∫ –¥–ª—è —á–µ–∫–∞ {} –Ω–µ –Ω–∞–π–¥–µ–Ω", check_id);
        }
    }

    // Demo 4: Wallet statistics
    println!("\nüìä –î–µ–º–æ 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤");
    println!("{}", "-".repeat(30));

    let stats = manager.get_statistics();
    println!("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤:");
    println!("   –í—Å–µ–≥–æ –∫–æ—à–µ–ª—å–∫–æ–≤: {}", stats.total_wallets);
    println!("   –°–æ–∑–¥–∞–Ω–æ: {}", stats.created);
    println!("   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {}", stats.active);
    println!("   –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {}", stats.transferred);
    println!("   –ò—Å—Ç–µ–∫—à–∏—Ö: {}", stats.expired);
    println!("   –í—ã–±—Ä–æ—à–µ–Ω–Ω—ã—Ö: {}", stats.discarded);
    println!("   –¢–æ–∫–µ–Ω–æ–≤ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {} ST", stats.total_tokens_transferred);
    println!("   –¢–æ–∫–µ–Ω–æ–≤ –Ω–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–æ: {} ST", stats.total_tokens_unclaimed);

    // Demo 5: Redistribution analysis
    println!("\nüîÑ –î–µ–º–æ 5: –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è");
    println!("{}", "-".repeat(30));

    let redistribution_wallets = manager.get_wallets_for_redistribution();
    let redistribution_tokens = manager.get_redistribution_tokens();

    println!("üìã –ö–æ—à–µ–ª—å–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ({} —à—Ç.):", redistribution_wallets.len());
    for wallet in &redistribution_wallets {
        println!("   {}: {} ST (—Å—Ç–∞—Ç—É—Å: {:?})", 
            wallet.wallet_id, wallet.st_tokens, wallet.status);
    }

    println!("üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {} ST", redistribution_tokens);

    if redistribution_tokens > 0 {
        println!("\nüéØ –°—Ü–µ–Ω–∞—Ä–∏–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:");
        println!("   1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ DAO");
        println!("   2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–æ–Ω–¥");
        println!("   3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã");
        println!("   4. –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –≤ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ–Ω–¥—ã");
    }

    // Demo 6: Wallet lifecycle
    println!("\nüîÑ –î–µ–º–æ 6: –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∫–æ—à–µ–ª—å–∫–∞");
    println!("{}", "-".repeat(30));

    println!("üìù –≠—Ç–∞–ø—ã –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±–µ–∑–ª–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:");
    println!("   1. üÜï –°–æ–∑–¥–∞–Ω–∏–µ - –∫–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫–∞");
    println!("   2. ü™ô –ê–∫—Ç–∏–≤–∞—Ü–∏—è - —Ç–æ–∫–µ–Ω—ã —ç–º–∏—Ç–∏—Ä—É—é—Ç—Å—è –≤ –∫–æ—à–µ–ª–µ–∫");
    println!("   3. ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ - –∫–æ—à–µ–ª–µ–∫ –∂–¥–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º");
    println!("   4. ‚úÖ –ü–µ—Ä–µ–¥–∞—á–∞ - —Ç–æ–∫–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥—è—Ç—Å—è –Ω–∞ –ª–∏—á–Ω—ã–π –∫–æ—à–µ–ª–µ–∫");
    println!("   5. üóëÔ∏è  –í—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ - –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç —á–µ–∫");
    println!("   6. ‚è∞ –ò—Å—Ç–µ—á–µ–Ω–∏–µ - –∫–æ—à–µ–ª–µ–∫ –∏—Å—Ç–µ–∫–∞–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏");
    println!("   7. üîÑ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ - –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è");

    // Demo 7: Security and privacy features
    println!("\nüîí –î–µ–º–æ 7: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å");
    println!("{}", "-".repeat(30));

    println!("üõ°Ô∏è  –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:");
    println!("   ‚Ä¢ –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∞–¥—Ä–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ check_id –∏ wallet_id");
    println!("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å—Ç–µ—á–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤");
    println!("   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–≤—è–∑–∏ —Å –ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏");
    println!("   ‚Ä¢ –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä—É–µ–º–æ—Å—Ç—å –≤ –±–ª–æ–∫—á–µ–π–Ω–µ");
    println!("   ‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è");

    println!("\nüîê –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:");
    println!("   ‚Ä¢ –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –¥–æ –º–æ–º–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏");
    println!("   ‚Ä¢ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–≤—è–∑–∞—Ç—å —á–µ–∫ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –±–µ–∑ QR-–∫–æ–¥–∞");
    println!("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
    println!("   ‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º GDPR");

    // Demo 8: Integration with other systems
    println!("\nüîó –î–µ–º–æ 8: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏");
    println!("{}", "-".repeat(30));

    println!("ü§ù –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å:");
    println!("   ‚Ä¢ Check Generation API - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫–æ–≤");
    println!("   ‚Ä¢ Tokenomics Manager - —ç–º–∏—Å—Å–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏");
    println!("   ‚Ä¢ DAO Governance - —É—á–∞—Å—Ç–∏–µ –≤ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏");
    println!("   ‚Ä¢ KYC/AML System - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏");
    println!("   ‚Ä¢ Mobile App - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");

    // Final statistics
    println!("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    println!("{}", "=".repeat(50));
    let final_stats = manager.get_statistics();
    println!("–í—Å–µ–≥–æ –∫–æ—à–µ–ª—å–∫–æ–≤: {}", final_stats.total_wallets);
    println!("–£—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {} ({}%)", 
        final_stats.transferred,
        if final_stats.total_wallets > 0 {
            (final_stats.transferred * 100) / final_stats.total_wallets
        } else { 0 }
    );
    println!("–í—ã–±—Ä–æ—à–µ–Ω–æ/–∏—Å—Ç–µ–∫–ª–æ: {} ({}%)", 
        final_stats.discarded + final_stats.expired,
        if final_stats.total_wallets > 0 {
            ((final_stats.discarded + final_stats.expired) * 100) / final_stats.total_wallets
        } else { 0 }
    );
    println!("–¢–æ–∫–µ–Ω–æ–≤ –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏: {} ST", final_stats.total_tokens_transferred);
    println!("–¢–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {} ST", final_stats.total_tokens_unclaimed);

    println!("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    println!("üí° –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤:");
    println!("   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π");
    println!("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏");
    println!("   ‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ —Ç—Ä–∞—Å—Å–∏—Ä—É–µ–º–æ—Å—Ç—å");
    println!("   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —ç–∫–æ—Å–∏—Å—Ç–µ–º–æ–π The Hot Pot Spot");
    println!("   ‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º");
}
